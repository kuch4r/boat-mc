
CAN_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001dac  00001e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000045a  00800102  00800102  00001e42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e42  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  00001e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e5c  00000000  00000000  00002112  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cba  00000000  00000000  00004f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010a2  00000000  00000000  00005c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000768  00000000  00000000  00006ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008fc  00000000  00000000  00007434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000029df  00000000  00000000  00007d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  0000a70f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

#include "delay.h"

void delay100us8(uint8_t t)
{
	while(t>0)
       0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__ctors_end>
	{
		delayus8(100); 
       4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>

#include "delay.h"

void delay100us8(uint8_t t)
{
	while(t>0)
      10:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
// set the port pin and direction
	DDRD = (1<<5) | DDRD;
	//PORTD = (0xff ^ (1<<5)) & PORTD;

// set max pwm value (this also affects the PWM frequency)
	ICR1 = 0x78; //- tutaj wipsaæ do ilu ma liczyæ licznik
      14:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      18:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      1c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      20:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      24:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      28:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__vector_10>
      2c:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__vector_11>
      30:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      34:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      38:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      3c:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__vector_15>
      40:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      44:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      48:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      4c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      50:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      54:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      58:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      5c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      60:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      64:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_25>
      68:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      6c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      70:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      74:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      78:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      7c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      80:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      84:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      88:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      8c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      90:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      94:	cc 05       	cpc	r28, r12
      96:	4b 06       	cpc	r4, r27
      98:	c2 06       	cpc	r12, r18
      9a:	23 07       	cpc	r18, r19
      9c:	5e 07       	cpc	r21, r30
      9e:	a3 07       	cpc	r26, r19
      a0:	ec 07       	cpc	r30, r28
      a2:	72 08       	sbc	r7, r2
      a4:	02 09       	sbc	r16, r2
      a6:	c6 05       	cpc	r28, r6
      a8:	f1 09       	sbc	r31, r1

000000aa <__trampolines_end>:
      aa:	73 74       	andi	r23, 0x43	; 67
      ac:	43 00       	.word	0x0043	; ????

000000ae <__c.2422>:
      ae:	54 6d 61 78 3a 20 00                                Tmax: .

000000b5 <__c.2420>:
      b5:	73 74 43 00                                         stC.

000000b9 <__c.2418>:
      b9:	54 6d 69 6e 3a 20 00                                Tmin: .

000000c0 <__c.2416>:
      c0:	6d 56 00                                            mV.

000000c3 <__c.2414>:
      c3:	56 6d 61 78 3a 00                                   Vmax:.

000000c9 <__c.2412>:
      c9:	6d 56 00                                            mV.

000000cc <__c.2410>:
      cc:	56 6d 69 6e 3a 00                                   Vmin:.

000000d2 <__c.2408>:
      d2:	25 00                                               %.

000000d4 <__c.2406>:
      d4:	53 4f 43 3a 20 00                                   SOC: .

000000da <__c.2404>:
      da:	41 00                                               A.

000000dc <__c.2402>:
      dc:	43 75 72 72 65 6e 74 3a 00                          Current:.

000000e5 <__c.2400>:
      e5:	56 00                                               V.

000000e7 <__c.2398>:
      e7:	56 6f 6c 74 61 67 65 3a 00                          Voltage:.

000000f0 <__c.2396>:
      f0:	49 6e 76 61 6c 69 64 00                             Invalid.

000000f8 <__c.2393>:
      f8:	50 61 72 61 6d 65 74 72 69 7a 61 74 69 6f 6e 00     Parametrization.

00000108 <__c.2390>:
     108:	50 6f 77 65 72 20 53 61 76 65 00                    Power Save.

00000113 <__c.2387>:
     113:	49 6e 76 61 6c 69 64 20 49 6e 70 75 74 00           Invalid Input.

00000121 <__c.2384>:
     121:	4c 45 4d 20 41 6c 61 72 6d 00                       LEM Alarm.

0000012b <__c.2381>:
     12b:	4f 76 65 72 20 54 65 6d 70 2e 00                    Over Temp..

00000136 <__c.2378>:
     136:	4f 76 65 72 20 43 75 72 72 65 6e 74 00              Over Current.

00000143 <__c.2375>:
     143:	53 65 63 6f 6e 64 20 50 72 6f 74 2e 00              Second Prot..

00000150 <__c.2372>:
     150:	45 72 72 6f 72 00                                   Error.

00000156 <__c.2369>:
     156:	52 65 61 64 79 00                                   Ready.

0000015c <__c.2366>:
     15c:	42 61 74 74 65 72 79 20 46 75 6c 6c 00              Battery Full.

00000169 <__c.2363>:
     169:	42 61 74 74 65 72 79 20 48 69 67 68 00              Battery High.

00000176 <__c.2360>:
     176:	43 68 61 72 67 69 6e 67 00                          Charging.

0000017f <__c.2357>:
     17f:	42 61 74 74 65 72 79 20 45 6d 70 74 79 00           Battery Empty.

0000018d <__c.2354>:
     18d:	42 61 74 74 65 72 79 20 4c 6f 77 00                 Battery Low.

00000199 <__c.2351>:
     199:	44 69 73 63 68 61 72 67 69 6e 67 00                 Discharging.

000001a5 <__c.2347>:
     1a5:	49 6e 69 74 00                                      Init.

000001aa <__c.2344>:
     1aa:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

000001b9 <__c.2342>:
     1b9:	53 74 61 74 65 3a 20 00                             State: .

000001c1 <font5x7>:
     1c1:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1d1:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     1e1:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     1f1:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     201:	00 08 08 08 08 08 00 30 30 00 00 20 10 08 04 02     .......00.. ....
     211:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     221:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     231:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     241:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     251:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     261:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     271:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     281:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     291:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2a1:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2b1:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2c1:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2d1:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     2e1:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     2f1:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     301:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     311:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     321:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     331:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     341:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     351:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     361:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     371:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     381:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     391:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..
	...

000003a2 <__ctors_end>:
     3a2:	11 24       	eor	r1, r1
     3a4:	1f be       	out	0x3f, r1	; 63
     3a6:	cf ef       	ldi	r28, 0xFF	; 255
     3a8:	d0 e1       	ldi	r29, 0x10	; 16
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	cd bf       	out	0x3d, r28	; 61

000003ae <__do_copy_data>:
     3ae:	11 e0       	ldi	r17, 0x01	; 1
     3b0:	a0 e0       	ldi	r26, 0x00	; 0
     3b2:	b1 e0       	ldi	r27, 0x01	; 1
     3b4:	ec ea       	ldi	r30, 0xAC	; 172
     3b6:	fd e1       	ldi	r31, 0x1D	; 29
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <__do_copy_data+0x10>
     3ba:	05 90       	lpm	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	a2 30       	cpi	r26, 0x02	; 2
     3c0:	b1 07       	cpc	r27, r17
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <__do_copy_data+0xc>

000003c4 <__do_clear_bss>:
     3c4:	25 e0       	ldi	r18, 0x05	; 5
     3c6:	a2 e0       	ldi	r26, 0x02	; 2
     3c8:	b1 e0       	ldi	r27, 0x01	; 1
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <.do_clear_bss_start>

000003cc <.do_clear_bss_loop>:
     3cc:	1d 92       	st	X+, r1

000003ce <.do_clear_bss_start>:
     3ce:	ac 35       	cpi	r26, 0x5C	; 92
     3d0:	b2 07       	cpc	r27, r18
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <.do_clear_bss_loop>
     3d4:	0e 94 16 03 	call	0x62c	; 0x62c <main>
     3d8:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <_exit>

000003dc <__bad_interrupt>:
     3dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e0 <Init_ADC>:
	// ADEN - aktywowanie ADC
	// ADATE - zewnêtrzne ród³o wyzwalania
	// ADPSX - ustawienie preskalera 1 1 1 - clk/128
	// ADIE - aktywowanie przerwania
	// ADSC - start pomiaru
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | (1<<ADATE) | _BV(ADSC) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     3e0:	ea e7       	ldi	r30, 0x7A	; 122
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	8f 6e       	ori	r24, 0xEF	; 239
     3e8:	80 83       	st	Z, r24
	
	
	//Wybór ród³a wyzwalania - free ruunig
	ADCSRB |= (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
     3ea:	eb e7       	ldi	r30, 0x7B	; 123
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	80 83       	st	Z, r24
	
	//kierunek pinów
	DDR(ADC_6_PORT) &= ~(1<<ADC_6) ;
     3f2:	86 98       	cbi	0x10, 6	; 16
	
	// REFS1	REFS0
	// 0		0	-nap odniesienia z VREF
	// 1		1	-nap odniesienia z wew referencji
	// MUX2..0  -wybór wejscia przetwornika			
	ADMUX |= (0<<REFS1) | (1<<REFS0);
     3f4:	ec e7       	ldi	r30, 0x7C	; 124
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	80 64       	ori	r24, 0x40	; 64
     3fc:	80 83       	st	Z, r24
	ADC_V_AKU; //pocz¹tkowe ustawienie wejcia
     3fe:	80 81       	ld	r24, Z
     400:	80 7e       	andi	r24, 0xE0	; 224
     402:	86 60       	ori	r24, 0x06	; 6
     404:	80 83       	st	Z, r24
     406:	08 95       	ret

00000408 <ADC_get>:
uint16_t ADC_get(uint8_t channel){
	uint16_t mean=0;
	uint8_t i=0;
	
	for(i=0 ;i < FILTER_SAMPELS ;i++){
		mean += buf[channel][i];
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	ac 01       	movw	r20, r24
     40c:	44 0f       	add	r20, r20
     40e:	55 1f       	adc	r21, r21
     410:	fa 01       	movw	r30, r20
     412:	e8 0f       	add	r30, r24
     414:	f9 1f       	adc	r31, r25
     416:	ee 0f       	add	r30, r30
     418:	ff 1f       	adc	r31, r31
     41a:	ee 5f       	subi	r30, 0xFE	; 254
     41c:	fe 4f       	sbci	r31, 0xFE	; 254
     41e:	60 81       	ld	r22, Z
     420:	71 81       	ldd	r23, Z+1	; 0x01
     422:	22 81       	ldd	r18, Z+2	; 0x02
     424:	33 81       	ldd	r19, Z+3	; 0x03
     426:	26 0f       	add	r18, r22
     428:	37 1f       	adc	r19, r23
     42a:	84 0f       	add	r24, r20
     42c:	95 1f       	adc	r25, r21
     42e:	fc 01       	movw	r30, r24
     430:	ee 0f       	add	r30, r30
     432:	ff 1f       	adc	r31, r31
     434:	ee 5f       	subi	r30, 0xFE	; 254
     436:	fe 4f       	sbci	r31, 0xFE	; 254
     438:	84 81       	ldd	r24, Z+4	; 0x04
     43a:	95 81       	ldd	r25, Z+5	; 0x05
     43c:	28 0f       	add	r18, r24
     43e:	39 1f       	adc	r19, r25
	}
	mean /= FILTER_SAMPELS;
     440:	ab ea       	ldi	r26, 0xAB	; 171
     442:	ba ea       	ldi	r27, 0xAA	; 170
     444:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__umulhisi3>
	
	return mean;
		
}
     448:	96 95       	lsr	r25
     44a:	87 95       	ror	r24
     44c:	08 95       	ret

0000044e <ADC_task>:

}*/

//funckja przepisuje wartoæ z bufora poredniego do bufora odpowiedniej wartoci
void ADC_task(void){
	if(ADC_IRQ_flag){
     44e:	80 91 32 01 	lds	r24, 0x0132
     452:	88 23       	and	r24, r24
     454:	71 f0       	breq	.+28     	; 0x472 <ADC_task+0x24>
		//uart_dec(ADC_mux);	
		buf[ADC_mux][ADC_sample] = (uint16_t) ADCL;// przepisz zawartoæ rejestrów ADC do odpowiedniego miejsca w tablicy
     456:	80 91 78 00 	lds	r24, 0x0078
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	e2 e0       	ldi	r30, 0x02	; 2
     45e:	f1 e0       	ldi	r31, 0x01	; 1
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	80 83       	st	Z, r24
		buf[ADC_mux][ADC_sample] |= (uint16_t) (ADCH<<8);
     464:	20 91 79 00 	lds	r18, 0x0079
     468:	92 2b       	or	r25, r18
     46a:	91 83       	std	Z+1, r25	; 0x01
     46c:	80 83       	st	Z, r24
		else{				//zmieñ na nastêpny kana³
			ADMUX &= 0xE0; 
			ADMUX |= (++ADC_mux);
		}*/
		
		CLEAR_ADC_IRQ_FLAG;
     46e:	10 92 32 01 	sts	0x0132, r1
     472:	08 95       	ret

00000474 <__vector_25>:
	}

};

//przewanie wywo³ywane po zakoñczeniu konwersji
SIGNAL(SIG_ADC){
     474:	1f 92       	push	r1
     476:	0f 92       	push	r0
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	0f 92       	push	r0
     47c:	11 24       	eor	r1, r1
     47e:	8f 93       	push	r24
		
		if( ADC_count >= 1){
     480:	80 91 33 01 	lds	r24, 0x0133
     484:	88 23       	and	r24, r24
     486:	31 f0       	breq	.+12     	; 0x494 <__vector_25+0x20>
			SET_ADC_IRQ_FLAG;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 32 01 	sts	0x0132, r24
			ADC_count=0;
     48e:	10 92 33 01 	sts	0x0133, r1
     492:	05 c0       	rjmp	.+10     	; 0x49e <__vector_25+0x2a>
		}
		else{
			ADC_count++;
     494:	80 91 33 01 	lds	r24, 0x0133
     498:	8f 5f       	subi	r24, 0xFF	; 255
     49a:	80 93 33 01 	sts	0x0133, r24
		}
}
     49e:	8f 91       	pop	r24
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	0f 90       	pop	r0
     4a6:	1f 90       	pop	r1
     4a8:	18 95       	reti

000004aa <can_clear_all_mob>:
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     4aa:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     4ac:	ad ee       	ldi	r26, 0xED	; 237
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     4b0:	3e ee       	ldi	r19, 0xEE	; 238
     4b2:	20 e0       	ldi	r18, 0x00	; 0
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     4b4:	98 2f       	mov	r25, r24
     4b6:	92 95       	swap	r25
     4b8:	90 7f       	andi	r25, 0xF0	; 240
     4ba:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     4bc:	e3 2f       	mov	r30, r19
     4be:	f2 2f       	mov	r31, r18
     4c0:	11 92       	st	Z+, r1
     4c2:	e8 3f       	cpi	r30, 0xF8	; 248
     4c4:	f1 05       	cpc	r31, r1
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <can_clear_all_mob+0x16>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     4c8:	8f 5f       	subi	r24, 0xFF	; 255
     4ca:	8f 30       	cpi	r24, 0x0F	; 15
     4cc:	99 f7       	brne	.-26     	; 0x4b4 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     4ce:	08 95       	ret

000004d0 <can_get_mob_free>:
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
     4d0:	ed ee       	ldi	r30, 0xED	; 237
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	20 81       	ld	r18, Z
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
     4d6:	10 82       	st	Z, r1
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
     4d8:	80 91 ef 00 	lds	r24, 0x00EF
     4dc:	80 7c       	andi	r24, 0xC0	; 192
     4de:	69 f0       	breq	.+26     	; 0x4fa <can_get_mob_free+0x2a>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     4e0:	81 e0       	ldi	r24, 0x01	; 1
    {
        Can_set_mob(mob_number);
     4e2:	ad ee       	ldi	r26, 0xED	; 237
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
     4e6:	ef ee       	ldi	r30, 0xEF	; 239
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
     4ea:	98 2f       	mov	r25, r24
     4ec:	92 95       	swap	r25
     4ee:	90 7f       	andi	r25, 0xF0	; 240
     4f0:	9c 93       	st	X, r25
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
     4f2:	90 81       	ld	r25, Z
     4f4:	90 7c       	andi	r25, 0xC0	; 192
     4f6:	29 f4       	brne	.+10     	; 0x502 <can_get_mob_free+0x32>
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <can_get_mob_free+0x2c>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     4fa:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(mob_number);
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
        {
            CANPAGE = page_saved;
     4fc:	20 93 ed 00 	sts	0x00ED, r18
            return (mob_number);
     500:	08 95       	ret
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     502:	8f 5f       	subi	r24, 0xFF	; 255
     504:	8f 30       	cpi	r24, 0x0F	; 15
     506:	89 f7       	brne	.-30     	; 0x4ea <can_get_mob_free+0x1a>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
     508:	20 93 ed 00 	sts	0x00ED, r18
    return (NO_MOB);
     50c:	8f ef       	ldi	r24, 0xFF	; 255
}
     50e:	08 95       	ret

00000510 <can_get_mob_status>:
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     510:	80 91 ef 00 	lds	r24, 0x00EF
     514:	80 7c       	andi	r24, 0xC0	; 192
     516:	61 f0       	breq	.+24     	; 0x530 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     518:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     51c:	98 2f       	mov	r25, r24
     51e:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     520:	28 2f       	mov	r18, r24
     522:	20 76       	andi	r18, 0x60	; 96
     524:	20 32       	cpi	r18, 0x20	; 32
     526:	31 f0       	breq	.+12     	; 0x534 <can_get_mob_status+0x24>
     528:	90 34       	cpi	r25, 0x40	; 64
     52a:	31 f0       	breq	.+12     	; 0x538 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     52c:	8f 71       	andi	r24, 0x1F	; 31
     52e:	08 95       	ret
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     534:	89 2f       	mov	r24, r25
     536:	08 95       	ret
     538:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     53a:	08 95       	ret

0000053c <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     540:	20 91 ef 00 	lds	r18, 0x00EF
     544:	2f 70       	andi	r18, 0x0F	; 15
     546:	99 f0       	breq	.+38     	; 0x56e <can_get_data+0x32>
     548:	60 e0       	ldi	r22, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     54a:	ca ef       	ldi	r28, 0xFA	; 250
     54c:	d0 e0       	ldi	r29, 0x00	; 0
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     54e:	af ee       	ldi	r26, 0xEF	; 239
     550:	b0 e0       	ldi	r27, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     552:	28 81       	ld	r18, Y
     554:	fc 01       	movw	r30, r24
     556:	e6 0f       	add	r30, r22
     558:	f1 1d       	adc	r31, r1
     55a:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	2c 91       	ld	r18, X
     560:	46 2f       	mov	r20, r22
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	2f 70       	andi	r18, 0x0F	; 15
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	42 17       	cp	r20, r18
     56a:	53 07       	cpc	r21, r19
     56c:	94 f3       	brlt	.-28     	; 0x552 <can_get_data+0x16>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
    Can_reset();
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     57a:	8e e0       	ldi	r24, 0x0E	; 14
     57c:	80 93 e2 00 	sts	0x00E2, r24
     580:	8c e0       	ldi	r24, 0x0C	; 12
     582:	80 93 e3 00 	sts	0x00E3, r24
     586:	87 e3       	ldi	r24, 0x37	; 55
     588:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
}
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	08 95       	ret

00000590 <Send_Sync>:
	}
}

}

void Send_Sync(void){
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	64 97       	sbiw	r28, 0x14	; 20
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61

	
	U8 tx_buffer[8]={0};
     5a4:	fe 01       	movw	r30, r28
     5a6:	31 96       	adiw	r30, 0x01	; 1
     5a8:	88 e0       	ldi	r24, 0x08	; 8
     5aa:	df 01       	movw	r26, r30
     5ac:	1d 92       	st	X+, r1
     5ae:	8a 95       	dec	r24
     5b0:	e9 f7       	brne	.-6      	; 0x5ac <Send_Sync+0x1c>
    st_cmd_t tx_msg;
	
	// --- Init variables
    tx_msg.pt_data = &tx_buffer[0];
     5b2:	f9 8b       	std	Y+17, r31	; 0x11
     5b4:	e8 8b       	std	Y+16, r30	; 0x10
    tx_msg.status = 0;
     5b6:	1a 8a       	std	Y+18, r1	; 0x12
	tx_msg.id.std = 0x80;
     5b8:	80 e8       	ldi	r24, 0x80	; 128
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	9c 87       	std	Y+12, r25	; 0x0c
     5be:	8b 87       	std	Y+11, r24	; 0x0b
	tx_msg.ctrl.ide = 0;
     5c0:	1c 8a       	std	Y+20, r1	; 0x14
	tx_msg.ctrl.rtr = 0;
     5c2:	1b 8a       	std	Y+19, r1	; 0x13
	tx_msg.dlc = 0;
     5c4:	1f 86       	std	Y+15, r1	; 0x0f
	tx_msg.cmd = CMD_TX_DATA;
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	8a 87       	std	Y+10, r24	; 0x0a
	// --- Tx Command
	while(can_cmd(&tx_msg) != CAN_CMD_ACCEPTED);
     5ca:	ce 01       	movw	r24, r28
     5cc:	09 96       	adiw	r24, 0x09	; 9
     5ce:	0e 94 7f 05 	call	0xafe	; 0xafe <can_cmd>
     5d2:	81 11       	cpse	r24, r1
     5d4:	fa cf       	rjmp	.-12     	; 0x5ca <Send_Sync+0x3a>

	// --- Wait for Tx remote completed
	while(can_get_status(&tx_msg) == CAN_STATUS_NOT_COMPLETED);
     5d6:	ce 01       	movw	r24, r28
     5d8:	09 96       	adiw	r24, 0x09	; 9
     5da:	0e 94 ae 0a 	call	0x155c	; 0x155c <can_get_status>
     5de:	81 30       	cpi	r24, 0x01	; 1
     5e0:	d1 f3       	breq	.-12     	; 0x5d6 <Send_Sync+0x46>
}
     5e2:	64 96       	adiw	r28, 0x14	; 20
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <Receive_Msg>:

	// --- Wait for Tx remote completed
	while(can_get_status(&tx_msg) == CAN_STATUS_NOT_COMPLETED);
}

void Receive_Msg(uint8_t *buf, uint16_t id, st_cmd_t *rx_msg){
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ea 01       	movw	r28, r20
     5fa:	e8 2f       	mov	r30, r24
     5fc:	f9 2f       	mov	r31, r25

	uint8_t i;
	
    
	for(i=0; i<8; i++) buf[i]=0;
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	11 92       	st	Z+, r1
     602:	2f 5f       	subi	r18, 0xFF	; 255
     604:	28 30       	cpi	r18, 0x08	; 8
     606:	e1 f7       	brne	.-8      	; 0x600 <Receive_Msg+0xc>
	
	// --- Init variables
    (*rx_msg).pt_data = buf;
     608:	8f 83       	std	Y+7, r24	; 0x07
     60a:	98 87       	std	Y+8, r25	; 0x08
    (*rx_msg).status = 0;
     60c:	19 86       	std	Y+9, r1	; 0x09
	(*rx_msg).id.std = id;
     60e:	7b 83       	std	Y+3, r23	; 0x03
     610:	6a 83       	std	Y+2, r22	; 0x02
	(*rx_msg).ctrl.ide = 0;
     612:	1b 86       	std	Y+11, r1	; 0x0b
	(*rx_msg).ctrl.rtr = 0;
     614:	1a 86       	std	Y+10, r1	; 0x0a
	(*rx_msg).dlc = 8;
     616:	88 e0       	ldi	r24, 0x08	; 8
     618:	8e 83       	std	Y+6, r24	; 0x06
	(*rx_msg).cmd = CMD_RX_DATA_MASKED;
     61a:	89 83       	std	Y+1, r24	; 0x01
	// --- Tx Command
	while(can_cmd(rx_msg) != CAN_CMD_ACCEPTED);
     61c:	ce 01       	movw	r24, r28
     61e:	0e 94 7f 05 	call	0xafe	; 0xafe <can_cmd>
     622:	81 11       	cpse	r24, r1
     624:	fb cf       	rjmp	.-10     	; 0x61c <Receive_Msg+0x28>

	// --- Wait for Tx remote completed
	//while(can_get_status(&rx_msg) == CAN_STATUS_NOT_COMPLETED);
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <main>:
void Receive_Msg(uint8_t *buf, uint16_t id, st_cmd_t *rx_msg);
void Send_Abort(void);


int main( void )
{
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	66 97       	sbiw	r28, 0x16	; 22
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
	uint16_t Sync_Timer=0;
	uint8_t Receive_Switch=0;
	st_cmd_t rx_msg;
uint8_t rx_buffer[8]={0};
     640:	fe 01       	movw	r30, r28
     642:	3d 96       	adiw	r30, 0x0d	; 13
     644:	88 e0       	ldi	r24, 0x08	; 8
     646:	df 01       	movw	r26, r30
     648:	1d 92       	st	X+, r1
     64a:	8a 95       	dec	r24
     64c:	e9 f7       	brne	.-6      	; 0x648 <main+0x1c>
int8_t T_low=0;
int8_t T_high=0;
uint16_t temp=0;

//wy³aczenie JTAG
MCUCR |= (1<<JTD);
     64e:	85 b7       	in	r24, 0x35	; 53
     650:	80 68       	ori	r24, 0x80	; 128
     652:	85 bf       	out	0x35, r24	; 53
MCUCR |= (1<<JTD);
     654:	85 b7       	in	r24, 0x35	; 53
     656:	80 68       	ori	r24, 0x80	; 128
     658:	85 bf       	out	0x35, r24	; 53


DDR(LED_PORT) |= (1<<LED_1);
     65a:	84 9a       	sbi	0x10, 4	; 16
DDR(LED_L_PORT) |= (1<<LED_L);
     65c:	98 9a       	sbi	0x13, 0	; 19

LED_L_ON;
     65e:	a0 98       	cbi	0x14, 0	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     660:	87 e9       	ldi	r24, 0x97	; 151
     662:	9a e3       	ldi	r25, 0x3A	; 58
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <main+0x38>
     668:	00 c0       	rjmp	.+0      	; 0x66a <main+0x3e>
     66a:	00 00       	nop

_delay_ms(5);


GLCD_Initialize();
     66c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GLCD_Initialize>
     670:	a7 e9       	ldi	r26, 0x97	; 151
     672:	ba e3       	ldi	r27, 0x3A	; 58
     674:	11 97       	sbiw	r26, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <main+0x48>
     678:	00 c0       	rjmp	.+0      	; 0x67a <main+0x4e>
     67a:	00 00       	nop
_delay_ms(5);
GLCD_ClearScreen();
     67c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <GLCD_ClearScreen>
GLCD_GoTo(0,0);
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
can_init(0);
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	0e 94 70 05 	call	0xae0	; 0xae0 <can_init>
Init_RTC();
     68e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <Init_RTC>
Init_ADC();
     692:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Init_ADC>

LED_1_ON;
     696:	8c 9a       	sbi	0x11, 4	; 17


sei();
     698:	78 94       	sei

GLCD_Rectangle(102,12,30,51);
     69a:	23 e3       	ldi	r18, 0x33	; 51
     69c:	4e e1       	ldi	r20, 0x1E	; 30
     69e:	6c e0       	ldi	r22, 0x0C	; 12
     6a0:	86 e6       	ldi	r24, 0x66	; 102
     6a2:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GLCD_Rectangle>
GLCD_Rectangle_Full(111,9,12,3);
     6a6:	23 e0       	ldi	r18, 0x03	; 3
     6a8:	4c e0       	ldi	r20, 0x0C	; 12
     6aa:	69 e0       	ldi	r22, 0x09	; 9
     6ac:	8f e6       	ldi	r24, 0x6F	; 111
     6ae:	0e 94 92 0b 	call	0x1724	; 0x1724 <GLCD_Rectangle_Full>
uint8_t SOC_prev=0;
uint8_t state=0;
uint16_t V_low=0;
uint16_t V_high=0;
int8_t T_low=0;
int8_t T_high=0;
     6b2:	1e 8a       	std	Y+22, r1	; 0x16
uint8_t SOC=0;
uint8_t SOC_prev=0;
uint8_t state=0;
uint16_t V_low=0;
uint16_t V_high=0;
int8_t T_low=0;
     6b4:	81 2c       	mov	r8, r1
uint16_t current=0;
uint8_t SOC=0;
uint8_t SOC_prev=0;
uint8_t state=0;
uint16_t V_low=0;
uint16_t V_high=0;
     6b6:	a1 2c       	mov	r10, r1
     6b8:	b1 2c       	mov	r11, r1
uint16_t voltage=0;
uint16_t current=0;
uint8_t SOC=0;
uint8_t SOC_prev=0;
uint8_t state=0;
uint16_t V_low=0;
     6ba:	c1 2c       	mov	r12, r1
     6bc:	d1 2c       	mov	r13, r1

uint16_t voltage=0;
uint16_t current=0;
uint8_t SOC=0;
uint8_t SOC_prev=0;
uint8_t state=0;
     6be:	1d 8a       	std	Y+21, r1	; 0x15
uint8_t rx_buffer[8]={0};

uint16_t voltage=0;
uint16_t current=0;
uint8_t SOC=0;
uint8_t SOC_prev=0;
     6c0:	61 2c       	mov	r6, r1
	st_cmd_t rx_msg;
uint8_t rx_buffer[8]={0};

uint16_t voltage=0;
uint16_t current=0;
uint8_t SOC=0;
     6c2:	71 2c       	mov	r7, r1
	uint8_t Receive_Switch=0;
	st_cmd_t rx_msg;
uint8_t rx_buffer[8]={0};

uint16_t voltage=0;
uint16_t current=0;
     6c4:	e1 2c       	mov	r14, r1
     6c6:	f1 2c       	mov	r15, r1


int main( void )
{
	uint16_t Sync_Timer=0;
	uint8_t Receive_Switch=0;
     6c8:	51 2c       	mov	r5, r1
void Send_Abort(void);


int main( void )
{
	uint16_t Sync_Timer=0;
     6ca:	00 e0       	ldi	r16, 0x00	; 0
     6cc:	10 e0       	ldi	r17, 0x00	; 0
			}
			if(can_get_status(&rx_msg) != CAN_STATUS_COMPLETED){
				rx_msg.cmd = CMD_ABORT;
				while (can_cmd(&rx_msg) != CAN_CMD_ACCEPTED);
			}
			Receive_Switch = 0;
     6ce:	91 2c       	mov	r9, r1
			}
			if(can_get_status(&rx_msg) != CAN_STATUS_COMPLETED){
				rx_msg.cmd = CMD_ABORT;
				while (can_cmd(&rx_msg) != CAN_CMD_ACCEPTED);
			}
			Receive_Switch++;
     6d0:	68 94       	set
     6d2:	22 24       	eor	r2, r2
     6d4:	21 f8       	bld	r2, 1
			}
			if(can_get_status(&rx_msg) != CAN_STATUS_COMPLETED){
				rx_msg.cmd = CMD_ABORT;
				while (can_cmd(&rx_msg) != CAN_CMD_ACCEPTED);
			}
			Receive_Switch++;
     6d6:	44 24       	eor	r4, r4
     6d8:	43 94       	inc	r4
		
		if(SOC!=SOC_prev){
			if(SOC>SOC_prev){
				if(SOC>100) SOC=100;
				temp = SOC/2;
				GLCD_Rectangle_Full(103,62-temp,28,temp);
     6da:	0f 2e       	mov	r0, r31
     6dc:	fe e3       	ldi	r31, 0x3E	; 62
     6de:	3f 2e       	mov	r3, r31
     6e0:	f0 2d       	mov	r31, r0
GLCD_Rectangle(102,12,30,51);
GLCD_Rectangle_Full(111,9,12,3);

while(1){
	
	if(Time_elapsed(Sync_Timer)>77){
     6e2:	c8 01       	movw	r24, r16
     6e4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Time_elapsed>
     6e8:	8e 34       	cpi	r24, 0x4E	; 78
     6ea:	d8 f3       	brcs	.-10     	; 0x6e2 <main+0xb6>
		Sync_Timer=Get_timer();
     6ec:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Get_timer>
     6f0:	8c 01       	movw	r16, r24
		Send_Sync();
     6f2:	0e 94 c8 02 	call	0x590	; 0x590 <Send_Sync>
		//0x186
		if(Receive_Switch == 0){
     6f6:	51 10       	cpse	r5, r1
     6f8:	30 c0       	rjmp	.+96     	; 0x75a <main+0x12e>
			Receive_Msg(rx_buffer, 0x186, &rx_msg);
     6fa:	ae 01       	movw	r20, r28
     6fc:	4f 5f       	subi	r20, 0xFF	; 255
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	66 e8       	ldi	r22, 0x86	; 134
     702:	71 e0       	ldi	r23, 0x01	; 1
     704:	ce 01       	movw	r24, r28
     706:	0d 96       	adiw	r24, 0x0d	; 13
     708:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Receive_Msg>
			while(Time_elapsed(Sync_Timer)<60){
     70c:	11 c0       	rjmp	.+34     	; 0x730 <main+0x104>
				if(can_get_status(&rx_msg) == CAN_STATUS_COMPLETED){
     70e:	ce 01       	movw	r24, r28
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	0e 94 ae 0a 	call	0x155c	; 0x155c <can_get_status>
     716:	81 11       	cpse	r24, r1
     718:	0b c0       	rjmp	.+22     	; 0x730 <main+0x104>
					current = rx_buffer[0] + (rx_buffer[1]<<8);
     71a:	8d 85       	ldd	r24, Y+13	; 0x0d
     71c:	ee 84       	ldd	r14, Y+14	; 0x0e
     71e:	f1 2c       	mov	r15, r1
     720:	fe 2c       	mov	r15, r14
     722:	ee 24       	eor	r14, r14
     724:	e8 0e       	add	r14, r24
     726:	f1 1c       	adc	r15, r1
					voltage = rx_buffer[2] + (rx_buffer[3]<<8);
					SOC = rx_buffer[4];
     728:	79 88       	ldd	r7, Y+17	; 0x11
					state = rx_buffer[7];
     72a:	bc 89       	ldd	r27, Y+20	; 0x14
     72c:	bd 8b       	std	Y+21, r27	; 0x15
					break;
     72e:	05 c0       	rjmp	.+10     	; 0x73a <main+0x10e>
		Sync_Timer=Get_timer();
		Send_Sync();
		//0x186
		if(Receive_Switch == 0){
			Receive_Msg(rx_buffer, 0x186, &rx_msg);
			while(Time_elapsed(Sync_Timer)<60){
     730:	c8 01       	movw	r24, r16
     732:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Time_elapsed>
     736:	8c 33       	cpi	r24, 0x3C	; 60
     738:	50 f3       	brcs	.-44     	; 0x70e <main+0xe2>
					SOC = rx_buffer[4];
					state = rx_buffer[7];
					break;
				}
			}
			if(can_get_status(&rx_msg) != CAN_STATUS_COMPLETED){
     73a:	ce 01       	movw	r24, r28
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	0e 94 ae 0a 	call	0x155c	; 0x155c <can_get_status>
     742:	88 23       	and	r24, r24
     744:	41 f0       	breq	.+16     	; 0x756 <main+0x12a>
				rx_msg.cmd = CMD_ABORT;
     746:	2c e0       	ldi	r18, 0x0C	; 12
     748:	2a 83       	std	Y+2, r18	; 0x02
				while (can_cmd(&rx_msg) != CAN_CMD_ACCEPTED);
     74a:	ce 01       	movw	r24, r28
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	0e 94 7f 05 	call	0xafe	; 0xafe <can_cmd>
     752:	81 11       	cpse	r24, r1
     754:	fa cf       	rjmp	.-12     	; 0x74a <main+0x11e>
			}
			Receive_Switch++;
     756:	54 2c       	mov	r5, r4
     758:	65 c0       	rjmp	.+202    	; 0x824 <main+0x1f8>
		}
		//0x206
		else if (Receive_Switch == 1){
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	58 12       	cpse	r5, r24
     75e:	34 c0       	rjmp	.+104    	; 0x7c8 <main+0x19c>
			Receive_Msg(rx_buffer, 0x206, &rx_msg);
     760:	ae 01       	movw	r20, r28
     762:	4f 5f       	subi	r20, 0xFF	; 255
     764:	5f 4f       	sbci	r21, 0xFF	; 255
     766:	66 e0       	ldi	r22, 0x06	; 6
     768:	72 e0       	ldi	r23, 0x02	; 2
     76a:	ce 01       	movw	r24, r28
     76c:	0d 96       	adiw	r24, 0x0d	; 13
     76e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Receive_Msg>
			while(Time_elapsed(Sync_Timer)<60){
     772:	15 c0       	rjmp	.+42     	; 0x79e <main+0x172>
				if(can_get_status(&rx_msg) == CAN_STATUS_COMPLETED){
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	0e 94 ae 0a 	call	0x155c	; 0x155c <can_get_status>
     77c:	81 11       	cpse	r24, r1
     77e:	0f c0       	rjmp	.+30     	; 0x79e <main+0x172>
					V_low = rx_buffer[0] + (rx_buffer[1]<<8);
     780:	8d 85       	ldd	r24, Y+13	; 0x0d
     782:	ce 84       	ldd	r12, Y+14	; 0x0e
     784:	d1 2c       	mov	r13, r1
     786:	dc 2c       	mov	r13, r12
     788:	cc 24       	eor	r12, r12
     78a:	c8 0e       	add	r12, r24
     78c:	d1 1c       	adc	r13, r1
					V_high = rx_buffer[3] + (rx_buffer[4]<<8);
     78e:	88 89       	ldd	r24, Y+16	; 0x10
     790:	a9 88       	ldd	r10, Y+17	; 0x11
     792:	b1 2c       	mov	r11, r1
     794:	ba 2c       	mov	r11, r10
     796:	aa 24       	eor	r10, r10
     798:	a8 0e       	add	r10, r24
     79a:	b1 1c       	adc	r11, r1
					break;
     79c:	05 c0       	rjmp	.+10     	; 0x7a8 <main+0x17c>
			Receive_Switch++;
		}
		//0x206
		else if (Receive_Switch == 1){
			Receive_Msg(rx_buffer, 0x206, &rx_msg);
			while(Time_elapsed(Sync_Timer)<60){
     79e:	c8 01       	movw	r24, r16
     7a0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Time_elapsed>
     7a4:	8c 33       	cpi	r24, 0x3C	; 60
     7a6:	30 f3       	brcs	.-52     	; 0x774 <main+0x148>
					V_low = rx_buffer[0] + (rx_buffer[1]<<8);
					V_high = rx_buffer[3] + (rx_buffer[4]<<8);
					break;
				}
			}
			if(can_get_status(&rx_msg) != CAN_STATUS_COMPLETED){
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	0e 94 ae 0a 	call	0x155c	; 0x155c <can_get_status>
     7b0:	88 23       	and	r24, r24
     7b2:	41 f0       	breq	.+16     	; 0x7c4 <main+0x198>
				rx_msg.cmd = CMD_ABORT;
     7b4:	9c e0       	ldi	r25, 0x0C	; 12
     7b6:	9a 83       	std	Y+2, r25	; 0x02
				while (can_cmd(&rx_msg) != CAN_CMD_ACCEPTED);
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	0e 94 7f 05 	call	0xafe	; 0xafe <can_cmd>
     7c0:	81 11       	cpse	r24, r1
     7c2:	fa cf       	rjmp	.-12     	; 0x7b8 <main+0x18c>
			}
			Receive_Switch++;
     7c4:	52 2c       	mov	r5, r2
     7c6:	2e c0       	rjmp	.+92     	; 0x824 <main+0x1f8>
		}
		else if (Receive_Switch == 2){
     7c8:	a2 e0       	ldi	r26, 0x02	; 2
     7ca:	5a 12       	cpse	r5, r26
     7cc:	2b c0       	rjmp	.+86     	; 0x824 <main+0x1f8>
			Receive_Msg(rx_buffer, 0x286, &rx_msg);
     7ce:	ae 01       	movw	r20, r28
     7d0:	4f 5f       	subi	r20, 0xFF	; 255
     7d2:	5f 4f       	sbci	r21, 0xFF	; 255
     7d4:	66 e8       	ldi	r22, 0x86	; 134
     7d6:	72 e0       	ldi	r23, 0x02	; 2
     7d8:	ce 01       	movw	r24, r28
     7da:	0d 96       	adiw	r24, 0x0d	; 13
     7dc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Receive_Msg>
			while(Time_elapsed(Sync_Timer)<60){
     7e0:	0a c0       	rjmp	.+20     	; 0x7f6 <main+0x1ca>
				if(can_get_status(&rx_msg) == CAN_STATUS_COMPLETED){
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	0e 94 ae 0a 	call	0x155c	; 0x155c <can_get_status>
     7ea:	81 11       	cpse	r24, r1
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <main+0x1ca>
					T_low = rx_buffer[0];
     7ee:	8d 84       	ldd	r8, Y+13	; 0x0d
					T_high = rx_buffer[2];
     7f0:	bf 85       	ldd	r27, Y+15	; 0x0f
     7f2:	be 8b       	std	Y+22, r27	; 0x16
					break;
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <main+0x1d4>
			}
			Receive_Switch++;
		}
		else if (Receive_Switch == 2){
			Receive_Msg(rx_buffer, 0x286, &rx_msg);
			while(Time_elapsed(Sync_Timer)<60){
     7f6:	c8 01       	movw	r24, r16
     7f8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Time_elapsed>
     7fc:	8c 33       	cpi	r24, 0x3C	; 60
     7fe:	88 f3       	brcs	.-30     	; 0x7e2 <main+0x1b6>
					T_low = rx_buffer[0];
					T_high = rx_buffer[2];
					break;
				}
			}
			if(can_get_status(&rx_msg) != CAN_STATUS_COMPLETED){
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	0e 94 ae 0a 	call	0x155c	; 0x155c <can_get_status>
     808:	88 23       	and	r24, r24
     80a:	49 f0       	breq	.+18     	; 0x81e <main+0x1f2>
				rx_msg.cmd = CMD_ABORT;
     80c:	2c e0       	ldi	r18, 0x0C	; 12
     80e:	2a 83       	std	Y+2, r18	; 0x02
				while (can_cmd(&rx_msg) != CAN_CMD_ACCEPTED);
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	0e 94 7f 05 	call	0xafe	; 0xafe <can_cmd>
     818:	81 11       	cpse	r24, r1
     81a:	fa cf       	rjmp	.-12     	; 0x810 <main+0x1e4>
     81c:	02 c0       	rjmp	.+4      	; 0x822 <main+0x1f6>
			}
			Receive_Switch = 0;
     81e:	59 2c       	mov	r5, r9
     820:	01 c0       	rjmp	.+2      	; 0x824 <main+0x1f8>
     822:	59 2c       	mov	r5, r9
		}
		
		ADC_task();
     824:	0e 94 27 02 	call	0x44e	; 0x44e <ADC_task>
		
		GLCD_GoTo(0,0);
     828:	69 2d       	mov	r22, r9
     82a:	89 2d       	mov	r24, r9
     82c:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
		GLCD_WriteString_progmem(PSTR("State: "));
     830:	89 eb       	ldi	r24, 0xB9	; 185
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		GLCD_WriteString_progmem(PSTR("              "));
     838:	8a ea       	ldi	r24, 0xAA	; 170
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		GLCD_GoTo(36,0);
     840:	69 2d       	mov	r22, r9
     842:	84 e2       	ldi	r24, 0x24	; 36
     844:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
		switch(state){
     848:	8d 89       	ldd	r24, Y+21	; 0x15
     84a:	8f 30       	cpi	r24, 0x0F	; 15
     84c:	09 f4       	brne	.+2      	; 0x850 <main+0x224>
     84e:	55 c0       	rjmp	.+170    	; 0x8fa <main+0x2ce>
     850:	88 f4       	brcc	.+34     	; 0x874 <main+0x248>
     852:	84 30       	cpi	r24, 0x04	; 4
     854:	f1 f1       	breq	.+124    	; 0x8d2 <main+0x2a6>
     856:	30 f4       	brcc	.+12     	; 0x864 <main+0x238>
     858:	82 30       	cpi	r24, 0x02	; 2
     85a:	89 f1       	breq	.+98     	; 0x8be <main+0x292>
     85c:	a8 f5       	brcc	.+106    	; 0x8c8 <main+0x29c>
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	49 f1       	breq	.+82     	; 0x8b4 <main+0x288>
     862:	78 c0       	rjmp	.+240    	; 0x954 <main+0x328>
     864:	9d 89       	ldd	r25, Y+21	; 0x15
     866:	96 30       	cpi	r25, 0x06	; 6
     868:	f1 f1       	breq	.+124    	; 0x8e6 <main+0x2ba>
     86a:	c0 f1       	brcs	.+112    	; 0x8dc <main+0x2b0>
     86c:	97 30       	cpi	r25, 0x07	; 7
     86e:	09 f4       	brne	.+2      	; 0x872 <main+0x246>
     870:	3f c0       	rjmp	.+126    	; 0x8f0 <main+0x2c4>
     872:	70 c0       	rjmp	.+224    	; 0x954 <main+0x328>
     874:	ad 89       	ldd	r26, Y+21	; 0x15
     876:	a0 34       	cpi	r26, 0x40	; 64
     878:	09 f4       	brne	.+2      	; 0x87c <main+0x250>
     87a:	53 c0       	rjmp	.+166    	; 0x922 <main+0x2f6>
     87c:	50 f4       	brcc	.+20     	; 0x892 <main+0x266>
     87e:	a0 32       	cpi	r26, 0x20	; 32
     880:	09 f4       	brne	.+2      	; 0x884 <main+0x258>
     882:	45 c0       	rjmp	.+138    	; 0x90e <main+0x2e2>
     884:	a0 33       	cpi	r26, 0x30	; 48
     886:	09 f4       	brne	.+2      	; 0x88a <main+0x25e>
     888:	47 c0       	rjmp	.+142    	; 0x918 <main+0x2ec>
     88a:	a0 31       	cpi	r26, 0x10	; 16
     88c:	09 f0       	breq	.+2      	; 0x890 <main+0x264>
     88e:	62 c0       	rjmp	.+196    	; 0x954 <main+0x328>
     890:	39 c0       	rjmp	.+114    	; 0x904 <main+0x2d8>
     892:	bd 89       	ldd	r27, Y+21	; 0x15
     894:	b0 36       	cpi	r27, 0x60	; 96
     896:	09 f4       	brne	.+2      	; 0x89a <main+0x26e>
     898:	4e c0       	rjmp	.+156    	; 0x936 <main+0x30a>
     89a:	20 f4       	brcc	.+8      	; 0x8a4 <main+0x278>
     89c:	b0 35       	cpi	r27, 0x50	; 80
     89e:	09 f4       	brne	.+2      	; 0x8a2 <main+0x276>
     8a0:	45 c0       	rjmp	.+138    	; 0x92c <main+0x300>
     8a2:	58 c0       	rjmp	.+176    	; 0x954 <main+0x328>
     8a4:	2d 89       	ldd	r18, Y+21	; 0x15
     8a6:	20 3e       	cpi	r18, 0xE0	; 224
     8a8:	09 f4       	brne	.+2      	; 0x8ac <main+0x280>
     8aa:	4a c0       	rjmp	.+148    	; 0x940 <main+0x314>
     8ac:	20 3f       	cpi	r18, 0xF0	; 240
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <main+0x286>
     8b0:	4c c0       	rjmp	.+152    	; 0x94a <main+0x31e>
     8b2:	50 c0       	rjmp	.+160    	; 0x954 <main+0x328>
			case 1 :
			GLCD_WriteString_progmem(PSTR("Init"));
     8b4:	85 ea       	ldi	r24, 0xA5	; 165
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     8bc:	4f c0       	rjmp	.+158    	; 0x95c <main+0x330>
			case 2 :
			GLCD_WriteString_progmem(PSTR("Discharging"));
     8be:	89 e9       	ldi	r24, 0x99	; 153
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     8c6:	4a c0       	rjmp	.+148    	; 0x95c <main+0x330>
			case 3 :
			GLCD_WriteString_progmem(PSTR("Battery Low"));
     8c8:	8d e8       	ldi	r24, 0x8D	; 141
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     8d0:	45 c0       	rjmp	.+138    	; 0x95c <main+0x330>
			case 4 :
			GLCD_WriteString_progmem(PSTR("Battery Empty"));
     8d2:	8f e7       	ldi	r24, 0x7F	; 127
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     8da:	40 c0       	rjmp	.+128    	; 0x95c <main+0x330>
			case 5 :
			GLCD_WriteString_progmem(PSTR("Charging"));
     8dc:	86 e7       	ldi	r24, 0x76	; 118
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     8e4:	3b c0       	rjmp	.+118    	; 0x95c <main+0x330>
			case 6 :
			GLCD_WriteString_progmem(PSTR("Battery High"));
     8e6:	89 e6       	ldi	r24, 0x69	; 105
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     8ee:	36 c0       	rjmp	.+108    	; 0x95c <main+0x330>
			case 7 :
			GLCD_WriteString_progmem(PSTR("Battery Full"));
     8f0:	8c e5       	ldi	r24, 0x5C	; 92
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     8f8:	31 c0       	rjmp	.+98     	; 0x95c <main+0x330>
			case 15 :
			GLCD_WriteString_progmem(PSTR("Ready"));
     8fa:	86 e5       	ldi	r24, 0x56	; 86
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     902:	2c c0       	rjmp	.+88     	; 0x95c <main+0x330>
			case 16 :
			GLCD_WriteString_progmem(PSTR("Error"));
     904:	80 e5       	ldi	r24, 0x50	; 80
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     90c:	27 c0       	rjmp	.+78     	; 0x95c <main+0x330>
			case 32 :
			GLCD_WriteString_progmem(PSTR("Second Prot."));
     90e:	83 e4       	ldi	r24, 0x43	; 67
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     916:	22 c0       	rjmp	.+68     	; 0x95c <main+0x330>
			case 48 :
			GLCD_WriteString_progmem(PSTR("Over Current"));
     918:	86 e3       	ldi	r24, 0x36	; 54
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     920:	1d c0       	rjmp	.+58     	; 0x95c <main+0x330>
			case 64 :
			GLCD_WriteString_progmem(PSTR("Over Temp."));
     922:	8b e2       	ldi	r24, 0x2B	; 43
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     92a:	18 c0       	rjmp	.+48     	; 0x95c <main+0x330>
			case 80 :
			GLCD_WriteString_progmem(PSTR("LEM Alarm"));
     92c:	81 e2       	ldi	r24, 0x21	; 33
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     934:	13 c0       	rjmp	.+38     	; 0x95c <main+0x330>
			case 96 :
			GLCD_WriteString_progmem(PSTR("Invalid Input"));
     936:	83 e1       	ldi	r24, 0x13	; 19
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     93e:	0e c0       	rjmp	.+28     	; 0x95c <main+0x330>
			case 224 :
			GLCD_WriteString_progmem(PSTR("Power Save"));
     940:	88 e0       	ldi	r24, 0x08	; 8
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     948:	09 c0       	rjmp	.+18     	; 0x95c <main+0x330>
			case 240 :
			GLCD_WriteString_progmem(PSTR("Parametrization"));
     94a:	88 ef       	ldi	r24, 0xF8	; 248
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
     952:	04 c0       	rjmp	.+8      	; 0x95c <main+0x330>
			
			default :
			GLCD_WriteString_progmem(PSTR("Invalid"));
     954:	80 ef       	ldi	r24, 0xF0	; 240
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
			break;
		}
		
		GLCD_GoTo(0,1);
     95c:	64 2d       	mov	r22, r4
     95e:	89 2d       	mov	r24, r9
     960:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
		GLCD_WriteString_progmem(PSTR("Voltage:"));
     964:	87 ee       	ldi	r24, 0xE7	; 231
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		//GLCD_clear(5);
		voltage=ADC_get(0);
     96c:	89 2d       	mov	r24, r9
     96e:	0e 94 04 02 	call	0x408	; 0x408 <ADC_get>
		GLCD_voltage((((uint32_t)voltage)*100)/16);
     972:	9c 01       	movw	r18, r24
     974:	a4 e6       	ldi	r26, 0x64	; 100
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__umulhisi3>
     97c:	dc 01       	movw	r26, r24
     97e:	cb 01       	movw	r24, r22
     980:	68 94       	set
     982:	13 f8       	bld	r1, 3
     984:	b6 95       	lsr	r27
     986:	a7 95       	ror	r26
     988:	97 95       	ror	r25
     98a:	87 95       	ror	r24
     98c:	16 94       	lsr	r1
     98e:	d1 f7       	brne	.-12     	; 0x984 <main+0x358>
     990:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <GLCD_voltage>
		GLCD_WriteString_progmem(PSTR("V"));
     994:	85 ee       	ldi	r24, 0xE5	; 229
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		
		GLCD_GoTo(0,2);
     99c:	62 2d       	mov	r22, r2
     99e:	89 2d       	mov	r24, r9
     9a0:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
		GLCD_WriteString_progmem(PSTR("Current:"));
     9a4:	8c ed       	ldi	r24, 0xDC	; 220
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		//GLCD_clear(5);
		GLCD_voltage((((uint32_t)current)*100)/16);
     9ac:	97 01       	movw	r18, r14
     9ae:	a4 e6       	ldi	r26, 0x64	; 100
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__umulhisi3>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	68 94       	set
     9bc:	13 f8       	bld	r1, 3
     9be:	b6 95       	lsr	r27
     9c0:	a7 95       	ror	r26
     9c2:	97 95       	ror	r25
     9c4:	87 95       	ror	r24
     9c6:	16 94       	lsr	r1
     9c8:	d1 f7       	brne	.-12     	; 0x9be <main+0x392>
     9ca:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <GLCD_voltage>
		GLCD_WriteString_progmem(PSTR("A"));
     9ce:	8a ed       	ldi	r24, 0xDA	; 218
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		
		GLCD_GoTo(0,3);
     9d6:	63 e0       	ldi	r22, 0x03	; 3
     9d8:	89 2d       	mov	r24, r9
     9da:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
		GLCD_WriteString_progmem(PSTR("SOC: "));
     9de:	84 ed       	ldi	r24, 0xD4	; 212
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		GLCD_clear(4);
     9e6:	84 e0       	ldi	r24, 0x04	; 4
     9e8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <GLCD_clear>
		GLCD_dec(SOC);
     9ec:	87 2d       	mov	r24, r7
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <GLCD_dec>
		GLCD_WriteString_progmem(PSTR("%"));
     9f4:	82 ed       	ldi	r24, 0xD2	; 210
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		
		GLCD_GoTo(0,4);
     9fc:	64 e0       	ldi	r22, 0x04	; 4
     9fe:	89 2d       	mov	r24, r9
     a00:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
		GLCD_WriteString_progmem(PSTR("Vmin:"));
     a04:	8c ec       	ldi	r24, 0xCC	; 204
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		//GLCD_clear(6);
		GLCD_dec(V_low);
     a0c:	c6 01       	movw	r24, r12
     a0e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <GLCD_dec>
		GLCD_WriteString_progmem(PSTR("mV"));
     a12:	89 ec       	ldi	r24, 0xC9	; 201
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		
		GLCD_GoTo(0,5);
     a1a:	65 e0       	ldi	r22, 0x05	; 5
     a1c:	89 2d       	mov	r24, r9
     a1e:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
		GLCD_WriteString_progmem(PSTR("Vmax:"));
     a22:	83 ec       	ldi	r24, 0xC3	; 195
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		//GLCD_clear(6);
		GLCD_dec(V_high);
     a2a:	c5 01       	movw	r24, r10
     a2c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <GLCD_dec>
		GLCD_WriteString_progmem(PSTR("mV"));
     a30:	80 ec       	ldi	r24, 0xC0	; 192
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		
		GLCD_GoTo(0,6);
     a38:	66 e0       	ldi	r22, 0x06	; 6
     a3a:	89 2d       	mov	r24, r9
     a3c:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
		GLCD_WriteString_progmem(PSTR("Tmin: "));
     a40:	89 eb       	ldi	r24, 0xB9	; 185
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		GLCD_clear(6);
     a48:	86 e0       	ldi	r24, 0x06	; 6
     a4a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <GLCD_clear>
		GLCD_dec(T_low);
     a4e:	88 2d       	mov	r24, r8
     a50:	99 27       	eor	r25, r25
     a52:	87 fd       	sbrc	r24, 7
     a54:	90 95       	com	r25
     a56:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <GLCD_dec>
		GLCD_WriteString_progmem(PSTR("stC"));
     a5a:	85 eb       	ldi	r24, 0xB5	; 181
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		
		GLCD_GoTo(0,7);
     a62:	67 e0       	ldi	r22, 0x07	; 7
     a64:	89 2d       	mov	r24, r9
     a66:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
		GLCD_WriteString_progmem(PSTR("Tmax: "));
     a6a:	8e ea       	ldi	r24, 0xAE	; 174
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		GLCD_clear(6);
     a72:	86 e0       	ldi	r24, 0x06	; 6
     a74:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <GLCD_clear>
		GLCD_dec(T_high);
     a78:	ae 89       	ldd	r26, Y+22	; 0x16
     a7a:	8a 2f       	mov	r24, r26
     a7c:	99 27       	eor	r25, r25
     a7e:	87 fd       	sbrc	r24, 7
     a80:	90 95       	com	r25
     a82:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <GLCD_dec>
		GLCD_WriteString_progmem(PSTR("stC"));
     a86:	8a ea       	ldi	r24, 0xAA	; 170
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GLCD_WriteString_progmem>
		
		if(SOC!=SOC_prev){
     a8e:	76 14       	cp	r7, r6
     a90:	09 f4       	brne	.+2      	; 0xa94 <main+0x468>
     a92:	27 ce       	rjmp	.-946    	; 0x6e2 <main+0xb6>
			if(SOC>SOC_prev){
     a94:	67 14       	cp	r6, r7
     a96:	90 f4       	brcc	.+36     	; 0xabc <main+0x490>
     a98:	67 2c       	mov	r6, r7
     a9a:	b4 e6       	ldi	r27, 0x64	; 100
     a9c:	b7 15       	cp	r27, r7
     a9e:	20 f4       	brcc	.+8      	; 0xaa8 <main+0x47c>
     aa0:	0f 2e       	mov	r0, r31
     aa2:	f4 e6       	ldi	r31, 0x64	; 100
     aa4:	6f 2e       	mov	r6, r31
     aa6:	f0 2d       	mov	r31, r0
				if(SOC>100) SOC=100;
				temp = SOC/2;
     aa8:	26 2d       	mov	r18, r6
     aaa:	26 95       	lsr	r18
				GLCD_Rectangle_Full(103,62-temp,28,temp);
     aac:	63 2d       	mov	r22, r3
     aae:	62 1b       	sub	r22, r18
     ab0:	4c e1       	ldi	r20, 0x1C	; 28
     ab2:	87 e6       	ldi	r24, 0x67	; 103
     ab4:	0e 94 92 0b 	call	0x1724	; 0x1724 <GLCD_Rectangle_Full>
     ab8:	76 2c       	mov	r7, r6
     aba:	13 ce       	rjmp	.-986    	; 0x6e2 <main+0xb6>
			}
			else {
				temp = 50-SOC/2;
     abc:	87 2d       	mov	r24, r7
     abe:	86 95       	lsr	r24
     ac0:	22 e3       	ldi	r18, 0x32	; 50
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	28 1b       	sub	r18, r24
     ac6:	31 09       	sbc	r19, r1
     ac8:	22 33       	cpi	r18, 0x32	; 50
     aca:	31 05       	cpc	r19, r1
     acc:	10 f0       	brcs	.+4      	; 0xad2 <main+0x4a6>
     ace:	21 e3       	ldi	r18, 0x31	; 49
     ad0:	30 e0       	ldi	r19, 0x00	; 0
				if(temp>49) temp=49;
				GLCD_Rectangle_Clear(103,13,28,temp);
     ad2:	4c e1       	ldi	r20, 0x1C	; 28
     ad4:	6d e0       	ldi	r22, 0x0D	; 13
     ad6:	87 e6       	ldi	r24, 0x67	; 103
     ad8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <GLCD_Rectangle_Clear>
     adc:	67 2c       	mov	r6, r7
     ade:	01 ce       	rjmp	.-1022   	; 0x6e2 <main+0xb6>

00000ae0 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     ae0:	0e 94 ba 02 	call	0x574	; 0x574 <can_fixed_baudrate>
     ae4:	88 23       	and	r24, r24
     ae6:	49 f0       	breq	.+18     	; 0xafa <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     ae8:	0e 94 55 02 	call	0x4aa	; 0x4aa <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     aec:	e8 ed       	ldi	r30, 0xD8	; 216
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	82 60       	ori	r24, 0x02	; 2
     af4:	80 83       	st	Z, r24
    return (1);
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     afa:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     afc:	08 95       	ret

00000afe <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	00 d0       	rcall	.+0      	; 0xb08 <can_cmd+0xa>
     b08:	00 d0       	rcall	.+0      	; 0xb0a <can_cmd+0xc>
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	8c 01       	movw	r16, r24
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     b10:	dc 01       	movw	r26, r24
     b12:	11 96       	adiw	r26, 0x01	; 1
     b14:	8c 91       	ld	r24, X
     b16:	11 97       	sbiw	r26, 0x01	; 1
     b18:	8c 30       	cpi	r24, 0x0C	; 12
     b1a:	b1 f4       	brne	.+44     	; 0xb48 <can_cmd+0x4a>
  {
    if (cmd->status == MOB_PENDING)
     b1c:	19 96       	adiw	r26, 0x09	; 9
     b1e:	8c 91       	ld	r24, X
     b20:	19 97       	sbiw	r26, 0x09	; 9
     b22:	80 36       	cpi	r24, 0x60	; 96
     b24:	69 f4       	brne	.+26     	; 0xb40 <can_cmd+0x42>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     b26:	8c 91       	ld	r24, X
     b28:	82 95       	swap	r24
     b2a:	80 7f       	andi	r24, 0xF0	; 240
     b2c:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     b30:	ef ee       	ldi	r30, 0xEF	; 239
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	8f 73       	andi	r24, 0x3F	; 63
     b38:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure !
     b3a:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
     b3e:	1c 92       	st	X, r1
    }
    cmd->status = STATUS_CLEARED; 
     b40:	f8 01       	movw	r30, r16
     b42:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	01 c5       	rjmp	.+2562   	; 0x154a <__stack+0x44b>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
     b48:	0e 94 68 02 	call	0x4d0	; 0x4d0 <can_get_mob_free>
    if (mob_handle!= NO_MOB)
     b4c:	8f 3f       	cpi	r24, 0xFF	; 255
     b4e:	09 f4       	brne	.+2      	; 0xb52 <can_cmd+0x54>
     b50:	f7 c4       	rjmp	.+2542   	; 0x1540 <__stack+0x441>
    {
      cmd->status = MOB_PENDING; 
     b52:	90 e6       	ldi	r25, 0x60	; 96
     b54:	d8 01       	movw	r26, r16
     b56:	19 96       	adiw	r26, 0x09	; 9
     b58:	9c 93       	st	X, r25
     b5a:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
     b5c:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
     b5e:	82 95       	swap	r24
     b60:	80 7f       	andi	r24, 0xF0	; 240
     b62:	80 93 ed 00 	sts	0x00ED, r24
      Can_clear_mob();
     b66:	ee ee       	ldi	r30, 0xEE	; 238
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	11 92       	st	Z+, r1
     b6c:	e8 3f       	cpi	r30, 0xF8	; 248
     b6e:	f1 05       	cpc	r31, r1
     b70:	e1 f7       	brne	.-8      	; 0xb6a <can_cmd+0x6c>
          
      switch (cmd->cmd)
     b72:	f8 01       	movw	r30, r16
     b74:	41 81       	ldd	r20, Z+1	; 0x01
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	fa 01       	movw	r30, r20
     b7a:	31 97       	sbiw	r30, 0x01	; 1
     b7c:	eb 30       	cpi	r30, 0x0B	; 11
     b7e:	f1 05       	cpc	r31, r1
     b80:	08 f0       	brcs	.+2      	; 0xb84 <can_cmd+0x86>
     b82:	da c4       	rjmp	.+2484   	; 0x1538 <__stack+0x439>
     b84:	e6 5b       	subi	r30, 0xB6	; 182
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     b8c:	d8 01       	movw	r26, r16
     b8e:	16 96       	adiw	r26, 0x06	; 6
     b90:	8c 91       	ld	r24, X
     b92:	81 11       	cpse	r24, r1
     b94:	cb c3       	rjmp	.+1942   	; 0x132c <__stack+0x22d>
     b96:	dc c3       	rjmp	.+1976   	; 0x1350 <__stack+0x251>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b98:	f8 01       	movw	r30, r16
     b9a:	83 85       	ldd	r24, Z+11	; 0x0b
     b9c:	88 23       	and	r24, r24
     b9e:	69 f1       	breq	.+90     	; 0xbfa <can_cmd+0xfc>
     ba0:	94 81       	ldd	r25, Z+4	; 0x04
     ba2:	92 95       	swap	r25
     ba4:	96 95       	lsr	r25
     ba6:	97 70       	andi	r25, 0x07	; 7
     ba8:	85 81       	ldd	r24, Z+5	; 0x05
     baa:	88 0f       	add	r24, r24
     bac:	88 0f       	add	r24, r24
     bae:	88 0f       	add	r24, r24
     bb0:	89 0f       	add	r24, r25
     bb2:	80 93 f3 00 	sts	0x00F3, r24
     bb6:	93 81       	ldd	r25, Z+3	; 0x03
     bb8:	92 95       	swap	r25
     bba:	96 95       	lsr	r25
     bbc:	97 70       	andi	r25, 0x07	; 7
     bbe:	84 81       	ldd	r24, Z+4	; 0x04
     bc0:	88 0f       	add	r24, r24
     bc2:	88 0f       	add	r24, r24
     bc4:	88 0f       	add	r24, r24
     bc6:	89 0f       	add	r24, r25
     bc8:	80 93 f2 00 	sts	0x00F2, r24
     bcc:	92 81       	ldd	r25, Z+2	; 0x02
     bce:	92 95       	swap	r25
     bd0:	96 95       	lsr	r25
     bd2:	97 70       	andi	r25, 0x07	; 7
     bd4:	83 81       	ldd	r24, Z+3	; 0x03
     bd6:	88 0f       	add	r24, r24
     bd8:	88 0f       	add	r24, r24
     bda:	88 0f       	add	r24, r24
     bdc:	89 0f       	add	r24, r25
     bde:	80 93 f1 00 	sts	0x00F1, r24
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	88 0f       	add	r24, r24
     be6:	88 0f       	add	r24, r24
     be8:	88 0f       	add	r24, r24
     bea:	80 93 f0 00 	sts	0x00F0, r24
     bee:	ef ee       	ldi	r30, 0xEF	; 239
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 61       	ori	r24, 0x10	; 16
     bf6:	80 83       	st	Z, r24
     bf8:	17 c0       	rjmp	.+46     	; 0xc28 <can_cmd+0x12a>
          else              { Can_set_std_id(cmd->id.std);}
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	86 95       	lsr	r24
     bfe:	86 95       	lsr	r24
     c00:	86 95       	lsr	r24
     c02:	93 81       	ldd	r25, Z+3	; 0x03
     c04:	b0 e2       	ldi	r27, 0x20	; 32
     c06:	9b 9f       	mul	r25, r27
     c08:	80 0d       	add	r24, r0
     c0a:	11 24       	eor	r1, r1
     c0c:	80 93 f3 00 	sts	0x00F3, r24
     c10:	f8 01       	movw	r30, r16
     c12:	82 81       	ldd	r24, Z+2	; 0x02
     c14:	82 95       	swap	r24
     c16:	88 0f       	add	r24, r24
     c18:	80 7e       	andi	r24, 0xE0	; 224
     c1a:	80 93 f2 00 	sts	0x00F2, r24
     c1e:	ef ee       	ldi	r30, 0xEF	; 239
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8f 7e       	andi	r24, 0xEF	; 239
     c26:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     c28:	d8 01       	movw	r26, r16
     c2a:	16 96       	adiw	r26, 0x06	; 6
     c2c:	8c 91       	ld	r24, X
     c2e:	88 23       	and	r24, r24
     c30:	91 f0       	breq	.+36     	; 0xc56 <can_cmd+0x158>
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	2a ef       	ldi	r18, 0xFA	; 250
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	d8 01       	movw	r26, r16
     c3a:	17 96       	adiw	r26, 0x07	; 7
     c3c:	ed 91       	ld	r30, X+
     c3e:	fc 91       	ld	r31, X
     c40:	18 97       	sbiw	r26, 0x08	; 8
     c42:	e8 0f       	add	r30, r24
     c44:	f1 1d       	adc	r31, r1
     c46:	90 81       	ld	r25, Z
     c48:	f9 01       	movw	r30, r18
     c4a:	90 83       	st	Z, r25
     c4c:	8f 5f       	subi	r24, 0xFF	; 255
     c4e:	16 96       	adiw	r26, 0x06	; 6
     c50:	9c 91       	ld	r25, X
     c52:	89 17       	cp	r24, r25
     c54:	88 f3       	brcs	.-30     	; 0xc38 <can_cmd+0x13a>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     c56:	d8 01       	movw	r26, r16
     c58:	1a 96       	adiw	r26, 0x0a	; 10
     c5a:	8c 91       	ld	r24, X
     c5c:	88 23       	and	r24, r24
     c5e:	31 f0       	breq	.+12     	; 0xc6c <can_cmd+0x16e>
     c60:	e0 ef       	ldi	r30, 0xF0	; 240
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	84 60       	ori	r24, 0x04	; 4
     c68:	80 83       	st	Z, r24
     c6a:	05 c0       	rjmp	.+10     	; 0xc76 <can_cmd+0x178>
            else Can_clear_rtr();    
     c6c:	e0 ef       	ldi	r30, 0xF0	; 240
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8b 7f       	andi	r24, 0xFB	; 251
     c74:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     c76:	ef ee       	ldi	r30, 0xEF	; 239
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	90 81       	ld	r25, Z
     c7c:	d8 01       	movw	r26, r16
     c7e:	16 96       	adiw	r26, 0x06	; 6
     c80:	8c 91       	ld	r24, X
     c82:	89 2b       	or	r24, r25
     c84:	80 83       	st	Z, r24
          Can_config_tx();
     c86:	80 81       	ld	r24, Z
     c88:	8f 73       	andi	r24, 0x3F	; 63
     c8a:	80 83       	st	Z, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	80 64       	ori	r24, 0x40	; 64
     c90:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c92:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     c94:	5a c4       	rjmp	.+2228   	; 0x154a <__stack+0x44b>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     c96:	f8 01       	movw	r30, r16
     c98:	83 85       	ldd	r24, Z+11	; 0x0b
     c9a:	88 23       	and	r24, r24
     c9c:	69 f1       	breq	.+90     	; 0xcf8 <can_cmd+0x1fa>
     c9e:	94 81       	ldd	r25, Z+4	; 0x04
     ca0:	92 95       	swap	r25
     ca2:	96 95       	lsr	r25
     ca4:	97 70       	andi	r25, 0x07	; 7
     ca6:	85 81       	ldd	r24, Z+5	; 0x05
     ca8:	88 0f       	add	r24, r24
     caa:	88 0f       	add	r24, r24
     cac:	88 0f       	add	r24, r24
     cae:	89 0f       	add	r24, r25
     cb0:	80 93 f3 00 	sts	0x00F3, r24
     cb4:	93 81       	ldd	r25, Z+3	; 0x03
     cb6:	92 95       	swap	r25
     cb8:	96 95       	lsr	r25
     cba:	97 70       	andi	r25, 0x07	; 7
     cbc:	84 81       	ldd	r24, Z+4	; 0x04
     cbe:	88 0f       	add	r24, r24
     cc0:	88 0f       	add	r24, r24
     cc2:	88 0f       	add	r24, r24
     cc4:	89 0f       	add	r24, r25
     cc6:	80 93 f2 00 	sts	0x00F2, r24
     cca:	92 81       	ldd	r25, Z+2	; 0x02
     ccc:	92 95       	swap	r25
     cce:	96 95       	lsr	r25
     cd0:	97 70       	andi	r25, 0x07	; 7
     cd2:	83 81       	ldd	r24, Z+3	; 0x03
     cd4:	88 0f       	add	r24, r24
     cd6:	88 0f       	add	r24, r24
     cd8:	88 0f       	add	r24, r24
     cda:	89 0f       	add	r24, r25
     cdc:	80 93 f1 00 	sts	0x00F1, r24
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	88 0f       	add	r24, r24
     ce4:	88 0f       	add	r24, r24
     ce6:	88 0f       	add	r24, r24
     ce8:	80 93 f0 00 	sts	0x00F0, r24
     cec:	ef ee       	ldi	r30, 0xEF	; 239
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	80 61       	ori	r24, 0x10	; 16
     cf4:	80 83       	st	Z, r24
     cf6:	17 c0       	rjmp	.+46     	; 0xd26 <can_cmd+0x228>
          else              { Can_set_std_id(cmd->id.std);}
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	86 95       	lsr	r24
     cfc:	86 95       	lsr	r24
     cfe:	86 95       	lsr	r24
     d00:	93 81       	ldd	r25, Z+3	; 0x03
     d02:	b0 e2       	ldi	r27, 0x20	; 32
     d04:	9b 9f       	mul	r25, r27
     d06:	80 0d       	add	r24, r0
     d08:	11 24       	eor	r1, r1
     d0a:	80 93 f3 00 	sts	0x00F3, r24
     d0e:	f8 01       	movw	r30, r16
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	82 95       	swap	r24
     d14:	88 0f       	add	r24, r24
     d16:	80 7e       	andi	r24, 0xE0	; 224
     d18:	80 93 f2 00 	sts	0x00F2, r24
     d1c:	ef ee       	ldi	r30, 0xEF	; 239
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8f 7e       	andi	r24, 0xEF	; 239
     d24:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     d26:	d8 01       	movw	r26, r16
     d28:	16 96       	adiw	r26, 0x06	; 6
     d2a:	8c 91       	ld	r24, X
     d2c:	88 23       	and	r24, r24
     d2e:	91 f0       	breq	.+36     	; 0xd54 <can_cmd+0x256>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	2a ef       	ldi	r18, 0xFA	; 250
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	d8 01       	movw	r26, r16
     d38:	17 96       	adiw	r26, 0x07	; 7
     d3a:	ed 91       	ld	r30, X+
     d3c:	fc 91       	ld	r31, X
     d3e:	18 97       	sbiw	r26, 0x08	; 8
     d40:	e8 0f       	add	r30, r24
     d42:	f1 1d       	adc	r31, r1
     d44:	90 81       	ld	r25, Z
     d46:	f9 01       	movw	r30, r18
     d48:	90 83       	st	Z, r25
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
     d4c:	16 96       	adiw	r26, 0x06	; 6
     d4e:	9c 91       	ld	r25, X
     d50:	89 17       	cp	r24, r25
     d52:	88 f3       	brcs	.-30     	; 0xd36 <can_cmd+0x238>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     d54:	d8 01       	movw	r26, r16
     d56:	1a 96       	adiw	r26, 0x0a	; 10
     d58:	1c 92       	st	X, r1
     d5a:	1a 97       	sbiw	r26, 0x0a	; 10
     d5c:	e0 ef       	ldi	r30, 0xF0	; 240
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8b 7f       	andi	r24, 0xFB	; 251
     d64:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     d66:	ef ee       	ldi	r30, 0xEF	; 239
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	90 81       	ld	r25, Z
     d6c:	16 96       	adiw	r26, 0x06	; 6
     d6e:	8c 91       	ld	r24, X
     d70:	89 2b       	or	r24, r25
     d72:	80 83       	st	Z, r24
          Can_config_tx();
     d74:	80 81       	ld	r24, Z
     d76:	8f 73       	andi	r24, 0x3F	; 63
     d78:	80 83       	st	Z, r24
     d7a:	80 81       	ld	r24, Z
     d7c:	80 64       	ori	r24, 0x40	; 64
     d7e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d80:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     d82:	e3 c3       	rjmp	.+1990   	; 0x154a <__stack+0x44b>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d84:	f8 01       	movw	r30, r16
     d86:	83 85       	ldd	r24, Z+11	; 0x0b
     d88:	88 23       	and	r24, r24
     d8a:	69 f1       	breq	.+90     	; 0xde6 <can_cmd+0x2e8>
     d8c:	94 81       	ldd	r25, Z+4	; 0x04
     d8e:	92 95       	swap	r25
     d90:	96 95       	lsr	r25
     d92:	97 70       	andi	r25, 0x07	; 7
     d94:	85 81       	ldd	r24, Z+5	; 0x05
     d96:	88 0f       	add	r24, r24
     d98:	88 0f       	add	r24, r24
     d9a:	88 0f       	add	r24, r24
     d9c:	89 0f       	add	r24, r25
     d9e:	80 93 f3 00 	sts	0x00F3, r24
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	92 95       	swap	r25
     da6:	96 95       	lsr	r25
     da8:	97 70       	andi	r25, 0x07	; 7
     daa:	84 81       	ldd	r24, Z+4	; 0x04
     dac:	88 0f       	add	r24, r24
     dae:	88 0f       	add	r24, r24
     db0:	88 0f       	add	r24, r24
     db2:	89 0f       	add	r24, r25
     db4:	80 93 f2 00 	sts	0x00F2, r24
     db8:	92 81       	ldd	r25, Z+2	; 0x02
     dba:	92 95       	swap	r25
     dbc:	96 95       	lsr	r25
     dbe:	97 70       	andi	r25, 0x07	; 7
     dc0:	83 81       	ldd	r24, Z+3	; 0x03
     dc2:	88 0f       	add	r24, r24
     dc4:	88 0f       	add	r24, r24
     dc6:	88 0f       	add	r24, r24
     dc8:	89 0f       	add	r24, r25
     dca:	80 93 f1 00 	sts	0x00F1, r24
     dce:	82 81       	ldd	r24, Z+2	; 0x02
     dd0:	88 0f       	add	r24, r24
     dd2:	88 0f       	add	r24, r24
     dd4:	88 0f       	add	r24, r24
     dd6:	80 93 f0 00 	sts	0x00F0, r24
     dda:	ef ee       	ldi	r30, 0xEF	; 239
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	80 61       	ori	r24, 0x10	; 16
     de2:	80 83       	st	Z, r24
     de4:	17 c0       	rjmp	.+46     	; 0xe14 <can_cmd+0x316>
          else              { Can_set_std_id(cmd->id.std);}
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	86 95       	lsr	r24
     dea:	86 95       	lsr	r24
     dec:	86 95       	lsr	r24
     dee:	93 81       	ldd	r25, Z+3	; 0x03
     df0:	b0 e2       	ldi	r27, 0x20	; 32
     df2:	9b 9f       	mul	r25, r27
     df4:	80 0d       	add	r24, r0
     df6:	11 24       	eor	r1, r1
     df8:	80 93 f3 00 	sts	0x00F3, r24
     dfc:	f8 01       	movw	r30, r16
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	82 95       	swap	r24
     e02:	88 0f       	add	r24, r24
     e04:	80 7e       	andi	r24, 0xE0	; 224
     e06:	80 93 f2 00 	sts	0x00F2, r24
     e0a:	ef ee       	ldi	r30, 0xEF	; 239
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8f 7e       	andi	r24, 0xEF	; 239
     e12:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	d8 01       	movw	r26, r16
     e18:	1a 96       	adiw	r26, 0x0a	; 10
     e1a:	8c 93       	st	X, r24
     e1c:	1a 97       	sbiw	r26, 0x0a	; 10
     e1e:	e0 ef       	ldi	r30, 0xF0	; 240
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	84 60       	ori	r24, 0x04	; 4
     e26:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     e28:	ef ee       	ldi	r30, 0xEF	; 239
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	90 81       	ld	r25, Z
     e2e:	16 96       	adiw	r26, 0x06	; 6
     e30:	8c 91       	ld	r24, X
     e32:	89 2b       	or	r24, r25
     e34:	80 83       	st	Z, r24
          Can_config_tx();
     e36:	80 81       	ld	r24, Z
     e38:	8f 73       	andi	r24, 0x3F	; 63
     e3a:	80 83       	st	Z, r24
     e3c:	80 81       	ld	r24, Z
     e3e:	80 64       	ori	r24, 0x40	; 64
     e40:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e42:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     e44:	82 c3       	rjmp	.+1796   	; 0x154a <__stack+0x44b>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     e46:	19 82       	std	Y+1, r1	; 0x01
     e48:	1a 82       	std	Y+2, r1	; 0x02
     e4a:	1b 82       	std	Y+3, r1	; 0x03
     e4c:	1c 82       	std	Y+4, r1	; 0x04
     e4e:	10 92 f7 00 	sts	0x00F7, r1
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	92 95       	swap	r25
     e56:	96 95       	lsr	r25
     e58:	97 70       	andi	r25, 0x07	; 7
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	88 0f       	add	r24, r24
     e5e:	88 0f       	add	r24, r24
     e60:	88 0f       	add	r24, r24
     e62:	89 0f       	add	r24, r25
     e64:	80 93 f6 00 	sts	0x00F6, r24
     e68:	99 81       	ldd	r25, Y+1	; 0x01
     e6a:	92 95       	swap	r25
     e6c:	96 95       	lsr	r25
     e6e:	97 70       	andi	r25, 0x07	; 7
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	88 0f       	add	r24, r24
     e74:	88 0f       	add	r24, r24
     e76:	88 0f       	add	r24, r24
     e78:	89 0f       	add	r24, r25
     e7a:	80 93 f5 00 	sts	0x00F5, r24
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	88 0f       	add	r24, r24
     e82:	88 0f       	add	r24, r24
     e84:	88 0f       	add	r24, r24
     e86:	24 ef       	ldi	r18, 0xF4	; 244
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	f9 01       	movw	r30, r18
     e8c:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     e8e:	ef ee       	ldi	r30, 0xEF	; 239
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	90 81       	ld	r25, Z
     e94:	d8 01       	movw	r26, r16
     e96:	16 96       	adiw	r26, 0x06	; 6
     e98:	8c 91       	ld	r24, X
     e9a:	89 2b       	or	r24, r25
     e9c:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
     e9e:	d9 01       	movw	r26, r18
     ea0:	8c 91       	ld	r24, X
     ea2:	8b 7f       	andi	r24, 0xFB	; 251
     ea4:	8c 93       	st	X, r24
          Can_clear_idemsk();
     ea6:	8c 91       	ld	r24, X
     ea8:	8e 7f       	andi	r24, 0xFE	; 254
     eaa:	8c 93       	st	X, r24
          Can_config_rx();       
     eac:	80 81       	ld	r24, Z
     eae:	8f 73       	andi	r24, 0x3F	; 63
     eb0:	80 83       	st	Z, r24
     eb2:	80 81       	ld	r24, Z
     eb4:	80 68       	ori	r24, 0x80	; 128
     eb6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     eb8:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     eba:	47 c3       	rjmp	.+1678   	; 0x154a <__stack+0x44b>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     ebc:	19 82       	std	Y+1, r1	; 0x01
     ebe:	1a 82       	std	Y+2, r1	; 0x02
     ec0:	1b 82       	std	Y+3, r1	; 0x03
     ec2:	1c 82       	std	Y+4, r1	; 0x04
     ec4:	10 92 f7 00 	sts	0x00F7, r1
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	92 95       	swap	r25
     ecc:	96 95       	lsr	r25
     ece:	97 70       	andi	r25, 0x07	; 7
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	88 0f       	add	r24, r24
     ed4:	88 0f       	add	r24, r24
     ed6:	88 0f       	add	r24, r24
     ed8:	89 0f       	add	r24, r25
     eda:	80 93 f6 00 	sts	0x00F6, r24
     ede:	99 81       	ldd	r25, Y+1	; 0x01
     ee0:	92 95       	swap	r25
     ee2:	96 95       	lsr	r25
     ee4:	97 70       	andi	r25, 0x07	; 7
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	88 0f       	add	r24, r24
     eea:	88 0f       	add	r24, r24
     eec:	88 0f       	add	r24, r24
     eee:	89 0f       	add	r24, r25
     ef0:	80 93 f5 00 	sts	0x00F5, r24
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	88 0f       	add	r24, r24
     ef8:	88 0f       	add	r24, r24
     efa:	88 0f       	add	r24, r24
     efc:	44 ef       	ldi	r20, 0xF4	; 244
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	fa 01       	movw	r30, r20
     f02:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     f04:	ef ee       	ldi	r30, 0xEF	; 239
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	90 81       	ld	r25, Z
     f0a:	d8 01       	movw	r26, r16
     f0c:	16 96       	adiw	r26, 0x06	; 6
     f0e:	8c 91       	ld	r24, X
     f10:	16 97       	sbiw	r26, 0x06	; 6
     f12:	89 2b       	or	r24, r25
     f14:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     f16:	1a 96       	adiw	r26, 0x0a	; 10
     f18:	1c 92       	st	X, r1
     f1a:	da 01       	movw	r26, r20
     f1c:	8c 91       	ld	r24, X
     f1e:	84 60       	ori	r24, 0x04	; 4
     f20:	8c 93       	st	X, r24
     f22:	80 ef       	ldi	r24, 0xF0	; 240
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	dc 01       	movw	r26, r24
     f28:	2c 91       	ld	r18, X
     f2a:	2b 7f       	andi	r18, 0xFB	; 251
     f2c:	2c 93       	st	X, r18
          Can_clear_idemsk();
     f2e:	da 01       	movw	r26, r20
     f30:	8c 91       	ld	r24, X
     f32:	8e 7f       	andi	r24, 0xFE	; 254
     f34:	8c 93       	st	X, r24
          Can_config_rx();       
     f36:	80 81       	ld	r24, Z
     f38:	8f 73       	andi	r24, 0x3F	; 63
     f3a:	80 83       	st	Z, r24
     f3c:	80 81       	ld	r24, Z
     f3e:	80 68       	ori	r24, 0x80	; 128
     f40:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     f42:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     f44:	02 c3       	rjmp	.+1540   	; 0x154a <__stack+0x44b>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     f46:	19 82       	std	Y+1, r1	; 0x01
     f48:	1a 82       	std	Y+2, r1	; 0x02
     f4a:	1b 82       	std	Y+3, r1	; 0x03
     f4c:	1c 82       	std	Y+4, r1	; 0x04
     f4e:	10 92 f7 00 	sts	0x00F7, r1
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	92 95       	swap	r25
     f56:	96 95       	lsr	r25
     f58:	97 70       	andi	r25, 0x07	; 7
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 0f       	add	r24, r24
     f5e:	88 0f       	add	r24, r24
     f60:	88 0f       	add	r24, r24
     f62:	89 0f       	add	r24, r25
     f64:	80 93 f6 00 	sts	0x00F6, r24
     f68:	99 81       	ldd	r25, Y+1	; 0x01
     f6a:	92 95       	swap	r25
     f6c:	96 95       	lsr	r25
     f6e:	97 70       	andi	r25, 0x07	; 7
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	88 0f       	add	r24, r24
     f74:	88 0f       	add	r24, r24
     f76:	88 0f       	add	r24, r24
     f78:	89 0f       	add	r24, r25
     f7a:	80 93 f5 00 	sts	0x00F5, r24
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	88 0f       	add	r24, r24
     f82:	88 0f       	add	r24, r24
     f84:	88 0f       	add	r24, r24
     f86:	44 ef       	ldi	r20, 0xF4	; 244
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	fa 01       	movw	r30, r20
     f8c:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     f8e:	ef ee       	ldi	r30, 0xEF	; 239
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	90 81       	ld	r25, Z
     f94:	d8 01       	movw	r26, r16
     f96:	16 96       	adiw	r26, 0x06	; 6
     f98:	8c 91       	ld	r24, X
     f9a:	16 97       	sbiw	r26, 0x06	; 6
     f9c:	89 2b       	or	r24, r25
     f9e:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	1a 96       	adiw	r26, 0x0a	; 10
     fa4:	8c 93       	st	X, r24
     fa6:	da 01       	movw	r26, r20
     fa8:	8c 91       	ld	r24, X
     faa:	84 60       	ori	r24, 0x04	; 4
     fac:	8c 93       	st	X, r24
     fae:	80 ef       	ldi	r24, 0xF0	; 240
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	dc 01       	movw	r26, r24
     fb4:	2c 91       	ld	r18, X
     fb6:	24 60       	ori	r18, 0x04	; 4
     fb8:	2c 93       	st	X, r18
          Can_clear_rplv();
     fba:	80 81       	ld	r24, Z
     fbc:	8f 7d       	andi	r24, 0xDF	; 223
     fbe:	80 83       	st	Z, r24
          Can_clear_idemsk();
     fc0:	da 01       	movw	r26, r20
     fc2:	8c 91       	ld	r24, X
     fc4:	8e 7f       	andi	r24, 0xFE	; 254
     fc6:	8c 93       	st	X, r24
          Can_config_rx();       
     fc8:	80 81       	ld	r24, Z
     fca:	8f 73       	andi	r24, 0x3F	; 63
     fcc:	80 83       	st	Z, r24
     fce:	80 81       	ld	r24, Z
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     fd4:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     fd6:	b9 c2       	rjmp	.+1394   	; 0x154a <__stack+0x44b>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     fd8:	f8 01       	movw	r30, r16
     fda:	83 85       	ldd	r24, Z+11	; 0x0b
     fdc:	88 23       	and	r24, r24
     fde:	69 f1       	breq	.+90     	; 0x103a <can_cmd+0x53c>
     fe0:	94 81       	ldd	r25, Z+4	; 0x04
     fe2:	92 95       	swap	r25
     fe4:	96 95       	lsr	r25
     fe6:	97 70       	andi	r25, 0x07	; 7
     fe8:	85 81       	ldd	r24, Z+5	; 0x05
     fea:	88 0f       	add	r24, r24
     fec:	88 0f       	add	r24, r24
     fee:	88 0f       	add	r24, r24
     ff0:	89 0f       	add	r24, r25
     ff2:	80 93 f3 00 	sts	0x00F3, r24
     ff6:	93 81       	ldd	r25, Z+3	; 0x03
     ff8:	92 95       	swap	r25
     ffa:	96 95       	lsr	r25
     ffc:	97 70       	andi	r25, 0x07	; 7
     ffe:	84 81       	ldd	r24, Z+4	; 0x04
    1000:	88 0f       	add	r24, r24
    1002:	88 0f       	add	r24, r24
    1004:	88 0f       	add	r24, r24
    1006:	89 0f       	add	r24, r25
    1008:	80 93 f2 00 	sts	0x00F2, r24
    100c:	92 81       	ldd	r25, Z+2	; 0x02
    100e:	92 95       	swap	r25
    1010:	96 95       	lsr	r25
    1012:	97 70       	andi	r25, 0x07	; 7
    1014:	83 81       	ldd	r24, Z+3	; 0x03
    1016:	88 0f       	add	r24, r24
    1018:	88 0f       	add	r24, r24
    101a:	88 0f       	add	r24, r24
    101c:	89 0f       	add	r24, r25
    101e:	80 93 f1 00 	sts	0x00F1, r24
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	88 0f       	add	r24, r24
    1026:	88 0f       	add	r24, r24
    1028:	88 0f       	add	r24, r24
    102a:	80 93 f0 00 	sts	0x00F0, r24
    102e:	ef ee       	ldi	r30, 0xEF	; 239
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 61       	ori	r24, 0x10	; 16
    1036:	80 83       	st	Z, r24
    1038:	17 c0       	rjmp	.+46     	; 0x1068 <can_cmd+0x56a>
          else              { Can_set_std_id(cmd->id.std);}
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	86 95       	lsr	r24
    103e:	86 95       	lsr	r24
    1040:	86 95       	lsr	r24
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	b0 e2       	ldi	r27, 0x20	; 32
    1046:	9b 9f       	mul	r25, r27
    1048:	80 0d       	add	r24, r0
    104a:	11 24       	eor	r1, r1
    104c:	80 93 f3 00 	sts	0x00F3, r24
    1050:	f8 01       	movw	r30, r16
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	82 95       	swap	r24
    1056:	88 0f       	add	r24, r24
    1058:	80 7e       	andi	r24, 0xE0	; 224
    105a:	80 93 f2 00 	sts	0x00F2, r24
    105e:	ef ee       	ldi	r30, 0xEF	; 239
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8f 7e       	andi	r24, 0xEF	; 239
    1066:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	9f ef       	ldi	r25, 0xFF	; 255
    106c:	dc 01       	movw	r26, r24
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	ab 83       	std	Y+3, r26	; 0x03
    1074:	bc 83       	std	Y+4, r27	; 0x04
    1076:	80 93 f7 00 	sts	0x00F7, r24
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	92 95       	swap	r25
    107e:	96 95       	lsr	r25
    1080:	97 70       	andi	r25, 0x07	; 7
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	88 0f       	add	r24, r24
    1086:	88 0f       	add	r24, r24
    1088:	88 0f       	add	r24, r24
    108a:	89 0f       	add	r24, r25
    108c:	80 93 f6 00 	sts	0x00F6, r24
    1090:	99 81       	ldd	r25, Y+1	; 0x01
    1092:	92 95       	swap	r25
    1094:	96 95       	lsr	r25
    1096:	97 70       	andi	r25, 0x07	; 7
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	88 0f       	add	r24, r24
    109c:	88 0f       	add	r24, r24
    109e:	88 0f       	add	r24, r24
    10a0:	89 0f       	add	r24, r25
    10a2:	80 93 f5 00 	sts	0x00F5, r24
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	88 0f       	add	r24, r24
    10aa:	88 0f       	add	r24, r24
    10ac:	88 0f       	add	r24, r24
    10ae:	24 ef       	ldi	r18, 0xF4	; 244
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	d9 01       	movw	r26, r18
    10b4:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    10b6:	ef ee       	ldi	r30, 0xEF	; 239
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	90 81       	ld	r25, Z
    10bc:	d8 01       	movw	r26, r16
    10be:	16 96       	adiw	r26, 0x06	; 6
    10c0:	8c 91       	ld	r24, X
    10c2:	89 2b       	or	r24, r25
    10c4:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
    10c6:	d9 01       	movw	r26, r18
    10c8:	8c 91       	ld	r24, X
    10ca:	8b 7f       	andi	r24, 0xFB	; 251
    10cc:	8c 93       	st	X, r24
          Can_set_idemsk();
    10ce:	8c 91       	ld	r24, X
    10d0:	81 60       	ori	r24, 0x01	; 1
    10d2:	8c 93       	st	X, r24
          Can_config_rx();       
    10d4:	80 81       	ld	r24, Z
    10d6:	8f 73       	andi	r24, 0x3F	; 63
    10d8:	80 83       	st	Z, r24
    10da:	80 81       	ld	r24, Z
    10dc:	80 68       	ori	r24, 0x80	; 128
    10de:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    10e0:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    10e2:	33 c2       	rjmp	.+1126   	; 0x154a <__stack+0x44b>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    10e4:	f8 01       	movw	r30, r16
    10e6:	83 85       	ldd	r24, Z+11	; 0x0b
    10e8:	88 23       	and	r24, r24
    10ea:	69 f1       	breq	.+90     	; 0x1146 <__stack+0x47>
    10ec:	94 81       	ldd	r25, Z+4	; 0x04
    10ee:	92 95       	swap	r25
    10f0:	96 95       	lsr	r25
    10f2:	97 70       	andi	r25, 0x07	; 7
    10f4:	85 81       	ldd	r24, Z+5	; 0x05
    10f6:	88 0f       	add	r24, r24
    10f8:	88 0f       	add	r24, r24
    10fa:	88 0f       	add	r24, r24
    10fc:	89 0f       	add	r24, r25
    10fe:	80 93 f3 00 	sts	0x00F3, r24
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	92 95       	swap	r25
    1106:	96 95       	lsr	r25
    1108:	97 70       	andi	r25, 0x07	; 7
    110a:	84 81       	ldd	r24, Z+4	; 0x04
    110c:	88 0f       	add	r24, r24
    110e:	88 0f       	add	r24, r24
    1110:	88 0f       	add	r24, r24
    1112:	89 0f       	add	r24, r25
    1114:	80 93 f2 00 	sts	0x00F2, r24
    1118:	92 81       	ldd	r25, Z+2	; 0x02
    111a:	92 95       	swap	r25
    111c:	96 95       	lsr	r25
    111e:	97 70       	andi	r25, 0x07	; 7
    1120:	83 81       	ldd	r24, Z+3	; 0x03
    1122:	88 0f       	add	r24, r24
    1124:	88 0f       	add	r24, r24
    1126:	88 0f       	add	r24, r24
    1128:	89 0f       	add	r24, r25
    112a:	80 93 f1 00 	sts	0x00F1, r24
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	88 0f       	add	r24, r24
    1132:	88 0f       	add	r24, r24
    1134:	88 0f       	add	r24, r24
    1136:	80 93 f0 00 	sts	0x00F0, r24
    113a:	ef ee       	ldi	r30, 0xEF	; 239
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	80 61       	ori	r24, 0x10	; 16
    1142:	80 83       	st	Z, r24
    1144:	17 c0       	rjmp	.+46     	; 0x1174 <__stack+0x75>
          else              { Can_set_std_id(cmd->id.std);}
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	86 95       	lsr	r24
    114a:	86 95       	lsr	r24
    114c:	86 95       	lsr	r24
    114e:	93 81       	ldd	r25, Z+3	; 0x03
    1150:	b0 e2       	ldi	r27, 0x20	; 32
    1152:	9b 9f       	mul	r25, r27
    1154:	80 0d       	add	r24, r0
    1156:	11 24       	eor	r1, r1
    1158:	80 93 f3 00 	sts	0x00F3, r24
    115c:	f8 01       	movw	r30, r16
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	82 95       	swap	r24
    1162:	88 0f       	add	r24, r24
    1164:	80 7e       	andi	r24, 0xE0	; 224
    1166:	80 93 f2 00 	sts	0x00F2, r24
    116a:	ef ee       	ldi	r30, 0xEF	; 239
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8f 7e       	andi	r24, 0xEF	; 239
    1172:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	9f ef       	ldi	r25, 0xFF	; 255
    1178:	dc 01       	movw	r26, r24
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	ab 83       	std	Y+3, r26	; 0x03
    1180:	bc 83       	std	Y+4, r27	; 0x04
    1182:	80 93 f7 00 	sts	0x00F7, r24
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	92 95       	swap	r25
    118a:	96 95       	lsr	r25
    118c:	97 70       	andi	r25, 0x07	; 7
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	88 0f       	add	r24, r24
    1192:	88 0f       	add	r24, r24
    1194:	88 0f       	add	r24, r24
    1196:	89 0f       	add	r24, r25
    1198:	80 93 f6 00 	sts	0x00F6, r24
    119c:	99 81       	ldd	r25, Y+1	; 0x01
    119e:	92 95       	swap	r25
    11a0:	96 95       	lsr	r25
    11a2:	97 70       	andi	r25, 0x07	; 7
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	88 0f       	add	r24, r24
    11a8:	88 0f       	add	r24, r24
    11aa:	88 0f       	add	r24, r24
    11ac:	89 0f       	add	r24, r25
    11ae:	80 93 f5 00 	sts	0x00F5, r24
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	88 0f       	add	r24, r24
    11b6:	88 0f       	add	r24, r24
    11b8:	88 0f       	add	r24, r24
    11ba:	44 ef       	ldi	r20, 0xF4	; 244
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	da 01       	movw	r26, r20
    11c0:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    11c2:	ef ee       	ldi	r30, 0xEF	; 239
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	90 81       	ld	r25, Z
    11c8:	d8 01       	movw	r26, r16
    11ca:	16 96       	adiw	r26, 0x06	; 6
    11cc:	8c 91       	ld	r24, X
    11ce:	16 97       	sbiw	r26, 0x06	; 6
    11d0:	89 2b       	or	r24, r25
    11d2:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    11d4:	1a 96       	adiw	r26, 0x0a	; 10
    11d6:	1c 92       	st	X, r1
    11d8:	da 01       	movw	r26, r20
    11da:	8c 91       	ld	r24, X
    11dc:	84 60       	ori	r24, 0x04	; 4
    11de:	8c 93       	st	X, r24
    11e0:	80 ef       	ldi	r24, 0xF0	; 240
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	dc 01       	movw	r26, r24
    11e6:	2c 91       	ld	r18, X
    11e8:	2b 7f       	andi	r18, 0xFB	; 251
    11ea:	2c 93       	st	X, r18
          Can_set_idemsk();
    11ec:	da 01       	movw	r26, r20
    11ee:	8c 91       	ld	r24, X
    11f0:	81 60       	ori	r24, 0x01	; 1
    11f2:	8c 93       	st	X, r24
          Can_config_rx();       
    11f4:	80 81       	ld	r24, Z
    11f6:	8f 73       	andi	r24, 0x3F	; 63
    11f8:	80 83       	st	Z, r24
    11fa:	80 81       	ld	r24, Z
    11fc:	80 68       	ori	r24, 0x80	; 128
    11fe:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1200:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1202:	a3 c1       	rjmp	.+838    	; 0x154a <__stack+0x44b>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1204:	f8 01       	movw	r30, r16
    1206:	83 85       	ldd	r24, Z+11	; 0x0b
    1208:	88 23       	and	r24, r24
    120a:	69 f1       	breq	.+90     	; 0x1266 <__stack+0x167>
    120c:	94 81       	ldd	r25, Z+4	; 0x04
    120e:	92 95       	swap	r25
    1210:	96 95       	lsr	r25
    1212:	97 70       	andi	r25, 0x07	; 7
    1214:	85 81       	ldd	r24, Z+5	; 0x05
    1216:	88 0f       	add	r24, r24
    1218:	88 0f       	add	r24, r24
    121a:	88 0f       	add	r24, r24
    121c:	89 0f       	add	r24, r25
    121e:	80 93 f3 00 	sts	0x00F3, r24
    1222:	93 81       	ldd	r25, Z+3	; 0x03
    1224:	92 95       	swap	r25
    1226:	96 95       	lsr	r25
    1228:	97 70       	andi	r25, 0x07	; 7
    122a:	84 81       	ldd	r24, Z+4	; 0x04
    122c:	88 0f       	add	r24, r24
    122e:	88 0f       	add	r24, r24
    1230:	88 0f       	add	r24, r24
    1232:	89 0f       	add	r24, r25
    1234:	80 93 f2 00 	sts	0x00F2, r24
    1238:	92 81       	ldd	r25, Z+2	; 0x02
    123a:	92 95       	swap	r25
    123c:	96 95       	lsr	r25
    123e:	97 70       	andi	r25, 0x07	; 7
    1240:	83 81       	ldd	r24, Z+3	; 0x03
    1242:	88 0f       	add	r24, r24
    1244:	88 0f       	add	r24, r24
    1246:	88 0f       	add	r24, r24
    1248:	89 0f       	add	r24, r25
    124a:	80 93 f1 00 	sts	0x00F1, r24
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	88 0f       	add	r24, r24
    1252:	88 0f       	add	r24, r24
    1254:	88 0f       	add	r24, r24
    1256:	80 93 f0 00 	sts	0x00F0, r24
    125a:	ef ee       	ldi	r30, 0xEF	; 239
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	80 61       	ori	r24, 0x10	; 16
    1262:	80 83       	st	Z, r24
    1264:	17 c0       	rjmp	.+46     	; 0x1294 <__stack+0x195>
          else              { Can_set_std_id(cmd->id.std);}
    1266:	82 81       	ldd	r24, Z+2	; 0x02
    1268:	86 95       	lsr	r24
    126a:	86 95       	lsr	r24
    126c:	86 95       	lsr	r24
    126e:	93 81       	ldd	r25, Z+3	; 0x03
    1270:	b0 e2       	ldi	r27, 0x20	; 32
    1272:	9b 9f       	mul	r25, r27
    1274:	80 0d       	add	r24, r0
    1276:	11 24       	eor	r1, r1
    1278:	80 93 f3 00 	sts	0x00F3, r24
    127c:	f8 01       	movw	r30, r16
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	82 95       	swap	r24
    1282:	88 0f       	add	r24, r24
    1284:	80 7e       	andi	r24, 0xE0	; 224
    1286:	80 93 f2 00 	sts	0x00F2, r24
    128a:	ef ee       	ldi	r30, 0xEF	; 239
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8f 7e       	andi	r24, 0xEF	; 239
    1292:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	9f ef       	ldi	r25, 0xFF	; 255
    1298:	dc 01       	movw	r26, r24
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	ab 83       	std	Y+3, r26	; 0x03
    12a0:	bc 83       	std	Y+4, r27	; 0x04
    12a2:	80 93 f7 00 	sts	0x00F7, r24
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	92 95       	swap	r25
    12aa:	96 95       	lsr	r25
    12ac:	97 70       	andi	r25, 0x07	; 7
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	88 0f       	add	r24, r24
    12b2:	88 0f       	add	r24, r24
    12b4:	88 0f       	add	r24, r24
    12b6:	89 0f       	add	r24, r25
    12b8:	80 93 f6 00 	sts	0x00F6, r24
    12bc:	99 81       	ldd	r25, Y+1	; 0x01
    12be:	92 95       	swap	r25
    12c0:	96 95       	lsr	r25
    12c2:	97 70       	andi	r25, 0x07	; 7
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	88 0f       	add	r24, r24
    12c8:	88 0f       	add	r24, r24
    12ca:	88 0f       	add	r24, r24
    12cc:	89 0f       	add	r24, r25
    12ce:	80 93 f5 00 	sts	0x00F5, r24
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	88 0f       	add	r24, r24
    12d6:	88 0f       	add	r24, r24
    12d8:	88 0f       	add	r24, r24
    12da:	44 ef       	ldi	r20, 0xF4	; 244
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	da 01       	movw	r26, r20
    12e0:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    12e2:	ef ee       	ldi	r30, 0xEF	; 239
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	90 81       	ld	r25, Z
    12e8:	d8 01       	movw	r26, r16
    12ea:	16 96       	adiw	r26, 0x06	; 6
    12ec:	8c 91       	ld	r24, X
    12ee:	16 97       	sbiw	r26, 0x06	; 6
    12f0:	89 2b       	or	r24, r25
    12f2:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	1a 96       	adiw	r26, 0x0a	; 10
    12f8:	8c 93       	st	X, r24
    12fa:	da 01       	movw	r26, r20
    12fc:	8c 91       	ld	r24, X
    12fe:	84 60       	ori	r24, 0x04	; 4
    1300:	8c 93       	st	X, r24
    1302:	80 ef       	ldi	r24, 0xF0	; 240
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	dc 01       	movw	r26, r24
    1308:	2c 91       	ld	r18, X
    130a:	24 60       	ori	r18, 0x04	; 4
    130c:	2c 93       	st	X, r18
          Can_clear_rplv();
    130e:	80 81       	ld	r24, Z
    1310:	8f 7d       	andi	r24, 0xDF	; 223
    1312:	80 83       	st	Z, r24
          Can_set_idemsk();
    1314:	da 01       	movw	r26, r20
    1316:	8c 91       	ld	r24, X
    1318:	81 60       	ori	r24, 0x01	; 1
    131a:	8c 93       	st	X, r24
          Can_config_rx();       
    131c:	80 81       	ld	r24, Z
    131e:	8f 73       	andi	r24, 0x3F	; 63
    1320:	80 83       	st	Z, r24
    1322:	80 81       	ld	r24, Z
    1324:	80 68       	ori	r24, 0x80	; 128
    1326:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1328:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    132a:	0f c1       	rjmp	.+542    	; 0x154a <__stack+0x44b>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	2a ef       	ldi	r18, 0xFA	; 250
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	d8 01       	movw	r26, r16
    1334:	17 96       	adiw	r26, 0x07	; 7
    1336:	ed 91       	ld	r30, X+
    1338:	fc 91       	ld	r31, X
    133a:	18 97       	sbiw	r26, 0x08	; 8
    133c:	e8 0f       	add	r30, r24
    133e:	f1 1d       	adc	r31, r1
    1340:	90 81       	ld	r25, Z
    1342:	f9 01       	movw	r30, r18
    1344:	90 83       	st	Z, r25
    1346:	8f 5f       	subi	r24, 0xFF	; 255
    1348:	16 96       	adiw	r26, 0x06	; 6
    134a:	9c 91       	ld	r25, X
    134c:	89 17       	cp	r24, r25
    134e:	88 f3       	brcs	.-30     	; 0x1332 <__stack+0x233>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1350:	19 82       	std	Y+1, r1	; 0x01
    1352:	1a 82       	std	Y+2, r1	; 0x02
    1354:	1b 82       	std	Y+3, r1	; 0x03
    1356:	1c 82       	std	Y+4, r1	; 0x04
    1358:	10 92 f7 00 	sts	0x00F7, r1
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	92 95       	swap	r25
    1360:	96 95       	lsr	r25
    1362:	97 70       	andi	r25, 0x07	; 7
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	88 0f       	add	r24, r24
    1368:	88 0f       	add	r24, r24
    136a:	88 0f       	add	r24, r24
    136c:	89 0f       	add	r24, r25
    136e:	80 93 f6 00 	sts	0x00F6, r24
    1372:	99 81       	ldd	r25, Y+1	; 0x01
    1374:	92 95       	swap	r25
    1376:	96 95       	lsr	r25
    1378:	97 70       	andi	r25, 0x07	; 7
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	88 0f       	add	r24, r24
    137e:	88 0f       	add	r24, r24
    1380:	88 0f       	add	r24, r24
    1382:	89 0f       	add	r24, r25
    1384:	80 93 f5 00 	sts	0x00F5, r24
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	88 0f       	add	r24, r24
    138c:	88 0f       	add	r24, r24
    138e:	88 0f       	add	r24, r24
    1390:	44 ef       	ldi	r20, 0xF4	; 244
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	da 01       	movw	r26, r20
    1396:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1398:	ef ee       	ldi	r30, 0xEF	; 239
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	90 81       	ld	r25, Z
    139e:	d8 01       	movw	r26, r16
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	8c 91       	ld	r24, X
    13a4:	16 97       	sbiw	r26, 0x06	; 6
    13a6:	89 2b       	or	r24, r25
    13a8:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	1a 96       	adiw	r26, 0x0a	; 10
    13ae:	8c 93       	st	X, r24
    13b0:	da 01       	movw	r26, r20
    13b2:	8c 91       	ld	r24, X
    13b4:	84 60       	ori	r24, 0x04	; 4
    13b6:	8c 93       	st	X, r24
    13b8:	80 ef       	ldi	r24, 0xF0	; 240
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	dc 01       	movw	r26, r24
    13be:	2c 91       	ld	r18, X
    13c0:	24 60       	ori	r18, 0x04	; 4
    13c2:	2c 93       	st	X, r18
          Can_set_rplv();
    13c4:	80 81       	ld	r24, Z
    13c6:	80 62       	ori	r24, 0x20	; 32
    13c8:	80 83       	st	Z, r24
          Can_clear_idemsk();
    13ca:	da 01       	movw	r26, r20
    13cc:	8c 91       	ld	r24, X
    13ce:	8e 7f       	andi	r24, 0xFE	; 254
    13d0:	8c 93       	st	X, r24
          Can_config_rx();       
    13d2:	80 81       	ld	r24, Z
    13d4:	8f 73       	andi	r24, 0x3F	; 63
    13d6:	80 83       	st	Z, r24
    13d8:	80 81       	ld	r24, Z
    13da:	80 68       	ori	r24, 0x80	; 128
    13dc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    13de:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    13e0:	b4 c0       	rjmp	.+360    	; 0x154a <__stack+0x44b>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    13e2:	f8 01       	movw	r30, r16
    13e4:	83 85       	ldd	r24, Z+11	; 0x0b
    13e6:	88 23       	and	r24, r24
    13e8:	69 f1       	breq	.+90     	; 0x1444 <__stack+0x345>
    13ea:	94 81       	ldd	r25, Z+4	; 0x04
    13ec:	92 95       	swap	r25
    13ee:	96 95       	lsr	r25
    13f0:	97 70       	andi	r25, 0x07	; 7
    13f2:	85 81       	ldd	r24, Z+5	; 0x05
    13f4:	88 0f       	add	r24, r24
    13f6:	88 0f       	add	r24, r24
    13f8:	88 0f       	add	r24, r24
    13fa:	89 0f       	add	r24, r25
    13fc:	80 93 f3 00 	sts	0x00F3, r24
    1400:	93 81       	ldd	r25, Z+3	; 0x03
    1402:	92 95       	swap	r25
    1404:	96 95       	lsr	r25
    1406:	97 70       	andi	r25, 0x07	; 7
    1408:	84 81       	ldd	r24, Z+4	; 0x04
    140a:	88 0f       	add	r24, r24
    140c:	88 0f       	add	r24, r24
    140e:	88 0f       	add	r24, r24
    1410:	89 0f       	add	r24, r25
    1412:	80 93 f2 00 	sts	0x00F2, r24
    1416:	92 81       	ldd	r25, Z+2	; 0x02
    1418:	92 95       	swap	r25
    141a:	96 95       	lsr	r25
    141c:	97 70       	andi	r25, 0x07	; 7
    141e:	83 81       	ldd	r24, Z+3	; 0x03
    1420:	88 0f       	add	r24, r24
    1422:	88 0f       	add	r24, r24
    1424:	88 0f       	add	r24, r24
    1426:	89 0f       	add	r24, r25
    1428:	80 93 f1 00 	sts	0x00F1, r24
    142c:	82 81       	ldd	r24, Z+2	; 0x02
    142e:	88 0f       	add	r24, r24
    1430:	88 0f       	add	r24, r24
    1432:	88 0f       	add	r24, r24
    1434:	80 93 f0 00 	sts	0x00F0, r24
    1438:	ef ee       	ldi	r30, 0xEF	; 239
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	80 61       	ori	r24, 0x10	; 16
    1440:	80 83       	st	Z, r24
    1442:	17 c0       	rjmp	.+46     	; 0x1472 <__stack+0x373>
          else              { Can_set_std_id(cmd->id.std);}
    1444:	82 81       	ldd	r24, Z+2	; 0x02
    1446:	86 95       	lsr	r24
    1448:	86 95       	lsr	r24
    144a:	86 95       	lsr	r24
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	b0 e2       	ldi	r27, 0x20	; 32
    1450:	9b 9f       	mul	r25, r27
    1452:	80 0d       	add	r24, r0
    1454:	11 24       	eor	r1, r1
    1456:	80 93 f3 00 	sts	0x00F3, r24
    145a:	f8 01       	movw	r30, r16
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	82 95       	swap	r24
    1460:	88 0f       	add	r24, r24
    1462:	80 7e       	andi	r24, 0xE0	; 224
    1464:	80 93 f2 00 	sts	0x00F2, r24
    1468:	ef ee       	ldi	r30, 0xEF	; 239
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8f 7e       	andi	r24, 0xEF	; 239
    1470:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1472:	d8 01       	movw	r26, r16
    1474:	16 96       	adiw	r26, 0x06	; 6
    1476:	8c 91       	ld	r24, X
    1478:	88 23       	and	r24, r24
    147a:	91 f0       	breq	.+36     	; 0x14a0 <__stack+0x3a1>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	2a ef       	ldi	r18, 0xFA	; 250
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	d8 01       	movw	r26, r16
    1484:	17 96       	adiw	r26, 0x07	; 7
    1486:	ed 91       	ld	r30, X+
    1488:	fc 91       	ld	r31, X
    148a:	18 97       	sbiw	r26, 0x08	; 8
    148c:	e8 0f       	add	r30, r24
    148e:	f1 1d       	adc	r31, r1
    1490:	90 81       	ld	r25, Z
    1492:	f9 01       	movw	r30, r18
    1494:	90 83       	st	Z, r25
    1496:	8f 5f       	subi	r24, 0xFF	; 255
    1498:	16 96       	adiw	r26, 0x06	; 6
    149a:	9c 91       	ld	r25, X
    149c:	89 17       	cp	r24, r25
    149e:	88 f3       	brcs	.-30     	; 0x1482 <__stack+0x383>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    14a0:	8f ef       	ldi	r24, 0xFF	; 255
    14a2:	9f ef       	ldi	r25, 0xFF	; 255
    14a4:	dc 01       	movw	r26, r24
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	ab 83       	std	Y+3, r26	; 0x03
    14ac:	bc 83       	std	Y+4, r27	; 0x04
    14ae:	80 93 f7 00 	sts	0x00F7, r24
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	92 95       	swap	r25
    14b6:	96 95       	lsr	r25
    14b8:	97 70       	andi	r25, 0x07	; 7
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 0f       	add	r24, r24
    14be:	88 0f       	add	r24, r24
    14c0:	88 0f       	add	r24, r24
    14c2:	89 0f       	add	r24, r25
    14c4:	80 93 f6 00 	sts	0x00F6, r24
    14c8:	99 81       	ldd	r25, Y+1	; 0x01
    14ca:	92 95       	swap	r25
    14cc:	96 95       	lsr	r25
    14ce:	97 70       	andi	r25, 0x07	; 7
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	88 0f       	add	r24, r24
    14d4:	88 0f       	add	r24, r24
    14d6:	88 0f       	add	r24, r24
    14d8:	89 0f       	add	r24, r25
    14da:	80 93 f5 00 	sts	0x00F5, r24
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	88 0f       	add	r24, r24
    14e2:	88 0f       	add	r24, r24
    14e4:	88 0f       	add	r24, r24
    14e6:	44 ef       	ldi	r20, 0xF4	; 244
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	da 01       	movw	r26, r20
    14ec:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    14ee:	ef ee       	ldi	r30, 0xEF	; 239
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	90 81       	ld	r25, Z
    14f4:	d8 01       	movw	r26, r16
    14f6:	16 96       	adiw	r26, 0x06	; 6
    14f8:	8c 91       	ld	r24, X
    14fa:	16 97       	sbiw	r26, 0x06	; 6
    14fc:	89 2b       	or	r24, r25
    14fe:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	1a 96       	adiw	r26, 0x0a	; 10
    1504:	8c 93       	st	X, r24
    1506:	da 01       	movw	r26, r20
    1508:	8c 91       	ld	r24, X
    150a:	84 60       	ori	r24, 0x04	; 4
    150c:	8c 93       	st	X, r24
    150e:	80 ef       	ldi	r24, 0xF0	; 240
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	dc 01       	movw	r26, r24
    1514:	2c 91       	ld	r18, X
    1516:	24 60       	ori	r18, 0x04	; 4
    1518:	2c 93       	st	X, r18
          Can_set_rplv();
    151a:	80 81       	ld	r24, Z
    151c:	80 62       	ori	r24, 0x20	; 32
    151e:	80 83       	st	Z, r24
          Can_set_idemsk();
    1520:	da 01       	movw	r26, r20
    1522:	8c 91       	ld	r24, X
    1524:	81 60       	ori	r24, 0x01	; 1
    1526:	8c 93       	st	X, r24
          Can_config_rx();       
    1528:	80 81       	ld	r24, Z
    152a:	8f 73       	andi	r24, 0x3F	; 63
    152c:	80 83       	st	Z, r24
    152e:	80 81       	ld	r24, Z
    1530:	80 68       	ori	r24, 0x80	; 128
    1532:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1534:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1536:	09 c0       	rjmp	.+18     	; 0x154a <__stack+0x44b>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1538:	f8 01       	movw	r30, r16
    153a:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    153c:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    153e:	05 c0       	rjmp	.+10     	; 0x154a <__stack+0x44b>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1540:	8f e1       	ldi	r24, 0x1F	; 31
    1542:	d8 01       	movw	r26, r16
    1544:	19 96       	adiw	r26, 0x09	; 9
    1546:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	08 95       	ret

0000155c <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    155c:	ef 92       	push	r14
    155e:	ff 92       	push	r15
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	ec 01       	movw	r28, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    1568:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    156a:	88 23       	and	r24, r24
    156c:	09 f4       	brne	.+2      	; 0x1570 <can_get_status+0x14>
    156e:	91 c0       	rjmp	.+290    	; 0x1692 <can_get_status+0x136>
    1570:	8f 31       	cpi	r24, 0x1F	; 31
    1572:	09 f4       	brne	.+2      	; 0x1576 <can_get_status+0x1a>
    1574:	90 c0       	rjmp	.+288    	; 0x1696 <can_get_status+0x13a>
    1576:	8f 3f       	cpi	r24, 0xFF	; 255
    1578:	09 f4       	brne	.+2      	; 0x157c <can_get_status+0x20>
    157a:	8f c0       	rjmp	.+286    	; 0x169a <can_get_status+0x13e>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    157c:	88 81       	ld	r24, Y
    157e:	82 95       	swap	r24
    1580:	80 7f       	andi	r24, 0xF0	; 240
    1582:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
    1586:	0e 94 88 02 	call	0x510	; 0x510 <can_get_mob_status>
    158a:	18 2f       	mov	r17, r24
    
    switch (a_status)
    158c:	80 32       	cpi	r24, 0x20	; 32
    158e:	59 f0       	breq	.+22     	; 0x15a6 <can_get_status+0x4a>
    1590:	20 f4       	brcc	.+8      	; 0x159a <can_get_status+0x3e>
    1592:	88 23       	and	r24, r24
    1594:	09 f4       	brne	.+2      	; 0x1598 <can_get_status+0x3c>
    1596:	83 c0       	rjmp	.+262    	; 0x169e <can_get_status+0x142>
    1598:	72 c0       	rjmp	.+228    	; 0x167e <can_get_status+0x122>
    159a:	80 34       	cpi	r24, 0x40	; 64
    159c:	09 f4       	brne	.+2      	; 0x15a0 <can_get_status+0x44>
    159e:	64 c0       	rjmp	.+200    	; 0x1668 <can_get_status+0x10c>
    15a0:	80 3a       	cpi	r24, 0xA0	; 160
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <can_get_status+0x4a>
    15a4:	6c c0       	rjmp	.+216    	; 0x167e <can_get_status+0x122>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    15a6:	0f 2e       	mov	r0, r31
    15a8:	ff ee       	ldi	r31, 0xEF	; 239
    15aa:	ef 2e       	mov	r14, r31
    15ac:	f1 2c       	mov	r15, r1
    15ae:	f0 2d       	mov	r31, r0
    15b0:	f7 01       	movw	r30, r14
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 70       	andi	r24, 0x0F	; 15
    15b6:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
    15b8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ba:	98 85       	ldd	r25, Y+8	; 0x08
    15bc:	0e 94 9e 02 	call	0x53c	; 0x53c <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    15c0:	80 91 f0 00 	lds	r24, 0x00F0
    15c4:	82 fb       	bst	r24, 2
    15c6:	88 27       	eor	r24, r24
    15c8:	80 f9       	bld	r24, 0
    15ca:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    15cc:	f7 01       	movw	r30, r14
    15ce:	80 81       	ld	r24, Z
    15d0:	84 ff       	sbrs	r24, 4
    15d2:	2d c0       	rjmp	.+90     	; 0x162e <can_get_status+0xd2>
            {
                cmd->ctrl.ide = 1; // extended frame
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    15d8:	e3 ef       	ldi	r30, 0xF3	; 243
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	86 95       	lsr	r24
    15e0:	86 95       	lsr	r24
    15e2:	86 95       	lsr	r24
    15e4:	8d 83       	std	Y+5, r24	; 0x05
    15e6:	a2 ef       	ldi	r26, 0xF2	; 242
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	8c 91       	ld	r24, X
    15ec:	90 81       	ld	r25, Z
    15ee:	86 95       	lsr	r24
    15f0:	86 95       	lsr	r24
    15f2:	86 95       	lsr	r24
    15f4:	f0 e2       	ldi	r31, 0x20	; 32
    15f6:	9f 9f       	mul	r25, r31
    15f8:	80 0d       	add	r24, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	8c 83       	std	Y+4, r24	; 0x04
    15fe:	e1 ef       	ldi	r30, 0xF1	; 241
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	9c 91       	ld	r25, X
    1606:	86 95       	lsr	r24
    1608:	86 95       	lsr	r24
    160a:	86 95       	lsr	r24
    160c:	20 e2       	ldi	r18, 0x20	; 32
    160e:	92 9f       	mul	r25, r18
    1610:	80 0d       	add	r24, r0
    1612:	11 24       	eor	r1, r1
    1614:	8b 83       	std	Y+3, r24	; 0x03
    1616:	80 91 f0 00 	lds	r24, 0x00F0
    161a:	90 81       	ld	r25, Z
    161c:	86 95       	lsr	r24
    161e:	86 95       	lsr	r24
    1620:	86 95       	lsr	r24
    1622:	e0 e2       	ldi	r30, 0x20	; 32
    1624:	9e 9f       	mul	r25, r30
    1626:	80 0d       	add	r24, r0
    1628:	11 24       	eor	r1, r1
    162a:	8a 83       	std	Y+2, r24	; 0x02
    162c:	13 c0       	rjmp	.+38     	; 0x1654 <can_get_status+0xf8>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    162e:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1630:	e3 ef       	ldi	r30, 0xF3	; 243
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	82 95       	swap	r24
    1638:	86 95       	lsr	r24
    163a:	87 70       	andi	r24, 0x07	; 7
    163c:	8b 83       	std	Y+3, r24	; 0x03
    163e:	80 91 f2 00 	lds	r24, 0x00F2
    1642:	90 81       	ld	r25, Z
    1644:	99 0f       	add	r25, r25
    1646:	99 0f       	add	r25, r25
    1648:	99 0f       	add	r25, r25
    164a:	82 95       	swap	r24
    164c:	86 95       	lsr	r24
    164e:	87 70       	andi	r24, 0x07	; 7
    1650:	89 0f       	add	r24, r25
    1652:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1654:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    1656:	ef ee       	ldi	r30, 0xEF	; 239
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8f 73       	andi	r24, 0x3F	; 63
    165e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1660:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1664:	80 e0       	ldi	r24, 0x00	; 0
            break;
    1666:	1c c0       	rjmp	.+56     	; 0x16a0 <can_get_status+0x144>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1668:	80 e4       	ldi	r24, 0x40	; 64
    166a:	89 87       	std	Y+9, r24	; 0x09
            Can_mob_abort();        // Freed the MOB
    166c:	ef ee       	ldi	r30, 0xEF	; 239
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	8f 73       	andi	r24, 0x3F	; 63
    1674:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1676:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
    167a:	80 e0       	ldi	r24, 0x00	; 0
            break;
    167c:	11 c0       	rjmp	.+34     	; 0x16a0 <can_get_status+0x144>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    167e:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    1680:	ef ee       	ldi	r30, 0xEF	; 239
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8f 73       	andi	r24, 0x3F	; 63
    1688:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    168a:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    168e:	82 e0       	ldi	r24, 0x02	; 2
            break;
    1690:	07 c0       	rjmp	.+14     	; 0x16a0 <can_get_status+0x144>
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <can_get_status+0x144>
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	03 c0       	rjmp	.+6      	; 0x16a0 <can_get_status+0x144>
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <can_get_status+0x144>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    169e:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	08 95       	ret

000016ac <GLCD_Rectangle>:
extern void GLCD_SetPixel(char x, char y, char color);

const char color = 1;

void GLCD_Rectangle(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	c8 2f       	mov	r28, r24
    16bc:	16 2f       	mov	r17, r22
    16be:	04 2f       	mov	r16, r20
    16c0:	d2 2e       	mov	r13, r18
  unsigned char j; // zmienna pomocnicza
  // rysowanie linii pionowych (boki)
  for (j = 0; j < a; j++) {
    16c2:	22 23       	and	r18, r18
    16c4:	a1 f0       	breq	.+40     	; 0x16ee <GLCD_Rectangle+0x42>
    16c6:	e2 2e       	mov	r14, r18
    16c8:	e6 0e       	add	r14, r22
    16ca:	d6 2f       	mov	r29, r22
		GLCD_SetPixel(x, y + j, color);
		GLCD_SetPixel(x + b - 1, y + j, color);
    16cc:	ff 24       	eor	r15, r15
    16ce:	fa 94       	dec	r15
    16d0:	f4 0e       	add	r15, r20
    16d2:	f8 0e       	add	r15, r24
void GLCD_Rectangle(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
  unsigned char j; // zmienna pomocnicza
  // rysowanie linii pionowych (boki)
  for (j = 0; j < a; j++) {
		GLCD_SetPixel(x, y + j, color);
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	6d 2f       	mov	r22, r29
    16d8:	8c 2f       	mov	r24, r28
    16da:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <GLCD_SetPixel>
		GLCD_SetPixel(x + b - 1, y + j, color);
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	6d 2f       	mov	r22, r29
    16e2:	8f 2d       	mov	r24, r15
    16e4:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <GLCD_SetPixel>
    16e8:	df 5f       	subi	r29, 0xFF	; 255

void GLCD_Rectangle(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
  unsigned char j; // zmienna pomocnicza
  // rysowanie linii pionowych (boki)
  for (j = 0; j < a; j++) {
    16ea:	de 11       	cpse	r29, r14
    16ec:	f3 cf       	rjmp	.-26     	; 0x16d4 <GLCD_Rectangle+0x28>
		GLCD_SetPixel(x, y + j, color);
		GLCD_SetPixel(x + b - 1, y + j, color);
	}
  // rysowanie linii poziomych (podstawy)
  for (j = 0; j < b; j++)	{
    16ee:	00 23       	and	r16, r16
    16f0:	89 f0       	breq	.+34     	; 0x1714 <GLCD_Rectangle+0x68>
    16f2:	0c 0f       	add	r16, r28
		GLCD_SetPixel(x + j, y, color);
		GLCD_SetPixel(x + j, y + a - 1, color);
    16f4:	df ef       	ldi	r29, 0xFF	; 255
    16f6:	d1 0f       	add	r29, r17
    16f8:	dd 0d       	add	r29, r13
		GLCD_SetPixel(x, y + j, color);
		GLCD_SetPixel(x + b - 1, y + j, color);
	}
  // rysowanie linii poziomych (podstawy)
  for (j = 0; j < b; j++)	{
		GLCD_SetPixel(x + j, y, color);
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	61 2f       	mov	r22, r17
    16fe:	8c 2f       	mov	r24, r28
    1700:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <GLCD_SetPixel>
		GLCD_SetPixel(x + j, y + a - 1, color);
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	6d 2f       	mov	r22, r29
    1708:	8c 2f       	mov	r24, r28
    170a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <GLCD_SetPixel>
    170e:	cf 5f       	subi	r28, 0xFF	; 255
  for (j = 0; j < a; j++) {
		GLCD_SetPixel(x, y + j, color);
		GLCD_SetPixel(x + b - 1, y + j, color);
	}
  // rysowanie linii poziomych (podstawy)
  for (j = 0; j < b; j++)	{
    1710:	c0 13       	cpse	r28, r16
    1712:	f3 cf       	rjmp	.-26     	; 0x16fa <GLCD_Rectangle+0x4e>
		GLCD_SetPixel(x + j, y, color);
		GLCD_SetPixel(x + j, y + a - 1, color);
	}
}
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	08 95       	ret

00001724 <GLCD_Rectangle_Full>:

void GLCD_Rectangle_Full(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	02 2f       	mov	r16, r18
  unsigned char j,i; // zmienna pomocnicza
  // rysowanie linii pionowych (boki)
  for(i=0; i < b; i++){
    1732:	44 23       	and	r20, r20
    1734:	b1 f0       	breq	.+44     	; 0x1762 <GLCD_Rectangle_Full+0x3e>
    1736:	f4 2e       	mov	r15, r20
    1738:	f8 0e       	add	r15, r24
    173a:	d8 2f       	mov	r29, r24
    173c:	12 2f       	mov	r17, r18
    173e:	16 0f       	add	r17, r22
	  for (j = 0; j < a; j++) {
    1740:	e6 2e       	mov	r14, r22
    1742:	0b c0       	rjmp	.+22     	; 0x175a <GLCD_Rectangle_Full+0x36>
			GLCD_SetPixel(x + i, y + j, color);
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	6c 2f       	mov	r22, r28
    1748:	8d 2f       	mov	r24, r29
    174a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <GLCD_SetPixel>
    174e:	cf 5f       	subi	r28, 0xFF	; 255
void GLCD_Rectangle_Full(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
  unsigned char j,i; // zmienna pomocnicza
  // rysowanie linii pionowych (boki)
  for(i=0; i < b; i++){
	  for (j = 0; j < a; j++) {
    1750:	c1 13       	cpse	r28, r17
    1752:	f8 cf       	rjmp	.-16     	; 0x1744 <GLCD_Rectangle_Full+0x20>
    1754:	df 5f       	subi	r29, 0xFF	; 255

void GLCD_Rectangle_Full(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
  unsigned char j,i; // zmienna pomocnicza
  // rysowanie linii pionowych (boki)
  for(i=0; i < b; i++){
    1756:	df 15       	cp	r29, r15
    1758:	21 f0       	breq	.+8      	; 0x1762 <GLCD_Rectangle_Full+0x3e>
	  for (j = 0; j < a; j++) {
    175a:	00 23       	and	r16, r16
    175c:	d9 f3       	breq	.-10     	; 0x1754 <GLCD_Rectangle_Full+0x30>
    175e:	ce 2d       	mov	r28, r14
    1760:	f1 cf       	rjmp	.-30     	; 0x1744 <GLCD_Rectangle_Full+0x20>
			GLCD_SetPixel(x + i, y + j, color);
		}
	}
}
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	08 95       	ret

00001770 <GLCD_Rectangle_Clear>:

void GLCD_Rectangle_Clear(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	02 2f       	mov	r16, r18
  unsigned char j,i; // zmienna pomocnicza
  // rysowanie linii pionowych (boki)
  for(i=0; i < b; i++){
    177e:	44 23       	and	r20, r20
    1780:	b1 f0       	breq	.+44     	; 0x17ae <GLCD_Rectangle_Clear+0x3e>
    1782:	f4 2e       	mov	r15, r20
    1784:	f8 0e       	add	r15, r24
    1786:	d8 2f       	mov	r29, r24
    1788:	12 2f       	mov	r17, r18
    178a:	16 0f       	add	r17, r22
	  for (j = 0; j < a; j++) {
    178c:	e6 2e       	mov	r14, r22
    178e:	0b c0       	rjmp	.+22     	; 0x17a6 <GLCD_Rectangle_Clear+0x36>
			GLCD_SetPixel(x + i, y + j, 0);
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	6c 2f       	mov	r22, r28
    1794:	8d 2f       	mov	r24, r29
    1796:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <GLCD_SetPixel>
    179a:	cf 5f       	subi	r28, 0xFF	; 255
void GLCD_Rectangle_Clear(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
  unsigned char j,i; // zmienna pomocnicza
  // rysowanie linii pionowych (boki)
  for(i=0; i < b; i++){
	  for (j = 0; j < a; j++) {
    179c:	c1 13       	cpse	r28, r17
    179e:	f8 cf       	rjmp	.-16     	; 0x1790 <GLCD_Rectangle_Clear+0x20>
    17a0:	df 5f       	subi	r29, 0xFF	; 255

void GLCD_Rectangle_Clear(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
  unsigned char j,i; // zmienna pomocnicza
  // rysowanie linii pionowych (boki)
  for(i=0; i < b; i++){
    17a2:	df 15       	cp	r29, r15
    17a4:	21 f0       	breq	.+8      	; 0x17ae <GLCD_Rectangle_Clear+0x3e>
	  for (j = 0; j < a; j++) {
    17a6:	00 23       	and	r16, r16
    17a8:	d9 f3       	breq	.-10     	; 0x17a0 <GLCD_Rectangle_Clear+0x30>
    17aa:	ce 2d       	mov	r28, r14
    17ac:	f1 cf       	rjmp	.-30     	; 0x1790 <GLCD_Rectangle_Clear+0x20>
			GLCD_SetPixel(x + i, y + j, 0);
		}
	}
}
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	08 95       	ret

000017bc <GLCD_InitializePorts>:
void GLCD_InitializePorts(void)
{

	

	DDR(SPI_MOSI_PORT) |= (1<<SPI_MOSI);
    17bc:	22 9a       	sbi	0x04, 2	; 4
	DDR(SPI_SCK_PORT) |= (1<<SPI_SCK);
    17be:	21 9a       	sbi	0x04, 1	; 4
	DDR(SPI_CS_PORT) |= (1<<SPI_CS);
    17c0:	20 9a       	sbi	0x04, 0	; 4
	DDR(SPI_A0_PORT) |= (1<<SPI_A0);
    17c2:	0f 9a       	sbi	0x01, 7	; 1
	DDR(SPI_MISO_PORT) &= ~(1<<SPI_MISO);
    17c4:	23 98       	cbi	0x04, 3	; 4
	CS_HIGH;
    17c6:	28 9a       	sbi	0x05, 0	; 5
	
	
	SPCR |= (1<<SPE) | (0<<DORD) |(1<<MSTR) | (1<<CPOL) |(1<<CPHA) | (1<<SPR1) |(0<<SPR0) | (0<<SPIE);
    17c8:	8c b5       	in	r24, 0x2c	; 44
    17ca:	8e 65       	ori	r24, 0x5E	; 94
    17cc:	8c bd       	out	0x2c, r24	; 44
	
	
	
	//SPSR & _BV(SPIF);
	xs=0;
    17ce:	10 92 5b 05 	sts	0x055B, r1
    17d2:	10 92 5a 05 	sts	0x055A, r1
	ys=0;
    17d6:	10 92 59 05 	sts	0x0559, r1
    17da:	10 92 58 05 	sts	0x0558, r1
    17de:	08 95       	ret

000017e0 <GLCD_WriteData>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteData(uint8_t dataToWrite)
{
	A0_HIGH;
    17e0:	17 9a       	sbi	0x02, 7	; 2
	CS_LOW;
    17e2:	28 98       	cbi	0x05, 0	; 5
	//_delay_us(50);
	SPDR = dataToWrite;
    17e4:	8e bd       	out	0x2e, r24	; 46
	while((SPSR & _BV(SPIF)) == 0);
    17e6:	0d b4       	in	r0, 0x2d	; 45
    17e8:	07 fe       	sbrs	r0, 7
    17ea:	fd cf       	rjmp	.-6      	; 0x17e6 <GLCD_WriteData+0x6>
	CS_HIGH;
    17ec:	28 9a       	sbi	0x05, 0	; 5
	LCD[(ys*132)+(xs)]=dataToWrite;
    17ee:	40 91 58 05 	lds	r20, 0x0558
    17f2:	50 91 59 05 	lds	r21, 0x0559
    17f6:	20 91 5a 05 	lds	r18, 0x055A
    17fa:	30 91 5b 05 	lds	r19, 0x055B
    17fe:	94 e8       	ldi	r25, 0x84	; 132
    1800:	94 9f       	mul	r25, r20
    1802:	f0 01       	movw	r30, r0
    1804:	95 9f       	mul	r25, r21
    1806:	f0 0d       	add	r31, r0
    1808:	11 24       	eor	r1, r1
    180a:	e2 0f       	add	r30, r18
    180c:	f3 1f       	adc	r31, r19
    180e:	ec 5c       	subi	r30, 0xCC	; 204
    1810:	fe 4f       	sbci	r31, 0xFE	; 254
    1812:	80 83       	st	Z, r24
    if(xs<132)
    1814:	80 91 5a 05 	lds	r24, 0x055A
    1818:	90 91 5b 05 	lds	r25, 0x055B
    181c:	84 38       	cpi	r24, 0x84	; 132
    181e:	91 05       	cpc	r25, r1
    1820:	48 f4       	brcc	.+18     	; 0x1834 <GLCD_WriteData+0x54>
        xs++;
    1822:	80 91 5a 05 	lds	r24, 0x055A
    1826:	90 91 5b 05 	lds	r25, 0x055B
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	90 93 5b 05 	sts	0x055B, r25
    1830:	80 93 5a 05 	sts	0x055A, r24
    1834:	08 95       	ret

00001836 <GLCD_WriteCommand>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteCommand(uint8_t commandToWrite)
{
	A0_LOW;
    1836:	17 98       	cbi	0x02, 7	; 2
	CS_LOW;
    1838:	28 98       	cbi	0x05, 0	; 5
	//_delay_us(50);
	SPDR = commandToWrite;
    183a:	8e bd       	out	0x2e, r24	; 46
	while((SPSR & _BV(SPIF)) == 0);
    183c:	0d b4       	in	r0, 0x2d	; 45
    183e:	07 fe       	sbrs	r0, 7
    1840:	fd cf       	rjmp	.-6      	; 0x183c <GLCD_WriteCommand+0x6>
	CS_HIGH;
    1842:	28 9a       	sbi	0x05, 0	; 5
    1844:	08 95       	ret

00001846 <Tab_GoTo>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void Tab_GoTo(unsigned char x1, unsigned char y1)
{
    xs=x1;
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	90 93 5b 05 	sts	0x055B, r25
    184c:	80 93 5a 05 	sts	0x055A, r24
    ys=y1;
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	70 93 59 05 	sts	0x0559, r23
    1856:	60 93 58 05 	sts	0x0558, r22
    185a:	08 95       	ret

0000185c <GLCD_ReadData>:
}

unsigned char GLCD_ReadData(void)
{
    return LCD[(ys*132)+xs];
    185c:	20 91 58 05 	lds	r18, 0x0558
    1860:	30 91 59 05 	lds	r19, 0x0559
    1864:	80 91 5a 05 	lds	r24, 0x055A
    1868:	90 91 5b 05 	lds	r25, 0x055B
    186c:	44 e8       	ldi	r20, 0x84	; 132
    186e:	42 9f       	mul	r20, r18
    1870:	f0 01       	movw	r30, r0
    1872:	43 9f       	mul	r20, r19
    1874:	f0 0d       	add	r31, r0
    1876:	11 24       	eor	r1, r1
    1878:	e8 0f       	add	r30, r24
    187a:	f9 1f       	adc	r31, r25
    187c:	ec 5c       	subi	r30, 0xCC	; 204
    187e:	fe 4f       	sbci	r31, 0xFE	; 254
    1880:	80 81       	ld	r24, Z
}
    1882:	08 95       	ret

00001884 <GLCD_Get_x>:

uint16_t GLCD_Get_x(void){
	return xs;
    1884:	80 91 5a 05 	lds	r24, 0x055A
    1888:	90 91 5b 05 	lds	r25, 0x055B
}
    188c:	08 95       	ret

0000188e <GLCD_Get_y>:

uint16_t GLCD_Get_y(void){
	return ys;
    188e:	80 91 58 05 	lds	r24, 0x0558
    1892:	90 91 59 05 	lds	r25, 0x0559
}
    1896:	08 95       	ret

00001898 <GLCD_Initialize>:
//
//-------------------------------------------------------------------------------------------------
void GLCD_Initialize(void)
{

GLCD_InitializePorts();
    1898:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GLCD_InitializePorts>

GLCD_WriteCommand(SPLC501C_ADC_REVERSE);					
    189c:	81 ea       	ldi	r24, 0xA1	; 161
    189e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(SPLC501C_COM0);	
    18a2:	80 ec       	ldi	r24, 0xC0	; 192
    18a4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>

GLCD_WriteCommand(SPLC501C_BIAS_19);						
    18a8:	82 ea       	ldi	r24, 0xA2	; 162
    18aa:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(SPLC501C_POWERON);						
    18ae:	8f e2       	ldi	r24, 0x2F	; 47
    18b0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18b4:	88 ec       	ldi	r24, 0xC8	; 200
    18b6:	8a 95       	dec	r24
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <GLCD_Initialize+0x1e>
    18ba:	88 ec       	ldi	r24, 0xC8	; 200
    18bc:	8a 95       	dec	r24
    18be:	f1 f7       	brne	.-4      	; 0x18bc <GLCD_Initialize+0x24>
    18c0:	88 ec       	ldi	r24, 0xC8	; 200
    18c2:	8a 95       	dec	r24
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <GLCD_Initialize+0x2a>
    18c6:	88 ec       	ldi	r24, 0xC8	; 200
    18c8:	8a 95       	dec	r24
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <GLCD_Initialize+0x30>
    18cc:	88 ec       	ldi	r24, 0xC8	; 200
    18ce:	8a 95       	dec	r24
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <GLCD_Initialize+0x36>
    18d2:	88 ec       	ldi	r24, 0xC8	; 200
    18d4:	8a 95       	dec	r24
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <GLCD_Initialize+0x3c>
    18d8:	88 ec       	ldi	r24, 0xC8	; 200
    18da:	8a 95       	dec	r24
    18dc:	f1 f7       	brne	.-4      	; 0x18da <GLCD_Initialize+0x42>
    18de:	88 ec       	ldi	r24, 0xC8	; 200
    18e0:	8a 95       	dec	r24
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <GLCD_Initialize+0x48>
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	8a 95       	dec	r24
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <GLCD_Initialize+0x4e>
    18ea:	88 ec       	ldi	r24, 0xC8	; 200
    18ec:	8a 95       	dec	r24
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <GLCD_Initialize+0x54>
_delay_us(50);
_delay_us(50);
_delay_us(50);
_delay_us(50);
_delay_us(50);
GLCD_WriteCommand(SPLC501C_VOLUME_MODE);						
    18f0:	81 e8       	ldi	r24, 0x81	; 129
    18f2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(SPLC501C_VOLUME_SET | 20);
    18f6:	84 e1       	ldi	r24, 0x14	; 20
    18f8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(0xA4);						
    18fc:	84 ea       	ldi	r24, 0xA4	; 164
    18fe:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(SPLC501C_DISPLAY_ON);						
    1902:	8f ea       	ldi	r24, 0xAF	; 175
    1904:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(SPLC501C_DISPLAY_NORMAL);		
    1908:	86 ea       	ldi	r24, 0xA6	; 166
    190a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(SPLC501C_PAGE_ADDRESS | 0);
    190e:	80 eb       	ldi	r24, 0xB0	; 176
    1910:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(SPLC501C_COLUMN_ADDRESS_HI | 0);		
    1914:	80 e1       	ldi	r24, 0x10	; 16
    1916:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(SPLC501C_COLUMN_ADDRESS_LO | 0);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(SPLC501C_START_LINE | 0);	
    1920:	80 e4       	ldi	r24, 0x40	; 64
    1922:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
    1926:	08 95       	ret

00001928 <GLCD_GoTo>:
}
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_GoTo(unsigned char x, unsigned char y)
{
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	c8 2f       	mov	r28, r24
    192e:	d6 2f       	mov	r29, r22
GLCD_WriteCommand(SPLC501C_COLUMN_ADDRESS_HI | (x >> 4));
    1930:	82 95       	swap	r24
    1932:	8f 70       	andi	r24, 0x0F	; 15
    1934:	80 61       	ori	r24, 0x10	; 16
    1936:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(SPLC501C_COLUMN_ADDRESS_LO | (x & 0x0F));
    193a:	8c 2f       	mov	r24, r28
    193c:	8f 70       	andi	r24, 0x0F	; 15
    193e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
GLCD_WriteCommand(SPLC501C_PAGE_ADDRESS | y);
    1942:	8d 2f       	mov	r24, r29
    1944:	80 6b       	ori	r24, 0xB0	; 176
    1946:	0e 94 1b 0c 	call	0x1836	; 0x1836 <GLCD_WriteCommand>
Tab_GoTo(x,y);
    194a:	6d 2f       	mov	r22, r29
    194c:	8c 2f       	mov	r24, r28
    194e:	0e 94 23 0c 	call	0x1846	; 0x1846 <Tab_GoTo>
}
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	08 95       	ret

00001958 <GLCD_ClearScreen>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_ClearScreen(void)
{
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
unsigned char x = 0, y = 0;
for(y = 0; y < (SCREEN_HEIGHT/PIXELS_PER_PAGE); y++)
    195e:	d0 e0       	ldi	r29, 0x00	; 0
	{
	GLCD_GoTo(0,y);
    1960:	14 e8       	ldi	r17, 0x84	; 132
    1962:	6d 2f       	mov	r22, r29
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
    196a:	c1 2f       	mov	r28, r17
	for(x = 0; x < SCREEN_WIDTH; x++)
		{
		GLCD_WriteData(0);
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <GLCD_WriteData>
    1972:	c1 50       	subi	r28, 0x01	; 1
{
unsigned char x = 0, y = 0;
for(y = 0; y < (SCREEN_HEIGHT/PIXELS_PER_PAGE); y++)
	{
	GLCD_GoTo(0,y);
	for(x = 0; x < SCREEN_WIDTH; x++)
    1974:	d9 f7       	brne	.-10     	; 0x196c <GLCD_ClearScreen+0x14>
//
//-------------------------------------------------------------------------------------------------
void GLCD_ClearScreen(void)
{
unsigned char x = 0, y = 0;
for(y = 0; y < (SCREEN_HEIGHT/PIXELS_PER_PAGE); y++)
    1976:	df 5f       	subi	r29, 0xFF	; 255
    1978:	d8 30       	cpi	r29, 0x08	; 8
    197a:	99 f7       	brne	.-26     	; 0x1962 <GLCD_ClearScreen+0xa>
	for(x = 0; x < SCREEN_WIDTH; x++)
		{
		GLCD_WriteData(0);
		}
	}
}		
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	08 95       	ret

00001984 <GLCD_WriteChar>:
// Function : GLCD_WriteChar
// Artuments : Char ASCII code
// Return value : none
//-------------------------------------------------------------------------------------------------
void GLCD_WriteChar(char charCode)
{
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
unsigned char fontCollumn;
for(fontCollumn = 0; fontCollumn < FONT_WIDTH; fontCollumn++)
  GLCD_WriteData(pgm_read_byte(&font5x7[((charCode- FONT_OFFSET) * FONT_WIDTH) + fontCollumn]));
    198c:	08 2f       	mov	r16, r24
    198e:	10 e0       	ldi	r17, 0x00	; 0
    1990:	00 52       	subi	r16, 0x20	; 32
    1992:	11 09       	sbc	r17, r1
    1994:	c8 01       	movw	r24, r16
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	08 0f       	add	r16, r24
    19a0:	19 1f       	adc	r17, r25
    19a2:	c0 e0       	ldi	r28, 0x00	; 0
    19a4:	d0 e0       	ldi	r29, 0x00	; 0
    19a6:	0f 53       	subi	r16, 0x3F	; 63
    19a8:	1e 4f       	sbci	r17, 0xFE	; 254
    19aa:	f8 01       	movw	r30, r16
    19ac:	ec 0f       	add	r30, r28
    19ae:	fd 1f       	adc	r31, r29
    19b0:	84 91       	lpm	r24, Z
    19b2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <GLCD_WriteData>
    19b6:	21 96       	adiw	r28, 0x01	; 1
// Return value : none
//-------------------------------------------------------------------------------------------------
void GLCD_WriteChar(char charCode)
{
unsigned char fontCollumn;
for(fontCollumn = 0; fontCollumn < FONT_WIDTH; fontCollumn++)
    19b8:	c5 30       	cpi	r28, 0x05	; 5
    19ba:	d1 05       	cpc	r29, r1
    19bc:	b1 f7       	brne	.-20     	; 0x19aa <GLCD_WriteChar+0x26>
  GLCD_WriteData(pgm_read_byte(&font5x7[((charCode- FONT_OFFSET) * FONT_WIDTH) + fontCollumn]));
GLCD_WriteData(0);
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <GLCD_WriteData>
}
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	08 95       	ret

000019ce <GLCD_WriteString_progmem>:
// Function : GLCD_WriteString
// Arguments : pointer to null-terminated ASCII string
// Return value : none
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString_progmem(const char * string)
{
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
	char bufor;
	while(bufor = pgm_read_byte(string++))
    19d2:	ec 01       	movw	r28, r24
    19d4:	21 96       	adiw	r28, 0x01	; 1
    19d6:	fc 01       	movw	r30, r24
    19d8:	84 91       	lpm	r24, Z
    19da:	88 23       	and	r24, r24
    19dc:	39 f0       	breq	.+14     	; 0x19ec <GLCD_WriteString_progmem+0x1e>
  {
  GLCD_WriteChar(bufor);
    19de:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
// Return value : none
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString_progmem(const char * string)
{
	char bufor;
	while(bufor = pgm_read_byte(string++))
    19e2:	fe 01       	movw	r30, r28
    19e4:	84 91       	lpm	r24, Z
    19e6:	21 96       	adiw	r28, 0x01	; 1
    19e8:	81 11       	cpse	r24, r1
    19ea:	f9 cf       	rjmp	.-14     	; 0x19de <GLCD_WriteString_progmem+0x10>
  {
  GLCD_WriteChar(bufor);
  }
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret

000019f2 <GLCD_WriteString>:

void GLCD_WriteString(char * string)
{
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	ec 01       	movw	r28, r24
while(*string)
    19f8:	88 81       	ld	r24, Y
    19fa:	88 23       	and	r24, r24
    19fc:	31 f0       	breq	.+12     	; 0x1a0a <GLCD_WriteString+0x18>
    19fe:	21 96       	adiw	r28, 0x01	; 1
  {
  GLCD_WriteChar(*string++);
    1a00:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
  }
}

void GLCD_WriteString(char * string)
{
while(*string)
    1a04:	89 91       	ld	r24, Y+
    1a06:	81 11       	cpse	r24, r1
    1a08:	fb cf       	rjmp	.-10     	; 0x1a00 <GLCD_WriteString+0xe>
  {
  GLCD_WriteChar(*string++);
  }
}
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	08 95       	ret

00001a10 <GLCD_SetPixel>:
// Function : GLCD_SetPixel
// Arguments : x-location, y-location, color (0 or 1)
// Return value : None
//-------------------------------------------------------------------------------------------------
void GLCD_SetPixel(int x, int y, int color)
{
    1a10:	df 92       	push	r13
    1a12:	ef 92       	push	r14
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	7a 01       	movw	r14, r20
unsigned char temp = 0;
y= y%64;
    1a20:	6f 73       	andi	r22, 0x3F	; 63
    1a22:	70 78       	andi	r23, 0x80	; 128
    1a24:	77 23       	and	r23, r23
    1a26:	34 f4       	brge	.+12     	; 0x1a34 <GLCD_SetPixel+0x24>
    1a28:	61 50       	subi	r22, 0x01	; 1
    1a2a:	71 09       	sbc	r23, r1
    1a2c:	60 6c       	ori	r22, 0xC0	; 192
    1a2e:	7f 6f       	ori	r23, 0xFF	; 255
    1a30:	6f 5f       	subi	r22, 0xFF	; 255
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	8b 01       	movw	r16, r22
x= x%132;  
GLCD_GoTo(x, (y/8)); 
    1a36:	eb 01       	movw	r28, r22
    1a38:	77 23       	and	r23, r23
    1a3a:	0c f4       	brge	.+2      	; 0x1a3e <GLCD_SetPixel+0x2e>
    1a3c:	27 96       	adiw	r28, 0x07	; 7
    1a3e:	d5 95       	asr	r29
    1a40:	c7 95       	ror	r28
    1a42:	d5 95       	asr	r29
    1a44:	c7 95       	ror	r28
    1a46:	d5 95       	asr	r29
    1a48:	c7 95       	ror	r28
//-------------------------------------------------------------------------------------------------
void GLCD_SetPixel(int x, int y, int color)
{
unsigned char temp = 0;
y= y%64;
x= x%132;  
    1a4a:	64 e8       	ldi	r22, 0x84	; 132
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__divmodhi4>
    1a52:	d8 2e       	mov	r13, r24
GLCD_GoTo(x, (y/8)); 
    1a54:	6c 2f       	mov	r22, r28
    1a56:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
temp = GLCD_ReadData(); 
    1a5a:	0e 94 2e 0c 	call	0x185c	; 0x185c <GLCD_ReadData>
if(color)
    1a5e:	ef 28       	or	r14, r15
    1a60:	a9 f0       	breq	.+42     	; 0x1a8c <GLCD_SetPixel+0x7c>
  temp |= (1 << (y % 8));
    1a62:	07 70       	andi	r16, 0x07	; 7
    1a64:	10 78       	andi	r17, 0x80	; 128
    1a66:	11 23       	and	r17, r17
    1a68:	34 f4       	brge	.+12     	; 0x1a76 <GLCD_SetPixel+0x66>
    1a6a:	01 50       	subi	r16, 0x01	; 1
    1a6c:	11 09       	sbc	r17, r1
    1a6e:	08 6f       	ori	r16, 0xF8	; 248
    1a70:	1f 6f       	ori	r17, 0xFF	; 255
    1a72:	0f 5f       	subi	r16, 0xFF	; 255
    1a74:	1f 4f       	sbci	r17, 0xFF	; 255
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	9a 01       	movw	r18, r20
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <GLCD_SetPixel+0x72>
    1a7e:	22 0f       	add	r18, r18
    1a80:	33 1f       	adc	r19, r19
    1a82:	0a 95       	dec	r16
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <GLCD_SetPixel+0x6e>
    1a86:	08 2f       	mov	r16, r24
    1a88:	02 2b       	or	r16, r18
    1a8a:	15 c0       	rjmp	.+42     	; 0x1ab6 <GLCD_SetPixel+0xa6>
else
  temp &= ~(1 << (y % 8));
    1a8c:	07 70       	andi	r16, 0x07	; 7
    1a8e:	10 78       	andi	r17, 0x80	; 128
    1a90:	11 23       	and	r17, r17
    1a92:	34 f4       	brge	.+12     	; 0x1aa0 <GLCD_SetPixel+0x90>
    1a94:	01 50       	subi	r16, 0x01	; 1
    1a96:	11 09       	sbc	r17, r1
    1a98:	08 6f       	ori	r16, 0xF8	; 248
    1a9a:	1f 6f       	ori	r17, 0xFF	; 255
    1a9c:	0f 5f       	subi	r16, 0xFF	; 255
    1a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa0:	21 e0       	ldi	r18, 0x01	; 1
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	a9 01       	movw	r20, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <GLCD_SetPixel+0x9c>
    1aa8:	44 0f       	add	r20, r20
    1aaa:	55 1f       	adc	r21, r21
    1aac:	0a 95       	dec	r16
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <GLCD_SetPixel+0x98>
    1ab0:	8a 01       	movw	r16, r20
    1ab2:	00 95       	com	r16
    1ab4:	08 23       	and	r16, r24
GLCD_GoTo(x, (y/8)); 
    1ab6:	6c 2f       	mov	r22, r28
    1ab8:	8d 2d       	mov	r24, r13
    1aba:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
GLCD_WriteData(temp); 
    1abe:	80 2f       	mov	r24, r16
    1ac0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <GLCD_WriteData>
}
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	08 95       	ret

00001ad4 <GLCD_voltage>:
    GLCD_WriteData(*(bitmap++)); 
  }
}

void GLCD_voltage(int val)
{
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	27 97       	sbiw	r28, 0x07	; 7
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1aee:	4a e0       	ldi	r20, 0x0A	; 10
    1af0:	be 01       	movw	r22, r28
    1af2:	6f 5f       	subi	r22, 0xFF	; 255
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__itoa_ncheck>
	char bufor[7];
	char *str = bufor;
	itoa(val, bufor, 10);
	//czêæ dziesiêtna i kropka
	if(val<100){
    1afa:	04 36       	cpi	r16, 0x64	; 100
    1afc:	11 05       	cpc	r17, r1
    1afe:	7c f4       	brge	.+30     	; 0x1b1e <GLCD_voltage+0x4a>
		GLCD_WriteChar('0');
    1b00:	80 e3       	ldi	r24, 0x30	; 48
    1b02:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
		GLCD_WriteChar('0');
    1b06:	80 e3       	ldi	r24, 0x30	; 48
    1b08:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
		GLCD_WriteChar('.');
    1b0c:	8e e2       	ldi	r24, 0x2E	; 46
    1b0e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
}

void GLCD_voltage(int val)
{
	char bufor[7];
	char *str = bufor;
    1b12:	fe 01       	movw	r30, r28
    1b14:	31 96       	adiw	r30, 0x01	; 1
		GLCD_WriteChar(*str++);
		GLCD_WriteChar(*str++);
		GLCD_WriteChar('.');
	}
	//czesc za przecinkiem
	while(*str){
    1b16:	80 81       	ld	r24, Z
    1b18:	81 11       	cpse	r24, r1
    1b1a:	1c c0       	rjmp	.+56     	; 0x1b54 <GLCD_voltage+0x80>
    1b1c:	25 c0       	rjmp	.+74     	; 0x1b68 <GLCD_voltage+0x94>
	if(val<100){
		GLCD_WriteChar('0');
		GLCD_WriteChar('0');
		GLCD_WriteChar('.');
	}
	else if(val<1000){
    1b1e:	08 3e       	cpi	r16, 0xE8	; 232
    1b20:	13 40       	sbci	r17, 0x03	; 3
    1b22:	64 f4       	brge	.+24     	; 0x1b3c <GLCD_voltage+0x68>
		GLCD_WriteChar('0');
    1b24:	80 e3       	ldi	r24, 0x30	; 48
    1b26:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
		GLCD_WriteChar(*str++);
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
		GLCD_WriteChar('.');
    1b30:	8e e2       	ldi	r24, 0x2E	; 46
    1b32:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
		GLCD_WriteChar('0');
		GLCD_WriteChar('.');
	}
	else if(val<1000){
		GLCD_WriteChar('0');
		GLCD_WriteChar(*str++);
    1b36:	fe 01       	movw	r30, r28
    1b38:	32 96       	adiw	r30, 0x02	; 2
    1b3a:	ed cf       	rjmp	.-38     	; 0x1b16 <GLCD_voltage+0x42>
		GLCD_WriteChar('.');
	}
	else{
		GLCD_WriteChar(*str++);
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
		GLCD_WriteChar(*str++);
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
		GLCD_WriteChar('.');
    1b48:	8e e2       	ldi	r24, 0x2E	; 46
    1b4a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
		GLCD_WriteChar(*str++);
		GLCD_WriteChar('.');
	}
	else{
		GLCD_WriteChar(*str++);
		GLCD_WriteChar(*str++);
    1b4e:	fe 01       	movw	r30, r28
    1b50:	33 96       	adiw	r30, 0x03	; 3
    1b52:	e1 cf       	rjmp	.-62     	; 0x1b16 <GLCD_voltage+0x42>
    1b54:	8f 01       	movw	r16, r30
    1b56:	0f 5f       	subi	r16, 0xFF	; 255
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
		GLCD_WriteChar('.');
	}
	//czesc za przecinkiem
	while(*str){
		GLCD_WriteChar(*str++);
    1b5a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <GLCD_WriteChar>
		GLCD_WriteChar(*str++);
		GLCD_WriteChar(*str++);
		GLCD_WriteChar('.');
	}
	//czesc za przecinkiem
	while(*str){
    1b5e:	f8 01       	movw	r30, r16
    1b60:	81 91       	ld	r24, Z+
    1b62:	8f 01       	movw	r16, r30
    1b64:	81 11       	cpse	r24, r1
    1b66:	f9 cf       	rjmp	.-14     	; 0x1b5a <GLCD_voltage+0x86>
		GLCD_WriteChar(*str++);
	}
}
    1b68:	27 96       	adiw	r28, 0x07	; 7
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	08 95       	ret

00001b7e <GLCD_dec>:
		GLCD_WriteChar(*str++);
		GLCD_WriteChar(*str++);
	}
}

void GLCD_dec(int val){
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	27 97       	sbiw	r28, 0x07	; 7
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	4a e0       	ldi	r20, 0x0A	; 10
    1b94:	be 01       	movw	r22, r28
    1b96:	6f 5f       	subi	r22, 0xFF	; 255
    1b98:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__itoa_ncheck>
	char bufor[7];
	GLCD_WriteString(itoa(val, bufor, 10));
    1b9e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <GLCD_WriteString>
}
    1ba2:	27 96       	adiw	r28, 0x07	; 7
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <GLCD_clear>:

void GLCD_clear(uint8_t clear){
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	d8 2f       	mov	r29, r24
	uint8_t i;
	for(i=0 ; i<clear ; i++)
    1bba:	88 23       	and	r24, r24
    1bbc:	41 f0       	breq	.+16     	; 0x1bce <GLCD_clear+0x1a>
    1bbe:	c0 e0       	ldi	r28, 0x00	; 0
		GLCD_WriteString(" ");
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	91 e0       	ldi	r25, 0x01	; 1
    1bc4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <GLCD_WriteString>
	GLCD_WriteString(itoa(val, bufor, 10));
}

void GLCD_clear(uint8_t clear){
	uint8_t i;
	for(i=0 ; i<clear ; i++)
    1bc8:	cf 5f       	subi	r28, 0xFF	; 255
    1bca:	cd 13       	cpse	r28, r29
    1bcc:	f9 cf       	rjmp	.-14     	; 0x1bc0 <GLCD_clear+0xc>
		GLCD_WriteString(" ");
	GLCD_GoTo(GLCD_Get_x()-(clear*7), GLCD_Get_y());
    1bce:	0e 94 47 0c 	call	0x188e	; 0x188e <GLCD_Get_y>
    1bd2:	c8 2f       	mov	r28, r24
    1bd4:	0e 94 42 0c 	call	0x1884	; 0x1884 <GLCD_Get_x>
    1bd8:	6c 2f       	mov	r22, r28
    1bda:	97 e0       	ldi	r25, 0x07	; 7
    1bdc:	d9 9f       	mul	r29, r25
    1bde:	80 19       	sub	r24, r0
    1be0:	11 24       	eor	r1, r1
    1be2:	0e 94 94 0c 	call	0x1928	; 0x1928 <GLCD_GoTo>
}
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	08 95       	ret

00001bec <Init_RTC>:
static volatile uint8_t new_tick=0; // jeli 1 to znaczy ¿e w tej interacji nowy tick - up³yne³o 7,8125 ms
static volatile uint16_t rpm_timer=0;

void Init_RTC(void){ //real time clock
	//praca asynhroniczna
    ASSR |= (1<<AS2);
    1bec:	e6 eb       	ldi	r30, 0xB6	; 182
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	88 60       	ori	r24, 0x08	; 8
    1bf4:	80 83       	st	Z, r24
	//0		1		1	- clk/32
	//1		0		0	- clk/64
	//1		0		1	- clk/128
	//1		1		0	- clk/256
	//1		1		1	- clk/1024
	    TCCR2A |= (0<<WGM20)|(0<<WGM21)|(0<<CS22)|(0<<CS21)|(1<<CS20);
    1bf6:	e0 eb       	ldi	r30, 0xB0	; 176
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	81 60       	ori	r24, 0x01	; 1
    1bfe:	80 83       	st	Z, r24
	//w³aczenie zg³aszania przerwania przy przepe³nieniu
    TIMSK2 |= (1<<TOIE2);
    1c00:	e0 e7       	ldi	r30, 0x70	; 112
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	81 60       	ori	r24, 0x01	; 1
    1c08:	80 83       	st	Z, r24
	//kierunki portów dla zewn kwarcu
	DDRG |= (1<<3) | (1<<4);
    1c0a:	83 b3       	in	r24, 0x13	; 19
    1c0c:	88 61       	ori	r24, 0x18	; 24
    1c0e:	83 bb       	out	0x13, r24	; 19
    1c10:	08 95       	ret

00001c12 <Get_timer>:
		
		
}
//funkcja zwraca akutaln¹ wartoc timera RTC
inline uint16_t Get_timer(){
	return timer;
    1c12:	80 91 56 05 	lds	r24, 0x0556
    1c16:	90 91 57 05 	lds	r25, 0x0557
}
    1c1a:	08 95       	ret

00001c1c <Time_elapsed>:
		
		
}
//funkcja zwraca akutaln¹ wartoc timera RTC
inline uint16_t Get_timer(){
	return timer;
    1c1c:	20 91 56 05 	lds	r18, 0x0556
    1c20:	30 91 57 05 	lds	r19, 0x0557
//zwraca czas w [1,3ms] jaki czas up³yn¹³ od wartoci podanej jako argument (argument czas timera)
//Mierzy czas do 8,5 minuty!! potem siê przewija licznik!!
uint8_t Time_elapsed(uint16_t time_stamp){
	uint16_t current_timer=Get_timer();
	
	if( current_timer >= time_stamp){
    1c24:	28 17       	cp	r18, r24
    1c26:	39 07       	cpc	r19, r25
    1c28:	20 f0       	brcs	.+8      	; 0x1c32 <Time_elapsed+0x16>
		return (current_timer-time_stamp);
    1c2a:	42 2f       	mov	r20, r18
    1c2c:	48 1b       	sub	r20, r24
    1c2e:	84 2f       	mov	r24, r20
    1c30:	08 95       	ret
	}
	else{
		return (current_timer+(0xFFFF-time_stamp));
    1c32:	21 50       	subi	r18, 0x01	; 1
    1c34:	28 1b       	sub	r18, r24
    1c36:	82 2f       	mov	r24, r18
	}
}
    1c38:	08 95       	ret

00001c3a <__vector_10>:
	return rpm;
}



SIGNAL(SIG_OVERFLOW2) {
    1c3a:	1f 92       	push	r1
    1c3c:	0f 92       	push	r0
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	0f 92       	push	r0
    1c42:	11 24       	eor	r1, r1
    1c44:	8f 93       	push	r24
    1c46:	9f 93       	push	r25
	//zwiêksz TIMER
	timer++;
    1c48:	80 91 56 05 	lds	r24, 0x0556
    1c4c:	90 91 57 05 	lds	r25, 0x0557
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	90 93 57 05 	sts	0x0557, r25
    1c56:	80 93 56 05 	sts	0x0556, r24
}
    1c5a:	9f 91       	pop	r25
    1c5c:	8f 91       	pop	r24
    1c5e:	0f 90       	pop	r0
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	0f 90       	pop	r0
    1c64:	1f 90       	pop	r1
    1c66:	18 95       	reti

00001c68 <__vector_11>:

SIGNAL(SIG_INPUT_CAPTURE1){
    1c68:	1f 92       	push	r1
    1c6a:	0f 92       	push	r0
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	0f 92       	push	r0
    1c70:	11 24       	eor	r1, r1
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
	
	TCNT1 = 0x0000;
    1c76:	10 92 85 00 	sts	0x0085, r1
    1c7a:	10 92 84 00 	sts	0x0084, r1
	rpm_timer=ICR1;
    1c7e:	80 91 86 00 	lds	r24, 0x0086
    1c82:	90 91 87 00 	lds	r25, 0x0087
    1c86:	90 93 55 05 	sts	0x0555, r25
    1c8a:	80 93 54 05 	sts	0x0554, r24

};
    1c8e:	9f 91       	pop	r25
    1c90:	8f 91       	pop	r24
    1c92:	0f 90       	pop	r0
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	0f 90       	pop	r0
    1c98:	1f 90       	pop	r1
    1c9a:	18 95       	reti

00001c9c <__vector_15>:

SIGNAL(SIG_OVERFLOW1){
    1c9c:	1f 92       	push	r1
    1c9e:	0f 92       	push	r0
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	0f 92       	push	r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	8f 93       	push	r24
    1ca8:	9f 93       	push	r25
	rpm_timer = 1;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	90 93 55 05 	sts	0x0555, r25
    1cb2:	80 93 54 05 	sts	0x0554, r24
};
    1cb6:	9f 91       	pop	r25
    1cb8:	8f 91       	pop	r24
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	0f 90       	pop	r0
    1cc0:	1f 90       	pop	r1
    1cc2:	18 95       	reti

00001cc4 <__divmodhi4>:
    1cc4:	97 fb       	bst	r25, 7
    1cc6:	07 2e       	mov	r0, r23
    1cc8:	16 f4       	brtc	.+4      	; 0x1cce <__divmodhi4+0xa>
    1cca:	00 94       	com	r0
    1ccc:	07 d0       	rcall	.+14     	; 0x1cdc <__divmodhi4_neg1>
    1cce:	77 fd       	sbrc	r23, 7
    1cd0:	09 d0       	rcall	.+18     	; 0x1ce4 <__divmodhi4_neg2>
    1cd2:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__udivmodhi4>
    1cd6:	07 fc       	sbrc	r0, 7
    1cd8:	05 d0       	rcall	.+10     	; 0x1ce4 <__divmodhi4_neg2>
    1cda:	3e f4       	brtc	.+14     	; 0x1cea <__divmodhi4_exit>

00001cdc <__divmodhi4_neg1>:
    1cdc:	90 95       	com	r25
    1cde:	81 95       	neg	r24
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	08 95       	ret

00001ce4 <__divmodhi4_neg2>:
    1ce4:	70 95       	com	r23
    1ce6:	61 95       	neg	r22
    1ce8:	7f 4f       	sbci	r23, 0xFF	; 255

00001cea <__divmodhi4_exit>:
    1cea:	08 95       	ret

00001cec <__tablejump2__>:
    1cec:	ee 0f       	add	r30, r30
    1cee:	ff 1f       	adc	r31, r31

00001cf0 <__tablejump__>:
    1cf0:	05 90       	lpm	r0, Z+
    1cf2:	f4 91       	lpm	r31, Z
    1cf4:	e0 2d       	mov	r30, r0
    1cf6:	09 94       	ijmp

00001cf8 <__umulhisi3>:
    1cf8:	a2 9f       	mul	r26, r18
    1cfa:	b0 01       	movw	r22, r0
    1cfc:	b3 9f       	mul	r27, r19
    1cfe:	c0 01       	movw	r24, r0
    1d00:	a3 9f       	mul	r26, r19
    1d02:	70 0d       	add	r23, r0
    1d04:	81 1d       	adc	r24, r1
    1d06:	11 24       	eor	r1, r1
    1d08:	91 1d       	adc	r25, r1
    1d0a:	b2 9f       	mul	r27, r18
    1d0c:	70 0d       	add	r23, r0
    1d0e:	81 1d       	adc	r24, r1
    1d10:	11 24       	eor	r1, r1
    1d12:	91 1d       	adc	r25, r1
    1d14:	08 95       	ret

00001d16 <__udivmodhi4>:
    1d16:	aa 1b       	sub	r26, r26
    1d18:	bb 1b       	sub	r27, r27
    1d1a:	51 e1       	ldi	r21, 0x11	; 17
    1d1c:	07 c0       	rjmp	.+14     	; 0x1d2c <__udivmodhi4_ep>

00001d1e <__udivmodhi4_loop>:
    1d1e:	aa 1f       	adc	r26, r26
    1d20:	bb 1f       	adc	r27, r27
    1d22:	a6 17       	cp	r26, r22
    1d24:	b7 07       	cpc	r27, r23
    1d26:	10 f0       	brcs	.+4      	; 0x1d2c <__udivmodhi4_ep>
    1d28:	a6 1b       	sub	r26, r22
    1d2a:	b7 0b       	sbc	r27, r23

00001d2c <__udivmodhi4_ep>:
    1d2c:	88 1f       	adc	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	5a 95       	dec	r21
    1d32:	a9 f7       	brne	.-22     	; 0x1d1e <__udivmodhi4_loop>
    1d34:	80 95       	com	r24
    1d36:	90 95       	com	r25
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	08 95       	ret

00001d3e <__itoa_ncheck>:
    1d3e:	bb 27       	eor	r27, r27
    1d40:	4a 30       	cpi	r20, 0x0A	; 10
    1d42:	31 f4       	brne	.+12     	; 0x1d50 <__itoa_ncheck+0x12>
    1d44:	99 23       	and	r25, r25
    1d46:	22 f4       	brpl	.+8      	; 0x1d50 <__itoa_ncheck+0x12>
    1d48:	bd e2       	ldi	r27, 0x2D	; 45
    1d4a:	90 95       	com	r25
    1d4c:	81 95       	neg	r24
    1d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d50:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__utoa_common>

00001d54 <__utoa_ncheck>:
    1d54:	bb 27       	eor	r27, r27

00001d56 <__utoa_common>:
    1d56:	fb 01       	movw	r30, r22
    1d58:	55 27       	eor	r21, r21
    1d5a:	aa 27       	eor	r26, r26
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	aa 1f       	adc	r26, r26
    1d62:	a4 17       	cp	r26, r20
    1d64:	10 f0       	brcs	.+4      	; 0x1d6a <__utoa_common+0x14>
    1d66:	a4 1b       	sub	r26, r20
    1d68:	83 95       	inc	r24
    1d6a:	50 51       	subi	r21, 0x10	; 16
    1d6c:	b9 f7       	brne	.-18     	; 0x1d5c <__utoa_common+0x6>
    1d6e:	a0 5d       	subi	r26, 0xD0	; 208
    1d70:	aa 33       	cpi	r26, 0x3A	; 58
    1d72:	08 f0       	brcs	.+2      	; 0x1d76 <__utoa_common+0x20>
    1d74:	a9 5d       	subi	r26, 0xD9	; 217
    1d76:	a1 93       	st	Z+, r26
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	79 f7       	brne	.-34     	; 0x1d5a <__utoa_common+0x4>
    1d7c:	b1 11       	cpse	r27, r1
    1d7e:	b1 93       	st	Z+, r27
    1d80:	11 92       	st	Z+, r1
    1d82:	cb 01       	movw	r24, r22
    1d84:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <strrev>

00001d88 <strrev>:
    1d88:	dc 01       	movw	r26, r24
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	67 2f       	mov	r22, r23
    1d8e:	71 91       	ld	r23, Z+
    1d90:	77 23       	and	r23, r23
    1d92:	e1 f7       	brne	.-8      	; 0x1d8c <strrev+0x4>
    1d94:	32 97       	sbiw	r30, 0x02	; 2
    1d96:	04 c0       	rjmp	.+8      	; 0x1da0 <strrev+0x18>
    1d98:	7c 91       	ld	r23, X
    1d9a:	6d 93       	st	X+, r22
    1d9c:	70 83       	st	Z, r23
    1d9e:	62 91       	ld	r22, -Z
    1da0:	ae 17       	cp	r26, r30
    1da2:	bf 07       	cpc	r27, r31
    1da4:	c8 f3       	brcs	.-14     	; 0x1d98 <strrev+0x10>
    1da6:	08 95       	ret

00001da8 <_exit>:
    1da8:	f8 94       	cli

00001daa <__stop_program>:
    1daa:	ff cf       	rjmp	.-2      	; 0x1daa <__stop_program>
