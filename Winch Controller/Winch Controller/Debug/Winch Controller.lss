
Winch Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000105c  000010f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000105c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c4  00800102  00800102  000010f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001124  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001098  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006db  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e0  00000000  00000000  00002a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  00003b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a7  00000000  00000000  00003f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000095f  00000000  00000000  0000451b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004e7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__vector_5>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__vector_12>
      34:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_13>
      38:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__vector_14>
      3c:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_15>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__vector_22>
      5c:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__vector_23>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_27>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ec e5       	ldi	r30, 0x5C	; 92
      90:	f0 e1       	ldi	r31, 0x10	; 16
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a2 30       	cpi	r26, 0x02	; 2
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a2 e0       	ldi	r26, 0x02	; 2
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a6 3c       	cpi	r26, 0xC6	; 198
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 4e 03 	call	0x69c	; 0x69c <main>
      b2:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <ADC_switch>:
	
	adc_ready_to_send = 0;
}

void ADC_switch(uint8_t channel){
		ADMUX = (ADMUX & 0xF0) | (channel & ADMUX_MASK);
      ba:	ec e7       	ldi	r30, 0x7C	; 124
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	90 81       	ld	r25, Z
      c0:	8f 70       	andi	r24, 0x0F	; 15
      c2:	90 7f       	andi	r25, 0xF0	; 240
      c4:	89 2b       	or	r24, r25
      c6:	80 83       	st	Z, r24
      c8:	08 95       	ret

000000ca <ADC_init>:

void ADC_init(void){
	int8_t c;
	
	//Wybór Ÿród³a wyzwalania - 
	ADCSRB |= (1<<ADHSM) | (1<<AREFEN)| (0<<ADTS3) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
      ca:	eb e7       	ldi	r30, 0x7B	; 123
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	80 6a       	ori	r24, 0xA0	; 160
      d2:	80 83       	st	Z, r24
	// ADEN - aktywowanie ADC
	// ADATE - zewnêtrzne Ÿród³o wyzwalania
	// ADPSX - ustawienie preskalera 0 1 1 - clk/8 ->2Mhz
	// ADIE - aktywowanie przerwania
	// ADSC - start pomiaru
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (0<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
      d4:	ea e7       	ldi	r30, 0x7A	; 122
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	8f 68       	ori	r24, 0x8F	; 143
      dc:	80 83       	st	Z, r24
			
	// REFS1	REFS0
	// 0		0	-nap odniesienia z VREF
	// 1		1	-nap odniesienia z wew referencji
	// MUX2..0  -wybór wejscia przetwornika			
	ADMUX |= (0<<REFS1) | (1<<REFS0);
      de:	ec e7       	ldi	r30, 0x7C	; 124
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 81       	ld	r24, Z
      e4:	80 64       	ori	r24, 0x40	; 64
      e6:	80 83       	st	Z, r24
	
	// init adc state struct
	adc_state.active_channel  = 0;
      e8:	e6 e2       	ldi	r30, 0x26	; 38
      ea:	f1 e0       	ldi	r31, 0x01	; 1
      ec:	11 82       	std	Z+1, r1	; 0x01
	adc_state.buffor_position = 0;
      ee:	12 82       	std	Z+2, r1	; 0x02
	
	//translate index to ADC channel num
	channel_idx_to_num[ADC_CHANNEL_WATER]   = ADC_CHANNEL_WATER_NUM;
      f0:	a7 e1       	ldi	r26, 0x17	; 23
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	84 e0       	ldi	r24, 0x04	; 4
      f6:	12 96       	adiw	r26, 0x02	; 2
      f8:	8c 93       	st	X, r24
      fa:	12 97       	sbiw	r26, 0x02	; 2
	channel_idx_to_num[ADC_CHANNEL_VOLTAGE] = ADC_CHANNEL_VOLTAGE_NUM;
      fc:	89 e0       	ldi	r24, 0x09	; 9
      fe:	11 96       	adiw	r26, 0x01	; 1
     100:	8c 93       	st	X, r24
     102:	11 97       	sbiw	r26, 0x01	; 1
	channel_idx_to_num[ADC_CHANNEL_CURRENT] = ADC_CHANNEL_CURRENT_NUM;
     104:	8a e0       	ldi	r24, 0x0A	; 10
     106:	8c 93       	st	X, r24
	
	// init sum
	for( c = 0 ; c < ADC_MAX_CHANNEL ; c++ ){
		adc_state.sum[c] = 0;
     108:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <adc_state+0x5e>
     10c:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <adc_state+0x5d>
     110:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <adc_state+0x60>
     114:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <adc_state+0x5f>
     118:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <adc_state+0x62>
     11c:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <adc_state+0x61>
	}

	// trun on first channel	
	ADC_switch(channel_idx_to_num[adc_state.active_channel]);
     120:	e1 81       	ldd	r30, Z+1	; 0x01
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	e9 5e       	subi	r30, 0xE9	; 233
     126:	fe 4f       	sbci	r31, 0xFE	; 254
     128:	80 81       	ld	r24, Z
     12a:	0e 94 5d 00 	call	0xba	; 0xba <ADC_switch>
	
	adc_ready_to_send = 0;
     12e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <adc_ready_to_send>
     132:	08 95       	ret

00000134 <ADC_start_conversion>:
void ADC_switch(uint8_t channel){
		ADMUX = (ADMUX & 0xF0) | (channel & ADMUX_MASK);
}

void ADC_start_conversion(){
	ADCSRA |= (1<<ADSC);
     134:	ea e7       	ldi	r30, 0x7A	; 122
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	80 64       	ori	r24, 0x40	; 64
     13c:	80 83       	st	Z, r24
     13e:	08 95       	ret

00000140 <ADC_task>:
}

// ADC task function, called every loop in main_loop
void ADC_task(void){
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
     144:	0f 93       	push	r16
     146:	1f 93       	push	r17
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
	/* if we have new results */
	if( HAS_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED)) {
     14c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <adc_state>
     150:	80 ff       	sbrs	r24, 0
     152:	a3 c0       	rjmp	.+326    	; 0x29a <ADC_task+0x15a>
		adc_results.raw_current = adc_state.sum[ADC_CHANNEL_CURRENT] / ADC_SAMPELS;
     154:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <adc_state+0x5d>
     158:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <adc_state+0x5e>
     15c:	2f e0       	ldi	r18, 0x0F	; 15
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	b9 01       	movw	r22, r18
     162:	0e 94 cc 07 	call	0xf98	; 0xf98 <__divmodhi4>
     166:	eb 01       	movw	r28, r22
     168:	ea e1       	ldi	r30, 0x1A	; 26
     16a:	f1 e0       	ldi	r31, 0x01	; 1
     16c:	71 83       	std	Z+1, r23	; 0x01
     16e:	60 83       	st	Z, r22
		adc_results.raw_voltage = adc_state.sum[ADC_CHANNEL_VOLTAGE] / ADC_SAMPELS;
     170:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <adc_state+0x5f>
     174:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <adc_state+0x60>
     178:	b9 01       	movw	r22, r18
     17a:	0e 94 cc 07 	call	0xf98	; 0xf98 <__divmodhi4>
     17e:	8b 01       	movw	r16, r22
     180:	73 83       	std	Z+3, r23	; 0x03
     182:	62 83       	std	Z+2, r22	; 0x02
		adc_results.raw_water   = adc_state.sum[ADC_CHANNEL_WATER]   / ADC_SAMPELS;		
     184:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <adc_state+0x61>
     188:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <adc_state+0x62>
     18c:	b9 01       	movw	r22, r18
     18e:	0e 94 cc 07 	call	0xf98	; 0xf98 <__divmodhi4>
     192:	ab 01       	movw	r20, r22
     194:	7b 01       	movw	r14, r22
     196:	75 83       	std	Z+5, r23	; 0x05
     198:	64 83       	std	Z+4, r22	; 0x04
		
		/* voltage result */
		if((adc_results.raw_voltage + ADC_VOLTAGE_OFFSET) < 1024 && (ADC_VOLTAGE_OFFSET+adc_results.raw_voltage) > 0){
     19a:	c8 01       	movw	r24, r16
     19c:	8a 57       	subi	r24, 0x7A	; 122
     19e:	9f 4f       	sbci	r25, 0xFF	; 255
     1a0:	8f 3f       	cpi	r24, 0xFF	; 255
     1a2:	93 40       	sbci	r25, 0x03	; 3
     1a4:	c8 f4       	brcc	.+50     	; 0x1d8 <ADC_task+0x98>
			adc_results.voltage = ((((uint32_t)adc_results.raw_voltage + ADC_VOLTAGE_OFFSET))*ADC_VOLTAGE_SCALE) / 1024;
     1a6:	2a ea       	ldi	r18, 0xAA	; 170
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	d8 01       	movw	r26, r16
     1ac:	0e 94 11 08 	call	0x1022	; 0x1022 <__usmulhisi3>
     1b0:	dc 01       	movw	r26, r24
     1b2:	cb 01       	movw	r24, r22
     1b4:	8a 55       	subi	r24, 0x5A	; 90
     1b6:	96 4a       	sbci	r25, 0xA6	; 166
     1b8:	af 4f       	sbci	r26, 0xFF	; 255
     1ba:	bf 4f       	sbci	r27, 0xFF	; 255
     1bc:	07 2e       	mov	r0, r23
     1be:	7a e0       	ldi	r23, 0x0A	; 10
     1c0:	b6 95       	lsr	r27
     1c2:	a7 95       	ror	r26
     1c4:	97 95       	ror	r25
     1c6:	87 95       	ror	r24
     1c8:	7a 95       	dec	r23
     1ca:	d1 f7       	brne	.-12     	; 0x1c0 <ADC_task+0x80>
     1cc:	70 2d       	mov	r23, r0
     1ce:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <adc_results+0x9>
     1d2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <adc_results+0x8>
     1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <ADC_task+0xa0>
		}
		else {
			adc_results.voltage = 0;
     1d8:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <adc_results+0x9>
     1dc:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <adc_results+0x8>
		}
		
		/* current result */
		if(((adc_results.raw_current + ADC_CURRENT_OFFSET) < 1024) && ((ADC_CURRENT_SCALE + adc_results.raw_current) > 0)){
     1e0:	ce 01       	movw	r24, r28
     1e2:	8f 5f       	subi	r24, 0xFF	; 255
     1e4:	91 40       	sbci	r25, 0x01	; 1
     1e6:	81 15       	cp	r24, r1
     1e8:	24 e0       	ldi	r18, 0x04	; 4
     1ea:	92 07       	cpc	r25, r18
     1ec:	f4 f4       	brge	.+60     	; 0x22a <ADC_task+0xea>
     1ee:	81 5e       	subi	r24, 0xE1	; 225
     1f0:	9a 4f       	sbci	r25, 0xFA	; 250
     1f2:	18 16       	cp	r1, r24
     1f4:	19 06       	cpc	r1, r25
     1f6:	cc f4       	brge	.+50     	; 0x22a <ADC_task+0xea>
			adc_results.current=((((uint32_t)adc_results.raw_current + ADC_CURRENT_OFFSET))*ADC_CURRENT_SCALE) / 1024; //przeliczanie ADU na pr¹d (ADU*I_SCALE)/1024 i wyliczanie œredniej z poprzednim pomiarem
     1f8:	20 e2       	ldi	r18, 0x20	; 32
     1fa:	33 e0       	ldi	r19, 0x03	; 3
     1fc:	de 01       	movw	r26, r28
     1fe:	0e 94 11 08 	call	0x1022	; 0x1022 <__usmulhisi3>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	80 5e       	subi	r24, 0xE0	; 224
     208:	9c 43       	sbci	r25, 0x3C	; 60
     20a:	a6 40       	sbci	r26, 0x06	; 6
     20c:	b1 09       	sbc	r27, r1
     20e:	07 2e       	mov	r0, r23
     210:	7a e0       	ldi	r23, 0x0A	; 10
     212:	b6 95       	lsr	r27
     214:	a7 95       	ror	r26
     216:	97 95       	ror	r25
     218:	87 95       	ror	r24
     21a:	7a 95       	dec	r23
     21c:	d1 f7       	brne	.-12     	; 0x212 <ADC_task+0xd2>
     21e:	70 2d       	mov	r23, r0
     220:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <adc_results+0x7>
     224:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <adc_results+0x6>
     228:	04 c0       	rjmp	.+8      	; 0x232 <ADC_task+0xf2>
		} else {
			adc_results.current = 0;
     22a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <adc_results+0x7>
     22e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <adc_results+0x6>
		}
		
		/* water result */
		if( adc_results.raw_water <= ADC_WATER_MIN) {
     232:	8d e1       	ldi	r24, 0x1D	; 29
     234:	e8 16       	cp	r14, r24
     236:	f1 04       	cpc	r15, r1
     238:	2c f4       	brge	.+10     	; 0x244 <ADC_task+0x104>
			adc_results.water = 0;
     23a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <adc_results+0xb>
     23e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <adc_results+0xa>
     242:	21 c0       	rjmp	.+66     	; 0x286 <ADC_task+0x146>
		} else if( adc_results.raw_water >= ADC_WATER_MAX ) {
     244:	2b e2       	ldi	r18, 0x2B	; 43
     246:	e2 16       	cp	r14, r18
     248:	f1 04       	cpc	r15, r1
     24a:	3c f0       	brlt	.+14     	; 0x25a <ADC_task+0x11a>
			adc_results.water = 100;
     24c:	84 e6       	ldi	r24, 0x64	; 100
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <adc_results+0xb>
     254:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <adc_results+0xa>
     258:	16 c0       	rjmp	.+44     	; 0x286 <ADC_task+0x146>
		} else {
			adc_results.water = (((uint16_t)adc_results.raw_water - ADC_WATER_MIN) * (ADC_WATER_MAX - ADC_WATER_MIN)) / 100;
     25a:	8f e0       	ldi	r24, 0x0F	; 15
     25c:	84 9f       	mul	r24, r20
     25e:	90 01       	movw	r18, r0
     260:	85 9f       	mul	r24, r21
     262:	30 0d       	add	r19, r0
     264:	11 24       	eor	r1, r1
     266:	24 5a       	subi	r18, 0xA4	; 164
     268:	31 40       	sbci	r19, 0x01	; 1
     26a:	36 95       	lsr	r19
     26c:	27 95       	ror	r18
     26e:	36 95       	lsr	r19
     270:	27 95       	ror	r18
     272:	ab e7       	ldi	r26, 0x7B	; 123
     274:	b4 e1       	ldi	r27, 0x14	; 20
     276:	0e 94 02 08 	call	0x1004	; 0x1004 <__umulhisi3>
     27a:	96 95       	lsr	r25
     27c:	87 95       	ror	r24
     27e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <adc_results+0xb>
     282:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <adc_results+0xa>
		}
		
		
		adc_ready_to_send++;
     286:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <adc_ready_to_send>
     28a:	8f 5f       	subi	r24, 0xFF	; 255
     28c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <adc_ready_to_send>
		/* clearing flag for conversion resulsts */
		CLEAR_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED);
     290:	e6 e2       	ldi	r30, 0x26	; 38
     292:	f1 e0       	ldi	r31, 0x01	; 1
     294:	80 81       	ld	r24, Z
     296:	8e 7f       	andi	r24, 0xFE	; 254
     298:	80 83       	st	Z, r24
	}
};
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	ff 90       	pop	r15
     2a4:	ef 90       	pop	r14
     2a6:	08 95       	ret

000002a8 <__vector_27>:

// ADC conversion completed signal
SIGNAL(ADC_vect){
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
	/* save result */
	
	/* removing old result from the sum */
	if( HAS_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF) ) {
     2ca:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <adc_state>
     2ce:	81 ff       	sbrs	r24, 1
     2d0:	21 c0       	rjmp	.+66     	; 0x314 <__vector_27+0x6c>
		adc_state.sum[adc_state.active_channel] -= adc_state.buffor[adc_state.active_channel][adc_state.buffor_position];
     2d2:	a6 e2       	ldi	r26, 0x26	; 38
     2d4:	b1 e0       	ldi	r27, 0x01	; 1
     2d6:	11 96       	adiw	r26, 0x01	; 1
     2d8:	ec 91       	ld	r30, X
     2da:	11 97       	sbiw	r26, 0x01	; 1
     2dc:	12 96       	adiw	r26, 0x02	; 2
     2de:	8c 91       	ld	r24, X
     2e0:	12 97       	sbiw	r26, 0x02	; 2
     2e2:	9f e0       	ldi	r25, 0x0F	; 15
     2e4:	e9 9f       	mul	r30, r25
     2e6:	f0 01       	movw	r30, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	e8 0f       	add	r30, r24
     2ec:	f1 1d       	adc	r31, r1
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	ea 5d       	subi	r30, 0xDA	; 218
     2f4:	fe 4f       	sbci	r31, 0xFE	; 254
     2f6:	23 81       	ldd	r18, Z+3	; 0x03
     2f8:	34 81       	ldd	r19, Z+4	; 0x04
     2fa:	11 96       	adiw	r26, 0x01	; 1
     2fc:	ec 91       	ld	r30, X
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	ee 0f       	add	r30, r30
     302:	ff 1f       	adc	r31, r31
     304:	ed 57       	subi	r30, 0x7D	; 125
     306:	fe 4f       	sbci	r31, 0xFE	; 254
     308:	80 81       	ld	r24, Z
     30a:	91 81       	ldd	r25, Z+1	; 0x01
     30c:	82 1b       	sub	r24, r18
     30e:	93 0b       	sbc	r25, r19
     310:	91 83       	std	Z+1, r25	; 0x01
     312:	80 83       	st	Z, r24
	}
	/* putting new result to the buffor */
	adc_state.buffor[adc_state.active_channel][adc_state.buffor_position] = ADC;
     314:	a6 e2       	ldi	r26, 0x26	; 38
     316:	b1 e0       	ldi	r27, 0x01	; 1
     318:	11 96       	adiw	r26, 0x01	; 1
     31a:	ec 91       	ld	r30, X
     31c:	11 97       	sbiw	r26, 0x01	; 1
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	9c 91       	ld	r25, X
     322:	12 97       	sbiw	r26, 0x02	; 2
     324:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     328:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     32c:	8f e0       	ldi	r24, 0x0F	; 15
     32e:	8e 9f       	mul	r24, r30
     330:	f0 01       	movw	r30, r0
     332:	11 24       	eor	r1, r1
     334:	e9 0f       	add	r30, r25
     336:	f1 1d       	adc	r31, r1
     338:	ee 0f       	add	r30, r30
     33a:	ff 1f       	adc	r31, r31
     33c:	ea 5d       	subi	r30, 0xDA	; 218
     33e:	fe 4f       	sbci	r31, 0xFE	; 254
     340:	34 83       	std	Z+4, r19	; 0x04
     342:	23 83       	std	Z+3, r18	; 0x03
	/* adding new result to sum */
	adc_state.sum[adc_state.active_channel] += adc_state.buffor[adc_state.active_channel][adc_state.buffor_position];
     344:	11 96       	adiw	r26, 0x01	; 1
     346:	ec 91       	ld	r30, X
     348:	11 97       	sbiw	r26, 0x01	; 1
     34a:	12 96       	adiw	r26, 0x02	; 2
     34c:	9c 91       	ld	r25, X
     34e:	12 97       	sbiw	r26, 0x02	; 2
     350:	8e 9f       	mul	r24, r30
     352:	f0 01       	movw	r30, r0
     354:	11 24       	eor	r1, r1
     356:	e9 0f       	add	r30, r25
     358:	f1 1d       	adc	r31, r1
     35a:	ee 0f       	add	r30, r30
     35c:	ff 1f       	adc	r31, r31
     35e:	ea 5d       	subi	r30, 0xDA	; 218
     360:	fe 4f       	sbci	r31, 0xFE	; 254
     362:	83 81       	ldd	r24, Z+3	; 0x03
     364:	94 81       	ldd	r25, Z+4	; 0x04
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	ec 91       	ld	r30, X
     36a:	11 97       	sbiw	r26, 0x01	; 1
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	ed 57       	subi	r30, 0x7D	; 125
     374:	fe 4f       	sbci	r31, 0xFE	; 254
     376:	20 81       	ld	r18, Z
     378:	31 81       	ldd	r19, Z+1	; 0x01
     37a:	82 0f       	add	r24, r18
     37c:	93 1f       	adc	r25, r19
     37e:	91 83       	std	Z+1, r25	; 0x01
     380:	80 83       	st	Z, r24
	
	/* inc channel position counters */
	if( ++adc_state.active_channel == ADC_MAX_CHANNEL) {
     382:	11 96       	adiw	r26, 0x01	; 1
     384:	8c 91       	ld	r24, X
     386:	11 97       	sbiw	r26, 0x01	; 1
     388:	8f 5f       	subi	r24, 0xFF	; 255
     38a:	11 96       	adiw	r26, 0x01	; 1
     38c:	8c 93       	st	X, r24
     38e:	11 97       	sbiw	r26, 0x01	; 1
     390:	83 30       	cpi	r24, 0x03	; 3
     392:	a1 f4       	brne	.+40     	; 0x3bc <__vector_27+0x114>
		/* we checked all channels, starting from the begging */
		adc_state.active_channel = 0;
     394:	fd 01       	movw	r30, r26
     396:	11 82       	std	Z+1, r1	; 0x01
		/* reseting buffer position */
		if( ++adc_state.buffor_position == ADC_SAMPELS ){
     398:	82 81       	ldd	r24, Z+2	; 0x02
     39a:	8f 5f       	subi	r24, 0xFF	; 255
     39c:	82 83       	std	Z+2, r24	; 0x02
     39e:	8f 30       	cpi	r24, 0x0F	; 15
     3a0:	21 f4       	brne	.+8      	; 0x3aa <__vector_27+0x102>
			/* we filled whole buffor, starting from the begging */
			adc_state.buffor_position = 0;
     3a2:	12 82       	std	Z+2, r1	; 0x02
			// setting flag that buffor is full (you can read results)
			SET_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF);
     3a4:	80 81       	ld	r24, Z
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	80 83       	st	Z, r24
		}
		/* setting flag that there is new result ready */
		if( HAS_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF) ) {
     3aa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <adc_state>
     3ae:	81 ff       	sbrs	r24, 1
     3b0:	05 c0       	rjmp	.+10     	; 0x3bc <__vector_27+0x114>
			SET_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED);
     3b2:	e6 e2       	ldi	r30, 0x26	; 38
     3b4:	f1 e0       	ldi	r31, 0x01	; 1
     3b6:	80 81       	ld	r24, Z
     3b8:	81 60       	ori	r24, 0x01	; 1
     3ba:	80 83       	st	Z, r24
		}
	}
	/* switching active channel */
	ADC_switch(channel_idx_to_num[adc_state.active_channel]);
     3bc:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <adc_state+0x1>
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	e9 5e       	subi	r30, 0xE9	; 233
     3c4:	fe 4f       	sbci	r31, 0xFE	; 254
     3c6:	80 81       	ld	r24, Z
     3c8:	0e 94 5d 00 	call	0xba	; 0xba <ADC_switch>
	/* starting conversion */
	ADC_start_conversion();	
     3cc:	0e 94 9a 00 	call	0x134	; 0x134 <ADC_start_conversion>
};
     3d0:	ff 91       	pop	r31
     3d2:	ef 91       	pop	r30
     3d4:	bf 91       	pop	r27
     3d6:	af 91       	pop	r26
     3d8:	9f 91       	pop	r25
     3da:	8f 91       	pop	r24
     3dc:	7f 91       	pop	r23
     3de:	6f 91       	pop	r22
     3e0:	5f 91       	pop	r21
     3e2:	4f 91       	pop	r20
     3e4:	3f 91       	pop	r19
     3e6:	2f 91       	pop	r18
     3e8:	0f 90       	pop	r0
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	0f 90       	pop	r0
     3ee:	1f 90       	pop	r1
     3f0:	18 95       	reti

000003f2 <main_loop>:
		}
};

void LEDs_OFF(void){
	LED_0_OFF;
	LED_1_OFF;
     3f2:	0e 94 a0 00 	call	0x140	; 0x140 <ADC_task>
     3f6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <PSC_Task>
     3fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <winch_status>
     3fe:	ea e8       	ldi	r30, 0x8A	; 138
     400:	f1 e0       	ldi	r31, 0x01	; 1
     402:	83 83       	std	Z+3, r24	; 0x03
     404:	83 b1       	in	r24, 0x03	; 3
     406:	80 72       	andi	r24, 0x20	; 32
     408:	84 83       	std	Z+4, r24	; 0x04
     40a:	aa e1       	ldi	r26, 0x1A	; 26
     40c:	b1 e0       	ldi	r27, 0x01	; 1
     40e:	16 96       	adiw	r26, 0x06	; 6
     410:	8c 91       	ld	r24, X
     412:	16 97       	sbiw	r26, 0x06	; 6
     414:	80 83       	st	Z, r24
     416:	1a 96       	adiw	r26, 0x0a	; 10
     418:	8c 91       	ld	r24, X
     41a:	1a 97       	sbiw	r26, 0x0a	; 10
     41c:	81 83       	std	Z+1, r24	; 0x01
     41e:	18 96       	adiw	r26, 0x08	; 8
     420:	8c 91       	ld	r24, X
     422:	18 97       	sbiw	r26, 0x08	; 8
     424:	82 83       	std	Z+2, r24	; 0x02
     426:	14 96       	adiw	r26, 0x04	; 4
     428:	8d 91       	ld	r24, X+
     42a:	9c 91       	ld	r25, X
     42c:	15 97       	sbiw	r26, 0x05	; 5
     42e:	97 83       	std	Z+7, r25	; 0x07
     430:	86 83       	std	Z+6, r24	; 0x06
     432:	8d 91       	ld	r24, X+
     434:	9c 91       	ld	r25, X
     436:	91 87       	std	Z+9, r25	; 0x09
     438:	80 87       	std	Z+8, r24	; 0x08
     43a:	0e 94 ba 05 	call	0xb74	; 0xb74 <CAN_task>
     43e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <life_timer>
     442:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <life_timer+0x1>
     446:	0e 94 61 07 	call	0xec2	; 0xec2 <timer_time_elapsed>
     44a:	81 35       	cpi	r24, 0x51	; 81
     44c:	93 4c       	sbci	r25, 0xC3	; 195
     44e:	98 f0       	brcs	.+38     	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
     450:	5a 98       	cbi	0x0b, 2	; 11
     452:	2b 98       	cbi	0x05, 3	; 5
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	93 ed       	ldi	r25, 0xD3	; 211
     458:	20 e3       	ldi	r18, 0x30	; 48
     45a:	81 50       	subi	r24, 0x01	; 1
     45c:	90 40       	sbci	r25, 0x00	; 0
     45e:	20 40       	sbci	r18, 0x00	; 0
     460:	e1 f7       	brne	.-8      	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
     462:	00 c0       	rjmp	.+0      	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
     464:	00 00       	nop
     466:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <timer_get>
     46a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <life_timer+0x1>
     46e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <life_timer>
     472:	2b 9a       	sbi	0x05, 3	; 5
     474:	5a 9a       	sbi	0x0b, 2	; 11
     476:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	21 f0       	breq	.+8      	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
     47e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	31 f4       	brne	.+12     	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
     486:	1d 99       	sbic	0x03, 5	; 3
     488:	02 c0       	rjmp	.+4      	; 0x48e <__FUSE_REGION_LENGTH__+0x8e>
     48a:	5b 9a       	sbi	0x0b, 3	; 11
     48c:	09 c0       	rjmp	.+18     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
     48e:	5b 98       	cbi	0x0b, 3	; 11
     490:	07 c0       	rjmp	.+14     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
     492:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     496:	83 30       	cpi	r24, 0x03	; 3
     498:	11 f4       	brne	.+4      	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
     49a:	5b 9a       	sbi	0x0b, 3	; 11
     49c:	01 c0       	rjmp	.+2      	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
     49e:	5b 98       	cbi	0x0b, 3	; 11
     4a0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     4a4:	83 30       	cpi	r24, 0x03	; 3
     4a6:	09 f4       	brne	.+2      	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     4a8:	bb c0       	rjmp	.+374    	; 0x620 <__FUSE_REGION_LENGTH__+0x220>
     4aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     4ae:	88 23       	and	r24, r24
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
     4b2:	b6 c0       	rjmp	.+364    	; 0x620 <__FUSE_REGION_LENGTH__+0x220>
     4b4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     4b8:	82 30       	cpi	r24, 0x02	; 2
     4ba:	29 f0       	breq	.+10     	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
     4bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
     4c4:	ad c0       	rjmp	.+346    	; 0x620 <__FUSE_REGION_LENGTH__+0x220>
     4c6:	83 b1       	in	r24, 0x03	; 3
     4c8:	83 b1       	in	r24, 0x03	; 3
     4ca:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <timer_get>
     4ce:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <life_timer+0x1>
     4d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <life_timer>
     4d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <winch_status>
     4da:	81 11       	cpse	r24, r1
     4dc:	10 c0       	rjmp	.+32     	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
     4de:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <timer_get>
     4e2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
     4e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
     4ea:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <timer_get>
     4ee:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <winch_timer+0x1>
     4f2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <winch_timer>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <winch_status>
     4fc:	08 95       	ret
     4fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <winch_status>
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	91 f5       	brne	.+100    	; 0x56a <__FUSE_REGION_LENGTH__+0x16a>
     506:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     50a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
     50e:	0e 94 61 07 	call	0xec2	; 0xec2 <timer_time_elapsed>
     512:	0f 97       	sbiw	r24, 0x0f	; 15
     514:	08 f4       	brcc	.+2      	; 0x518 <__FUSE_REGION_LENGTH__+0x118>
     516:	84 c0       	rjmp	.+264    	; 0x620 <__FUSE_REGION_LENGTH__+0x220>
     518:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	29 f4       	brne	.+10     	; 0x52a <__FUSE_REGION_LENGTH__+0x12a>
     520:	1d 99       	sbic	0x03, 5	; 3
     522:	08 c0       	rjmp	.+16     	; 0x534 <__FUSE_REGION_LENGTH__+0x134>
     524:	82 ec       	ldi	r24, 0xC2	; 194
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	0a c0       	rjmp	.+20     	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
     52a:	1d 99       	sbic	0x03, 5	; 3
     52c:	06 c0       	rjmp	.+12     	; 0x53a <__FUSE_REGION_LENGTH__+0x13a>
     52e:	82 ec       	ldi	r24, 0xC2	; 194
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	05 c0       	rjmp	.+10     	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
     534:	88 e5       	ldi	r24, 0x58	; 88
     536:	92 e0       	ldi	r25, 0x02	; 2
     538:	02 c0       	rjmp	.+4      	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
     53a:	88 ec       	ldi	r24, 0xC8	; 200
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <PSC+0x1>
     542:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <PSC>
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <winch_status>
     54c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <timer_get>
     550:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
     554:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
     558:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <timer_get>
     55c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <winch_timer+0x1>
     560:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <winch_timer>
     564:	0e 94 ed 06 	call	0xdda	; 0xdda <Enable_PSC>
     568:	08 95       	ret
     56a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <winch_status>
     56e:	82 30       	cpi	r24, 0x02	; 2
     570:	09 f0       	breq	.+2      	; 0x574 <__FUSE_REGION_LENGTH__+0x174>
     572:	54 c0       	rjmp	.+168    	; 0x61c <__FUSE_REGION_LENGTH__+0x21c>
     574:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     578:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
     57c:	0e 94 61 07 	call	0xec2	; 0xec2 <timer_time_elapsed>
     580:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <winch_state>
     584:	22 30       	cpi	r18, 0x02	; 2
     586:	11 f4       	brne	.+4      	; 0x58c <__FUSE_REGION_LENGTH__+0x18c>
     588:	23 b1       	in	r18, 0x03	; 3
     58a:	01 c0       	rjmp	.+2      	; 0x58e <__FUSE_REGION_LENGTH__+0x18e>
     58c:	23 b1       	in	r18, 0x03	; 3
     58e:	49 97       	sbiw	r24, 0x19	; 25
     590:	08 f4       	brcc	.+2      	; 0x594 <__FUSE_REGION_LENGTH__+0x194>
     592:	46 c0       	rjmp	.+140    	; 0x620 <__FUSE_REGION_LENGTH__+0x220>
     594:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <timer_get>
     598:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
     59c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
     5a0:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <PSC>
     5a4:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <PSC+0x1>
     5a8:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <winch_state>
     5ac:	22 30       	cpi	r18, 0x02	; 2
     5ae:	29 f4       	brne	.+10     	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
     5b0:	1d 99       	sbic	0x03, 5	; 3
     5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <__FUSE_REGION_LENGTH__+0x1c4>
     5b4:	20 ee       	ldi	r18, 0xE0	; 224
     5b6:	33 e0       	ldi	r19, 0x03	; 3
     5b8:	0a c0       	rjmp	.+20     	; 0x5ce <__FUSE_REGION_LENGTH__+0x1ce>
     5ba:	1d 99       	sbic	0x03, 5	; 3
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <__FUSE_REGION_LENGTH__+0x1ca>
     5be:	20 ee       	ldi	r18, 0xE0	; 224
     5c0:	33 e0       	ldi	r19, 0x03	; 3
     5c2:	05 c0       	rjmp	.+10     	; 0x5ce <__FUSE_REGION_LENGTH__+0x1ce>
     5c4:	24 ee       	ldi	r18, 0xE4	; 228
     5c6:	33 e0       	ldi	r19, 0x03	; 3
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <__FUSE_REGION_LENGTH__+0x1ce>
     5ca:	24 ee       	ldi	r18, 0xE4	; 228
     5cc:	33 e0       	ldi	r19, 0x03	; 3
     5ce:	28 17       	cp	r18, r24
     5d0:	39 07       	cpc	r19, r25
     5d2:	d0 f0       	brcs	.+52     	; 0x608 <__FUSE_REGION_LENGTH__+0x208>
     5d4:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <winch_state>
     5d8:	22 30       	cpi	r18, 0x02	; 2
     5da:	29 f4       	brne	.+10     	; 0x5e6 <__FUSE_REGION_LENGTH__+0x1e6>
     5dc:	1d 99       	sbic	0x03, 5	; 3
     5de:	08 c0       	rjmp	.+16     	; 0x5f0 <__FUSE_REGION_LENGTH__+0x1f0>
     5e0:	28 e0       	ldi	r18, 0x08	; 8
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	0a c0       	rjmp	.+20     	; 0x5fa <__FUSE_REGION_LENGTH__+0x1fa>
     5e6:	1d 99       	sbic	0x03, 5	; 3
     5e8:	06 c0       	rjmp	.+12     	; 0x5f6 <__FUSE_REGION_LENGTH__+0x1f6>
     5ea:	28 e0       	ldi	r18, 0x08	; 8
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	05 c0       	rjmp	.+10     	; 0x5fa <__FUSE_REGION_LENGTH__+0x1fa>
     5f0:	24 e0       	ldi	r18, 0x04	; 4
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <__FUSE_REGION_LENGTH__+0x1fa>
     5f6:	24 e0       	ldi	r18, 0x04	; 4
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	82 0f       	add	r24, r18
     5fc:	93 1f       	adc	r25, r19
     5fe:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <PSC+0x1>
     602:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <PSC>
     606:	08 95       	ret
     608:	88 ee       	ldi	r24, 0xE8	; 232
     60a:	93 e0       	ldi	r25, 0x03	; 3
     60c:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <PSC+0x1>
     610:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <PSC>
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <winch_status>
     61a:	08 95       	ret
     61c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <winch_status>
     620:	08 95       	ret

00000622 <Init_HAL>:
};

void Init_HAL(void){
	
	//w³¹czenie PLL na 64MHz
	PLLCSR |= (1<PLLF) | (1<<PLLE);
     622:	89 b5       	in	r24, 0x29	; 41
     624:	83 60       	ori	r24, 0x03	; 3
     626:	89 bd       	out	0x29, r24	; 41
	
	//ustawienie porty na wyjœciowe dla LED-ow
	DDR(LED_0_PORT) |= (1<<LED_0);
     628:	52 9a       	sbi	0x0a, 2	; 10
	DDR(LED_1_PORT) |= (1<<LED_1);
     62a:	53 9a       	sbi	0x0a, 3	; 10
	
	//LED_0_ON;
	LED_1_ON;
     62c:	5b 9a       	sbi	0x0b, 3	; 11
	
	//podtrzymanie zasilania
	DDR(PWR_PORT) |= (1<<PWR);
     62e:	23 9a       	sbi	0x04, 3	; 4
	
	//Inicjalizacja DIP Switchy
	DDR(SW_1_PORT) &= ~(1<<SW_1);
     630:	57 98       	cbi	0x0a, 7	; 10
	DDR(SW_2_PORT) &= ~(1<<SW_2);
     632:	56 98       	cbi	0x0a, 6	; 10
	DDR(SW_3_PORT) &= ~(1<<SW_3);
     634:	55 98       	cbi	0x0a, 5	; 10
	DDR(SW_4_PORT) &= ~(1<<SW_4);
     636:	21 98       	cbi	0x04, 1	; 4
	DDR(SW_5_PORT) &= ~(1<<SW_5);
     638:	20 98       	cbi	0x04, 0	; 4
	DDR(SW_6_PORT) &= ~(1<<SW_6);
     63a:	39 98       	cbi	0x07, 1	; 7
	DDR(SW_7_PORT) &= ~(1<<SW_7);
     63c:	51 98       	cbi	0x0a, 1	; 10
	DDR(SW_8_PORT) &= ~(1<<SW_8);
     63e:	38 98       	cbi	0x07, 0	; 7
	
	//w³aczenie pull-up-ów
	PORT(SW_1_PORT) |= 1<<SW_1;
     640:	5f 9a       	sbi	0x0b, 7	; 11
	PORT(SW_2_PORT) |= 1<<SW_2;
     642:	5e 9a       	sbi	0x0b, 6	; 11
	PORT(SW_3_PORT) |= 1<<SW_3;
     644:	5d 9a       	sbi	0x0b, 5	; 11
	PORT(SW_4_PORT) |= 1<<SW_4;
     646:	29 9a       	sbi	0x05, 1	; 5
	PORT(SW_5_PORT) |= 1<<SW_5;
     648:	28 9a       	sbi	0x05, 0	; 5
	PORT(SW_6_PORT) |= 1<<SW_6;
     64a:	41 9a       	sbi	0x08, 1	; 8
	PORT(SW_7_PORT) |= 1<<SW_7;
     64c:	59 9a       	sbi	0x0b, 1	; 11
	PORT(SW_8_PORT) |= 1<<SW_8;
     64e:	40 9a       	sbi	0x08, 0	; 8
	
	//Inicjalizacja wejœæ UP i DOWN
	DDR(WINCH_UP_PORT) &= ~(1<<WINCH_UP);
     650:	22 98       	cbi	0x04, 2	; 4
	DDR(WINCH_DOWN_PORT) &= ~(1<<WINCH_DOWN);
     652:	3c 98       	cbi	0x07, 4	; 7
	DDR(AIN_2_PORT) &= ~(1<<AIN_2);
     654:	25 98       	cbi	0x04, 5	; 4
	
	//aktywacja przerwañ
	PCICR |= (1<<PCIE0) | (1<<PCIE1);
     656:	e8 e6       	ldi	r30, 0x68	; 104
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	83 60       	ori	r24, 0x03	; 3
     65e:	80 83       	st	Z, r24
	
	PCMSK0 |= (1<<PCINT2);
     660:	ea e6       	ldi	r30, 0x6A	; 106
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	84 60       	ori	r24, 0x04	; 4
     668:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12);
     66a:	eb e6       	ldi	r30, 0x6B	; 107
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	80 61       	ori	r24, 0x10	; 16
     672:	80 83       	st	Z, r24
     674:	08 95       	ret

00000676 <Get_DIP_sw_word>:
	
};

uint8_t Get_DIP_sw_word(void){
	uint8_t result=0;
	if(SW_1_SET)
     676:	89 b1       	in	r24, 0x09	; 9
     678:	88 1f       	adc	r24, r24
     67a:	88 27       	eor	r24, r24
     67c:	88 1f       	adc	r24, r24
		result |= 1<<0;
	if(SW_2_SET)
     67e:	4e 99       	sbic	0x09, 6	; 9
		result |= 1<<1;
     680:	82 60       	ori	r24, 0x02	; 2
	if(SW_3_SET)
     682:	4d 99       	sbic	0x09, 5	; 9
		result |= 1<<2;
     684:	84 60       	ori	r24, 0x04	; 4
	if(SW_4_SET)
     686:	19 99       	sbic	0x03, 1	; 3
		result |= 1<<3;
     688:	88 60       	ori	r24, 0x08	; 8
	if(SW_5_SET)
     68a:	18 99       	sbic	0x03, 0	; 3
		result |= 1<<4;
     68c:	80 61       	ori	r24, 0x10	; 16
	if(SW_6_SET)
     68e:	31 99       	sbic	0x06, 1	; 6
		result |= 1<<5;
     690:	80 62       	ori	r24, 0x20	; 32
	if(SW_7_SET)
     692:	49 99       	sbic	0x09, 1	; 9
		result |= 1<<6;
     694:	80 64       	ori	r24, 0x40	; 64
	if(SW_8_SET)
     696:	30 99       	sbic	0x06, 0	; 6
		result |= 1<<7;
     698:	80 68       	ori	r24, 0x80	; 128
	return result; 
	
};
     69a:	08 95       	ret

0000069c <main>:

volatile uint8_t adc_ready_to_send = 0;


int main(void) {
	Init_HAL();
     69c:	0e 94 11 03 	call	0x622	; 0x622 <Init_HAL>
	timer_init();
     6a0:	0e 94 49 07 	call	0xe92	; 0xe92 <timer_init>
	CAN_init(Get_DIP_sw_word());
     6a4:	0e 94 3b 03 	call	0x676	; 0x676 <Get_DIP_sw_word>
     6a8:	0e 94 25 04 	call	0x84a	; 0x84a <CAN_init>
	ADC_init();
     6ac:	0e 94 65 00 	call	0xca	; 0xca <ADC_init>
	Init_PSC();
     6b0:	0e 94 c9 06 	call	0xd92	; 0xd92 <Init_PSC>
	
	sei();
     6b4:	78 94       	sei
	
	if( WINCH_UP_SET && WINCH_DOWN_SET ){
     6b6:	1a 9b       	sbis	0x03, 2	; 3
     6b8:	06 c0       	rjmp	.+12     	; 0x6c6 <main+0x2a>
     6ba:	34 9b       	sbis	0x06, 4	; 6
     6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <main+0x2a>
		power_up_source = SWITCH_ON;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     6c4:	15 c0       	rjmp	.+42     	; 0x6f0 <main+0x54>
	}
	else if(WINCH_UP_SET){
     6c6:	1a 9b       	sbis	0x03, 2	; 3
     6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <main+0x3c>
		PWR_ON;
     6ca:	2b 9a       	sbi	0x05, 3	; 5
		power_up_source = WINCH_ON;
     6cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		winch_state = UP;
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <winch_state>
     6d6:	0c c0       	rjmp	.+24     	; 0x6f0 <main+0x54>
	}
	else if(WINCH_DOWN_SET){
     6d8:	34 9b       	sbis	0x06, 4	; 6
     6da:	07 c0       	rjmp	.+14     	; 0x6ea <main+0x4e>
		PWR_ON;
     6dc:	2b 9a       	sbi	0x05, 3	; 5
		power_up_source = WINCH_ON;
     6de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		winch_state = DOWN;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <winch_state>
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <main+0x54>
	}
	else{
		power_up_source = SWITCH_ON;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	
	PWR_ON;
     6f0:	2b 9a       	sbi	0x05, 3	; 5
	LED_0_ON;
     6f2:	5a 9a       	sbi	0x0b, 2	; 11
	
	ADC_start_conversion();
     6f4:	0e 94 9a 00 	call	0x134	; 0x134 <ADC_start_conversion>
	
	time_stamp=timer_get();
     6f8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <timer_get>
     6fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
     700:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	life_timer=timer_get();
     704:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <timer_get>
     708:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <life_timer+0x1>
     70c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <life_timer>
	
    while(1) {
		if( timer_new_tick() ){
     710:	0e 94 83 07 	call	0xf06	; 0xf06 <timer_new_tick>
     714:	88 23       	and	r24, r24
     716:	e1 f3       	breq	.-8      	; 0x710 <main+0x74>
			main_loop();
     718:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <main_loop>
     71c:	f9 cf       	rjmp	.-14     	; 0x710 <main+0x74>

0000071e <__vector_22>:
		result |= 1<<7;
	return result; 
	
};

SIGNAL (PCINT0_vect){ //przerwanie od WINCH_UP
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	11 24       	eor	r1, r1
     728:	2f 93       	push	r18
     72a:	3f 93       	push	r19
     72c:	4f 93       	push	r20
     72e:	5f 93       	push	r21
     730:	6f 93       	push	r22
     732:	7f 93       	push	r23
     734:	8f 93       	push	r24
     736:	9f 93       	push	r25
     738:	af 93       	push	r26
     73a:	bf 93       	push	r27
     73c:	ef 93       	push	r30
     73e:	ff 93       	push	r31
	if(WINCH_UP_SET && winch_state == OFF){
     740:	1a 9b       	sbis	0x03, 2	; 3
     742:	1b c0       	rjmp	.+54     	; 0x77a <__vector_22+0x5c>
     744:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     748:	81 11       	cpse	r24, r1
     74a:	17 c0       	rjmp	.+46     	; 0x77a <__vector_22+0x5c>
		winch_state = UP;
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <winch_state>
		PSC.torque = TORQUE_INIT_VAL;
     752:	84 e6       	ldi	r24, 0x64	; 100
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <PSC+0x1>
     75a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <PSC>
		winch_timer=timer_get();
     75e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <timer_get>
     762:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <winch_timer+0x1>
     766:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <winch_timer>
		//Enable_PSC();
		if(power_up_source == SWITCH_ON){
     76a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	81 f4       	brne	.+32     	; 0x792 <__vector_22+0x74>
			power_up_source = WINCH_ON;
     772:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			PWR_ON;
     776:	2b 9a       	sbi	0x05, 3	; 5
     778:	0c c0       	rjmp	.+24     	; 0x792 <__vector_22+0x74>
		}
	}
	else if(WINCH_UP_CLEAR && winch_state != OFF){
     77a:	1a 99       	sbic	0x03, 2	; 3
     77c:	0a c0       	rjmp	.+20     	; 0x792 <__vector_22+0x74>
     77e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     782:	88 23       	and	r24, r24
     784:	31 f0       	breq	.+12     	; 0x792 <__vector_22+0x74>
		winch_state = OFF;
     786:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <winch_state>
		Disable_PSC();
     78a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Disable_PSC>
		winch_status = INIT;
     78e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <winch_status>
	}
};
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	bf 91       	pop	r27
     798:	af 91       	pop	r26
     79a:	9f 91       	pop	r25
     79c:	8f 91       	pop	r24
     79e:	7f 91       	pop	r23
     7a0:	6f 91       	pop	r22
     7a2:	5f 91       	pop	r21
     7a4:	4f 91       	pop	r20
     7a6:	3f 91       	pop	r19
     7a8:	2f 91       	pop	r18
     7aa:	0f 90       	pop	r0
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	0f 90       	pop	r0
     7b0:	1f 90       	pop	r1
     7b2:	18 95       	reti

000007b4 <__vector_23>:

SIGNAL (PCINT1_vect){ //przerwanie od WINCH_DOWN
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	2f 93       	push	r18
     7c0:	3f 93       	push	r19
     7c2:	4f 93       	push	r20
     7c4:	5f 93       	push	r21
     7c6:	6f 93       	push	r22
     7c8:	7f 93       	push	r23
     7ca:	8f 93       	push	r24
     7cc:	9f 93       	push	r25
     7ce:	af 93       	push	r26
     7d0:	bf 93       	push	r27
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31
	if(WINCH_DOWN_SET && winch_state == OFF){
     7d6:	34 9b       	sbis	0x06, 4	; 6
     7d8:	1b c0       	rjmp	.+54     	; 0x810 <__vector_23+0x5c>
     7da:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     7de:	81 11       	cpse	r24, r1
     7e0:	17 c0       	rjmp	.+46     	; 0x810 <__vector_23+0x5c>
		winch_state = DOWN;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <winch_state>
		PSC.torque = TORQUE_INIT_VAL;
     7e8:	84 e6       	ldi	r24, 0x64	; 100
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <PSC+0x1>
     7f0:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <PSC>
		winch_timer=timer_get();
     7f4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <timer_get>
     7f8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <winch_timer+0x1>
     7fc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <winch_timer>
		//Enable_PSC();
		if(power_up_source == SWITCH_ON){
     800:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	81 f4       	brne	.+32     	; 0x828 <__vector_23+0x74>
			power_up_source = WINCH_ON;
     808:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			PWR_ON;
     80c:	2b 9a       	sbi	0x05, 3	; 5
     80e:	0c c0       	rjmp	.+24     	; 0x828 <__vector_23+0x74>
		}
	}
	else if(WINCH_DOWN_CLEAR && winch_state != OFF){
     810:	34 99       	sbic	0x06, 4	; 6
     812:	0a c0       	rjmp	.+20     	; 0x828 <__vector_23+0x74>
     814:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <winch_state>
     818:	88 23       	and	r24, r24
     81a:	31 f0       	breq	.+12     	; 0x828 <__vector_23+0x74>
		winch_state = OFF;
     81c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <winch_state>
		Disable_PSC();
     820:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Disable_PSC>
		winch_status = INIT;
     824:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <winch_status>
	}
};
     828:	ff 91       	pop	r31
     82a:	ef 91       	pop	r30
     82c:	bf 91       	pop	r27
     82e:	af 91       	pop	r26
     830:	9f 91       	pop	r25
     832:	8f 91       	pop	r24
     834:	7f 91       	pop	r23
     836:	6f 91       	pop	r22
     838:	5f 91       	pop	r21
     83a:	4f 91       	pop	r20
     83c:	3f 91       	pop	r19
     83e:	2f 91       	pop	r18
     840:	0f 90       	pop	r0
     842:	0f be       	out	0x3f, r0	; 63
     844:	0f 90       	pop	r0
     846:	1f 90       	pop	r1
     848:	18 95       	reti

0000084a <CAN_init>:

struct CAN_str CAN;


//Inicjalizacja CAN
void CAN_init(uint8_t dip_sw){
     84a:	2f 92       	push	r2
     84c:	3f 92       	push	r3
     84e:	4f 92       	push	r4
     850:	5f 92       	push	r5
     852:	6f 92       	push	r6
     854:	7f 92       	push	r7
     856:	8f 92       	push	r8
     858:	9f 92       	push	r9
     85a:	af 92       	push	r10
     85c:	bf 92       	push	r11
     85e:	cf 92       	push	r12
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	00 d0       	rcall	.+0      	; 0x870 <CAN_init+0x26>
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
	uint16_t mob_3_id = 0x280 + BASE_ID; //TPDO 2
	uint16_t mob_4_id = 0x580 + BASE_ID; //SDO TX
	uint16_t mob_5_id = 0x600 + BASE_ID; //SDO RX
	
	//dodwania do adresu ustawienia z DIP switchy
	mob_1_id += dip_sw & 0x07;
     874:	87 70       	andi	r24, 0x07	; 7
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	2c 01       	movw	r4, r24
     87a:	20 ef       	ldi	r18, 0xF0	; 240
     87c:	42 1a       	sub	r4, r18
     87e:	2d ef       	ldi	r18, 0xFD	; 253
     880:	52 0a       	sbc	r5, r18
	mob_2_id += dip_sw & 0x07;
     882:	3c 01       	movw	r6, r24
     884:	30 e7       	ldi	r19, 0x70	; 112
     886:	63 1a       	sub	r6, r19
     888:	3e ef       	ldi	r19, 0xFE	; 254
     88a:	73 0a       	sbc	r7, r19
	mob_3_id += dip_sw & 0x07;
     88c:	4c 01       	movw	r8, r24
     88e:	e0 e7       	ldi	r30, 0x70	; 112
     890:	8e 1a       	sub	r8, r30
     892:	ed ef       	ldi	r30, 0xFD	; 253
     894:	9e 0a       	sbc	r9, r30
	mob_4_id += dip_sw & 0x07;
     896:	1c 01       	movw	r2, r24
     898:	f0 e7       	ldi	r31, 0x70	; 112
     89a:	2f 1a       	sub	r2, r31
     89c:	fa ef       	ldi	r31, 0xFA	; 250
     89e:	3f 0a       	sbc	r3, r31
	mob_5_id += dip_sw & 0x07;
     8a0:	9c 01       	movw	r18, r24
     8a2:	20 5f       	subi	r18, 0xF0	; 240
     8a4:	39 4f       	sbci	r19, 0xF9	; 249
     8a6:	3a 83       	std	Y+2, r19	; 0x02
     8a8:	29 83       	std	Y+1, r18	; 0x01
	
	CANGCON = ( 1 << SWRES );   // Software reset
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	CANTCON = 0x00;             // CAN timing prescaler set to 0
     8b0:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
     8b4:	e2 ee       	ldi	r30, 0xE2	; 226
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	8e 60       	ori	r24, 0x0E	; 14
     8bc:	80 83       	st	Z, r24
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
     8be:	e3 ee       	ldi	r30, 0xE3	; 227
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	8c 60       	ori	r24, 0x0C	; 12
     8c6:	80 83       	st	Z, r24
	CANBT3	|= 0x37; //CAN Baud set 125kbit
     8c8:	e4 ee       	ldi	r30, 0xE4	; 228
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	87 63       	ori	r24, 0x37	; 55
     8d0:	80 83       	st	Z, r24
	
	for ( int8_t mob=0; mob<6; mob++ ) {
     8d2:	80 e0       	ldi	r24, 0x00	; 0
		CANPAGE = ( mob << 4 );   // Selects Message Object 0-5
     8d4:	2d ee       	ldi	r18, 0xED	; 237
     8d6:	30 e0       	ldi	r19, 0x00	; 0
		CANCDMOB = 0x00;          // Disable mob
     8d8:	af ee       	ldi	r26, 0xEF	; 239
     8da:	b0 e0       	ldi	r27, 0x00	; 0
		CANSTMOB = 0x00;          // Clear mob status register;
     8dc:	4e ee       	ldi	r20, 0xEE	; 238
     8de:	50 e0       	ldi	r21, 0x00	; 0
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
	CANBT3	|= 0x37; //CAN Baud set 125kbit
	
	for ( int8_t mob=0; mob<6; mob++ ) {
		CANPAGE = ( mob << 4 );   // Selects Message Object 0-5
     8e0:	98 2f       	mov	r25, r24
     8e2:	92 95       	swap	r25
     8e4:	90 7f       	andi	r25, 0xF0	; 240
     8e6:	f9 01       	movw	r30, r18
     8e8:	90 83       	st	Z, r25
		CANCDMOB = 0x00;          // Disable mob
     8ea:	1c 92       	st	X, r1
		CANSTMOB = 0x00;          // Clear mob status register;
     8ec:	fa 01       	movw	r30, r20
     8ee:	10 82       	st	Z, r1
     8f0:	8f 5f       	subi	r24, 0xFF	; 255
	
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
	CANBT3	|= 0x37; //CAN Baud set 125kbit
	
	for ( int8_t mob=0; mob<6; mob++ ) {
     8f2:	86 30       	cpi	r24, 0x06	; 6
     8f4:	a9 f7       	brne	.-22     	; 0x8e0 <CAN_init+0x96>
		CANPAGE = ( mob << 4 );   // Selects Message Object 0-5
		CANCDMOB = 0x00;          // Disable mob
		CANSTMOB = 0x00;          // Clear mob status register;
	}
			
	CANGIE	|= ( 1 << ENIT ) | (1<<ENRX); //Enable Receive Interrupt
     8f6:	eb ed       	ldi	r30, 0xDB	; 219
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	80 6a       	ori	r24, 0xA0	; 160
     8fe:	80 83       	st	Z, r24
	
	//MOb 0 configuration SYNC
	CANPAGE	 = (MOb_0<<4);
     900:	0f 2e       	mov	r0, r31
     902:	fd ee       	ldi	r31, 0xED	; 237
     904:	cf 2e       	mov	r12, r31
     906:	d1 2c       	mov	r13, r1
     908:	f0 2d       	mov	r31, r0
     90a:	f6 01       	movw	r30, r12
     90c:	10 82       	st	Z, r1
	CANIDM4 = 0x00; //full mask setting
     90e:	0f 2e       	mov	r0, r31
     910:	f4 ef       	ldi	r31, 0xF4	; 244
     912:	ef 2e       	mov	r14, r31
     914:	f1 2c       	mov	r15, r1
     916:	f0 2d       	mov	r31, r0
     918:	f7 01       	movw	r30, r14
     91a:	10 82       	st	Z, r1
	CANIDM3 = 0x00; //full mask setting
     91c:	05 ef       	ldi	r16, 0xF5	; 245
     91e:	10 e0       	ldi	r17, 0x00	; 0
     920:	f8 01       	movw	r30, r16
     922:	10 82       	st	Z, r1
	CANIDM2 = 0xFF; //full mask setting
     924:	66 ef       	ldi	r22, 0xF6	; 246
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	99 24       	eor	r9, r9
     92a:	9a 94       	dec	r9
     92c:	fb 01       	movw	r30, r22
     92e:	90 82       	st	Z, r9
	CANIDM1 = 0xFF; //full mask setting
     930:	47 ef       	ldi	r20, 0xF7	; 247
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	fa 01       	movw	r30, r20
     936:	90 82       	st	Z, r9
	CANCDMOB = 0x00;
     938:	af ee       	ldi	r26, 0xEF	; 239
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	1c 92       	st	X, r1
	CANCDMOB |= RECEPTION;
     93e:	8c 91       	ld	r24, X
     940:	80 68       	ori	r24, 0x80	; 128
     942:	8c 93       	st	X, r24
	CANIDT4 = 0x00;
     944:	20 ef       	ldi	r18, 0xF0	; 240
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	f9 01       	movw	r30, r18
     94a:	10 82       	st	Z, r1
	CANIDT3 = 0x00;
     94c:	81 ef       	ldi	r24, 0xF1	; 241
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	fc 01       	movw	r30, r24
     952:	10 82       	st	Z, r1
	CANIDT2 = ((mob_0_id & 0x07) << 5);
     954:	e2 ef       	ldi	r30, 0xF2	; 242
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	10 82       	st	Z, r1
	CANIDT1 = (mob_0_id >> 3);
     95a:	0f 2e       	mov	r0, r31
     95c:	f3 ef       	ldi	r31, 0xF3	; 243
     95e:	af 2e       	mov	r10, r31
     960:	b1 2c       	mov	r11, r1
     962:	f0 2d       	mov	r31, r0
     964:	68 94       	set
     966:	55 24       	eor	r5, r5
     968:	54 f8       	bld	r5, 4
     96a:	f5 01       	movw	r30, r10
     96c:	50 82       	st	Z, r5
	CANIE2	|= (1<<IEMOB0); //Enable Interrupt MOb 0
     96e:	ee ed       	ldi	r30, 0xDE	; 222
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	70 80       	ld	r7, Z
     974:	f7 2d       	mov	r31, r7
     976:	f1 60       	ori	r31, 0x01	; 1
     978:	7f 2e       	mov	r7, r31
     97a:	ee ed       	ldi	r30, 0xDE	; 222
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	70 82       	st	Z, r7
	
	//MOb 1 configuration odbierana paczka RPDO 1 0x200+
	CANPAGE	 = (MOb_1<<4);
     980:	f6 01       	movw	r30, r12
     982:	50 82       	st	Z, r5
	CANIDM4 = 0x00; //full mask setting
     984:	f7 01       	movw	r30, r14
     986:	10 82       	st	Z, r1
	CANIDM3 = 0x00; //full mask setting
     988:	f8 01       	movw	r30, r16
     98a:	10 82       	st	Z, r1
	CANIDM2 = 0xFF; //full mask setting
     98c:	fb 01       	movw	r30, r22
     98e:	90 82       	st	Z, r9
	CANIDM1 = 0xFF; //full mask setting
     990:	fa 01       	movw	r30, r20
     992:	90 82       	st	Z, r9
	CANCDMOB = 0x00;
     994:	1c 92       	st	X, r1
	CANCDMOB |= RECEPTION | ( 8 << DLC0);
     996:	7c 90       	ld	r7, X
     998:	f7 2d       	mov	r31, r7
     99a:	f8 68       	ori	r31, 0x88	; 136
     99c:	fc 93       	st	X, r31
	CANIDT4 = 0x00;
     99e:	f9 01       	movw	r30, r18
     9a0:	10 82       	st	Z, r1
	CANIDT3 = 0x00;
     9a2:	fc 01       	movw	r30, r24
     9a4:	10 82       	st	Z, r1
	CANIDT2 = ((mob_1_id & 0x07) << 5);
     9a6:	44 0c       	add	r4, r4
     9a8:	44 0c       	add	r4, r4
     9aa:	44 0c       	add	r4, r4
     9ac:	44 0c       	add	r4, r4
     9ae:	44 0c       	add	r4, r4
     9b0:	e2 ef       	ldi	r30, 0xF2	; 242
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	40 82       	st	Z, r4
	CANIDT1 = (mob_1_id >> 3);
     9b6:	0f 2e       	mov	r0, r31
     9b8:	f2 e4       	ldi	r31, 0x42	; 66
     9ba:	7f 2e       	mov	r7, r31
     9bc:	f0 2d       	mov	r31, r0
     9be:	f5 01       	movw	r30, r10
     9c0:	70 82       	st	Z, r7
	CANIE2	|= (1<<IEMOB1); //Enable Interrupt MOb 1
     9c2:	ee ed       	ldi	r30, 0xDE	; 222
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	70 80       	ld	r7, Z
     9c8:	f7 2d       	mov	r31, r7
     9ca:	f2 60       	ori	r31, 0x02	; 2
     9cc:	7f 2e       	mov	r7, r31
     9ce:	ee ed       	ldi	r30, 0xDE	; 222
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	70 82       	st	Z, r7
	
	//MOb 2 configuration nadawana paczka TPDO 1 0x180+
	CANPAGE	 = (MOb_2<<4);
     9d4:	68 94       	set
     9d6:	77 24       	eor	r7, r7
     9d8:	75 f8       	bld	r7, 5
     9da:	f6 01       	movw	r30, r12
     9dc:	70 82       	st	Z, r7
	CANIDM4 = 0x00; //full mask setting
     9de:	f7 01       	movw	r30, r14
     9e0:	10 82       	st	Z, r1
	CANIDM3 = 0x00; //full mask setting
     9e2:	f8 01       	movw	r30, r16
     9e4:	10 82       	st	Z, r1
	CANIDM2 = (0x07 <<5); //full mask setting
     9e6:	0f 2e       	mov	r0, r31
     9e8:	f0 ee       	ldi	r31, 0xE0	; 224
     9ea:	7f 2e       	mov	r7, r31
     9ec:	f0 2d       	mov	r31, r0
     9ee:	fb 01       	movw	r30, r22
     9f0:	70 82       	st	Z, r7
	CANIDM1 = 0xFF; //full mask setting
     9f2:	fa 01       	movw	r30, r20
     9f4:	90 82       	st	Z, r9
	CANCDMOB = 0x00;
     9f6:	1c 92       	st	X, r1
	//CANCDMOB |= TRANSMISSION;
	CANIDT4 = 0x00;
     9f8:	f9 01       	movw	r30, r18
     9fa:	10 82       	st	Z, r1
	CANIDT3 = 0x00;
     9fc:	fc 01       	movw	r30, r24
     9fe:	10 82       	st	Z, r1
	CANIDT2 = ((mob_2_id & 0x07) << 5);
     a00:	66 0c       	add	r6, r6
     a02:	66 0c       	add	r6, r6
     a04:	66 0c       	add	r6, r6
     a06:	66 0c       	add	r6, r6
     a08:	66 0c       	add	r6, r6
     a0a:	e2 ef       	ldi	r30, 0xF2	; 242
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	60 82       	st	Z, r6
	CANIDT1 = (mob_2_id >> 3);
     a10:	0f 2e       	mov	r0, r31
     a12:	f2 e3       	ldi	r31, 0x32	; 50
     a14:	6f 2e       	mov	r6, r31
     a16:	f0 2d       	mov	r31, r0
     a18:	f5 01       	movw	r30, r10
     a1a:	60 82       	st	Z, r6
	CANIE2	|= (1<<IEMOB2); //Enable Interrupt MOb 4
     a1c:	ee ed       	ldi	r30, 0xDE	; 222
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	60 80       	ld	r6, Z
     a22:	f6 2d       	mov	r31, r6
     a24:	f4 60       	ori	r31, 0x04	; 4
     a26:	6f 2e       	mov	r6, r31
     a28:	ee ed       	ldi	r30, 0xDE	; 222
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	60 82       	st	Z, r6
	
	
	//MOb 3 configuration nadawana paczka TPDO 2 0x280+
	CANPAGE	 = (MOb_3<<4);
     a2e:	0f 2e       	mov	r0, r31
     a30:	f0 e3       	ldi	r31, 0x30	; 48
     a32:	6f 2e       	mov	r6, r31
     a34:	f0 2d       	mov	r31, r0
     a36:	f6 01       	movw	r30, r12
     a38:	60 82       	st	Z, r6
	CANIDM4 = 0x00; //full mask setting
     a3a:	f7 01       	movw	r30, r14
     a3c:	10 82       	st	Z, r1
	CANIDM3 = 0x00; //full mask setting
     a3e:	f8 01       	movw	r30, r16
     a40:	10 82       	st	Z, r1
	CANIDM2 = (0x07 <<5); //full mask setting
     a42:	fb 01       	movw	r30, r22
     a44:	70 82       	st	Z, r7
	CANIDM1 = 0xFF; //full mask setting
     a46:	fa 01       	movw	r30, r20
     a48:	90 82       	st	Z, r9
	CANCDMOB = 0x00;
     a4a:	1c 92       	st	X, r1
	//CANCDMOB |= TRANSMISSION;
	CANIDT4 = 0x00;
     a4c:	f9 01       	movw	r30, r18
     a4e:	10 82       	st	Z, r1
	CANIDT3 = 0x00;
     a50:	fc 01       	movw	r30, r24
     a52:	10 82       	st	Z, r1
	CANIDT2 = ((mob_3_id & 0x07) << 5);
     a54:	88 0c       	add	r8, r8
     a56:	88 0c       	add	r8, r8
     a58:	88 0c       	add	r8, r8
     a5a:	88 0c       	add	r8, r8
     a5c:	88 0c       	add	r8, r8
     a5e:	e2 ef       	ldi	r30, 0xF2	; 242
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 82       	st	Z, r8
	CANIDT1 = (mob_3_id >> 3);
     a64:	0f 2e       	mov	r0, r31
     a66:	f2 e5       	ldi	r31, 0x52	; 82
     a68:	8f 2e       	mov	r8, r31
     a6a:	f0 2d       	mov	r31, r0
     a6c:	f5 01       	movw	r30, r10
     a6e:	80 82       	st	Z, r8
	CANIE2	|= (1<<IEMOB3); //Enable Interrupt MOb 3
     a70:	ee ed       	ldi	r30, 0xDE	; 222
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 80       	ld	r8, Z
     a76:	f8 2d       	mov	r31, r8
     a78:	f8 60       	ori	r31, 0x08	; 8
     a7a:	8f 2e       	mov	r8, r31
     a7c:	ee ed       	ldi	r30, 0xDE	; 222
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 82       	st	Z, r8
	
	//MOb 4 configuration nadawana paczka SDO TX
	CANPAGE	 = (MOb_4<<4);
     a82:	68 94       	set
     a84:	88 24       	eor	r8, r8
     a86:	86 f8       	bld	r8, 6
     a88:	f6 01       	movw	r30, r12
     a8a:	80 82       	st	Z, r8
	CANIDM4 = 0x00; //full mask setting
     a8c:	f7 01       	movw	r30, r14
     a8e:	10 82       	st	Z, r1
	CANIDM3 = 0x00; //full mask setting
     a90:	f8 01       	movw	r30, r16
     a92:	10 82       	st	Z, r1
	CANIDM2 = (0x07 <<5); //full mask setting
     a94:	fb 01       	movw	r30, r22
     a96:	70 82       	st	Z, r7
	CANIDM1 = 0xFF; //full mask setting
     a98:	fa 01       	movw	r30, r20
     a9a:	90 82       	st	Z, r9
	CANCDMOB = 0x00;
     a9c:	1c 92       	st	X, r1
	//CANCDMOB |= TRANSMISSION;
	CANIDT4 = 0x00;
     a9e:	f9 01       	movw	r30, r18
     aa0:	10 82       	st	Z, r1
	CANIDT3 = 0x00;
     aa2:	fc 01       	movw	r30, r24
     aa4:	10 82       	st	Z, r1
	CANIDT2 = ((mob_4_id & 0x07) << 5);
     aa6:	22 0c       	add	r2, r2
     aa8:	22 0c       	add	r2, r2
     aaa:	22 0c       	add	r2, r2
     aac:	22 0c       	add	r2, r2
     aae:	22 0c       	add	r2, r2
     ab0:	e2 ef       	ldi	r30, 0xF2	; 242
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	20 82       	st	Z, r2
	CANIDT1 = (mob_4_id >> 3);
     ab6:	0f 2e       	mov	r0, r31
     ab8:	f2 eb       	ldi	r31, 0xB2	; 178
     aba:	8f 2e       	mov	r8, r31
     abc:	f0 2d       	mov	r31, r0
     abe:	f5 01       	movw	r30, r10
     ac0:	80 82       	st	Z, r8
	CANIE2	|= (1<<IEMOB4); //Enable Interrupt MOb 3
     ac2:	ee ed       	ldi	r30, 0xDE	; 222
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 80       	ld	r8, Z
     ac8:	f8 2d       	mov	r31, r8
     aca:	f0 61       	ori	r31, 0x10	; 16
     acc:	8f 2e       	mov	r8, r31
     ace:	ee ed       	ldi	r30, 0xDE	; 222
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 82       	st	Z, r8
	
	//MOb 5 configuration odbierana paczka SDO RX
	CANPAGE	 = (MOb_5<<4);
     ad4:	0f 2e       	mov	r0, r31
     ad6:	f0 e5       	ldi	r31, 0x50	; 80
     ad8:	8f 2e       	mov	r8, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	f6 01       	movw	r30, r12
     ade:	80 82       	st	Z, r8
	CANIDM4 = 0x00; //full mask setting
     ae0:	f7 01       	movw	r30, r14
     ae2:	10 82       	st	Z, r1
	CANIDM3 = 0x00; //full mask setting
     ae4:	f8 01       	movw	r30, r16
     ae6:	10 82       	st	Z, r1
	CANIDM2 = 0xFF; //full mask setting
     ae8:	fb 01       	movw	r30, r22
     aea:	90 82       	st	Z, r9
	CANIDM1 = 0xFF; //full mask setting
     aec:	fa 01       	movw	r30, r20
     aee:	90 82       	st	Z, r9
	CANCDMOB = 0x00;
     af0:	1c 92       	st	X, r1
	CANCDMOB |= RECEPTION | ( 8 << DLC0);
     af2:	4c 91       	ld	r20, X
     af4:	48 68       	ori	r20, 0x88	; 136
     af6:	4c 93       	st	X, r20
	CANIDT4 = 0x00;
     af8:	f9 01       	movw	r30, r18
     afa:	10 82       	st	Z, r1
	CANIDT3 = 0x00;
     afc:	fc 01       	movw	r30, r24
     afe:	10 82       	st	Z, r1
	CANIDT2 = ((mob_5_id & 0x07) << 5);
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	82 95       	swap	r24
     b04:	88 0f       	add	r24, r24
     b06:	80 7e       	andi	r24, 0xE0	; 224
     b08:	e2 ef       	ldi	r30, 0xF2	; 242
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 83       	st	Z, r24
	CANIDT1 = (mob_5_id >> 3);
     b0e:	82 ec       	ldi	r24, 0xC2	; 194
     b10:	f5 01       	movw	r30, r10
     b12:	80 83       	st	Z, r24
	CANIE2	|= (1<<IEMOB5); //Enable Interrupt MOb 1
     b14:	ee ed       	ldi	r30, 0xDE	; 222
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	80 62       	ori	r24, 0x20	; 32
     b1c:	80 83       	st	Z, r24
	
	
	CLEAR_CAN_interrupt_flag
     b1e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <CAN_interrupt_flag>
	
	CANGCON |= (1<<ENASTB); //Enable controller
     b22:	e8 ed       	ldi	r30, 0xD8	; 216
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	82 60       	ori	r24, 0x02	; 2
     b2a:	80 83       	st	Z, r24
}
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	df 90       	pop	r13
     b3e:	cf 90       	pop	r12
     b40:	bf 90       	pop	r11
     b42:	af 90       	pop	r10
     b44:	9f 90       	pop	r9
     b46:	8f 90       	pop	r8
     b48:	7f 90       	pop	r7
     b4a:	6f 90       	pop	r6
     b4c:	5f 90       	pop	r5
     b4e:	4f 90       	pop	r4
     b50:	3f 90       	pop	r3
     b52:	2f 90       	pop	r2
     b54:	08 95       	ret

00000b56 <__vector_18>:

//Obs³uga przerwania
SIGNAL ( CAN_INT_vect ){              // use interrupts
     b56:	1f 92       	push	r1
     b58:	0f 92       	push	r0
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	0f 92       	push	r0
     b5e:	11 24       	eor	r1, r1
     b60:	8f 93       	push	r24
	
	SET_CAN_interrupt_flag
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <CAN_interrupt_flag>

} 
     b68:	8f 91       	pop	r24
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <CAN_task>:
}*/

void CAN_task(){
	static uint8_t Update_data_flag=0;
	
	if(CAN_interrupt_flag !=0){	//Jeœli zg³oszone przerwanie
     b74:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <CAN_interrupt_flag>
     b78:	88 23       	and	r24, r24
     b7a:	09 f4       	brne	.+2      	; 0xb7e <CAN_task+0xa>
     b7c:	78 c0       	rjmp	.+240    	; 0xc6e <CAN_task+0xfa>
		CLEAR_CAN_interrupt_flag
     b7e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <CAN_interrupt_flag>
		CANPAGE = CANHPMOB & 0xF0;      // Selects MOB with highest priority interrupt 
     b82:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     b86:	80 7f       	andi	r24, 0xF0	; 240
     b88:	ed ee       	ldi	r30, 0xED	; 237
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 83       	st	Z, r24
		
		
		if((CANPAGE>>4) == MOb_0){ //SYNC - odbiera
     b8e:	80 81       	ld	r24, Z
     b90:	82 95       	swap	r24
     b92:	8f 70       	andi	r24, 0x0F	; 15
     b94:	81 f4       	brne	.+32     	; 0xbb6 <CAN_task+0x42>
			if(CANSTMOB & ( 1 << RXOK)){	//obiór SYNC-a
     b96:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     b9a:	85 ff       	sbrs	r24, 5
     b9c:	03 c0       	rjmp	.+6      	; 0xba4 <CAN_task+0x30>
				SET_SYNC_flag;				//ustaw flagê ob³sugi synca
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <CAN_SYNC_flag>
			}
			CANSTMOB=0x00;
     ba4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x00;			//restart MOB-a
     ba8:	ef ee       	ldi	r30, 0xEF	; 239
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	10 82       	st	Z, r1
			CANCDMOB |= RECEPTION;		
     bae:	80 81       	ld	r24, Z
     bb0:	80 68       	ori	r24, 0x80	; 128
     bb2:	80 83       	st	Z, r24
     bb4:	08 95       	ret
		}
		
		else if((CANPAGE>>4) == MOb_1){ //RPDO 1 - odbiera
     bb6:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     bba:	82 95       	swap	r24
     bbc:	8f 70       	andi	r24, 0x0F	; 15
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	d1 f4       	brne	.+52     	; 0xbf6 <CAN_task+0x82>
			if(CANSTMOB & ( 1 << RXOK)){	//obiór SYNC-a
     bc2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     bc6:	85 ff       	sbrs	r24, 5
     bc8:	0d c0       	rjmp	.+26     	; 0xbe4 <CAN_task+0x70>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
					MOb_data[MOb_1][byte_nr] = CANMSG;
     bce:	aa ef       	ldi	r26, 0xFA	; 250
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	2c 91       	ld	r18, X
     bd4:	fc 01       	movw	r30, r24
     bd6:	ec 56       	subi	r30, 0x6C	; 108
     bd8:	fe 4f       	sbci	r31, 0xFE	; 254
     bda:	20 87       	std	Z+8, r18	; 0x08
     bdc:	01 96       	adiw	r24, 0x01	; 1
			CANCDMOB |= RECEPTION;		
		}
		
		else if((CANPAGE>>4) == MOb_1){ //RPDO 1 - odbiera
			if(CANSTMOB & ( 1 << RXOK)){	//obiór SYNC-a
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
     bde:	88 30       	cpi	r24, 0x08	; 8
     be0:	91 05       	cpc	r25, r1
     be2:	b9 f7       	brne	.-18     	; 0xbd2 <CAN_task+0x5e>
					MOb_data[MOb_1][byte_nr] = CANMSG;
				}				
			}
			CANSTMOB=0x00;
     be4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x00;			//restart MOB-a
     be8:	ef ee       	ldi	r30, 0xEF	; 239
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	10 82       	st	Z, r1
			CANCDMOB |= RECEPTION;
     bee:	80 81       	ld	r24, Z
     bf0:	80 68       	ori	r24, 0x80	; 128
     bf2:	80 83       	st	Z, r24
     bf4:	08 95       	ret
		}
		
		//czyszczenie flag przerwania dla paczek nadaj¹cych
		else if((CANPAGE>>4) == MOb_2){//TPDO 1
     bf6:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     bfa:	82 95       	swap	r24
     bfc:	8f 70       	andi	r24, 0x0F	; 15
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	19 f4       	brne	.+6      	; 0xc08 <CAN_task+0x94>
			CANSTMOB=0x00;
     c02:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     c06:	08 95       	ret
		}
		
		else if((CANPAGE>>4) == MOb_3){//TPDO 2
     c08:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     c0c:	82 95       	swap	r24
     c0e:	8f 70       	andi	r24, 0x0F	; 15
     c10:	83 30       	cpi	r24, 0x03	; 3
     c12:	19 f4       	brne	.+6      	; 0xc1a <CAN_task+0xa6>
			CANSTMOB=0x00;
     c14:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     c18:	08 95       	ret
		}
		
		else if((CANPAGE>>4) == MOb_4){//SDO TX
     c1a:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     c1e:	82 95       	swap	r24
     c20:	8f 70       	andi	r24, 0x0F	; 15
     c22:	84 30       	cpi	r24, 0x04	; 4
     c24:	19 f4       	brne	.+6      	; 0xc2c <CAN_task+0xb8>
			CANSTMOB=0x00;
     c26:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     c2a:	08 95       	ret
		}
		
		else if((CANPAGE>>4) == MOb_5){ //SDO RX - odbiera
     c2c:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     c30:	82 95       	swap	r24
     c32:	8f 70       	andi	r24, 0x0F	; 15
     c34:	85 30       	cpi	r24, 0x05	; 5
     c36:	09 f0       	breq	.+2      	; 0xc3a <CAN_task+0xc6>
     c38:	ab c0       	rjmp	.+342    	; 0xd90 <CAN_task+0x21c>
			if(CANSTMOB & ( 1 << RXOK)){	
     c3a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     c3e:	85 ff       	sbrs	r24, 5
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <CAN_task+0xe8>
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
					MOb_data[MOb_5][byte_nr] = CANMSG;
     c46:	aa ef       	ldi	r26, 0xFA	; 250
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	2c 91       	ld	r18, X
     c4c:	fc 01       	movw	r30, r24
     c4e:	ec 56       	subi	r30, 0x6C	; 108
     c50:	fe 4f       	sbci	r31, 0xFE	; 254
     c52:	20 a7       	std	Z+40, r18	; 0x28
     c54:	01 96       	adiw	r24, 0x01	; 1
			CANSTMOB=0x00;
		}
		
		else if((CANPAGE>>4) == MOb_5){ //SDO RX - odbiera
			if(CANSTMOB & ( 1 << RXOK)){	
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
     c56:	88 30       	cpi	r24, 0x08	; 8
     c58:	91 05       	cpc	r25, r1
     c5a:	b9 f7       	brne	.-18     	; 0xc4a <CAN_task+0xd6>
					MOb_data[MOb_5][byte_nr] = CANMSG;
				}
			}
			CANSTMOB=0x00;
     c5c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x00;			//restart MOB-a
     c60:	ef ee       	ldi	r30, 0xEF	; 239
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	10 82       	st	Z, r1
			CANCDMOB |= RECEPTION;
     c66:	80 81       	ld	r24, Z
     c68:	80 68       	ori	r24, 0x80	; 128
     c6a:	80 83       	st	Z, r24
     c6c:	08 95       	ret
		}
	}
	else if(Update_data_flag){//mechanizm przepisywania danych PDO - po ka¿dym sync przepisywane s¹ œwie¿e dane
     c6e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Update_data_flag.1530>
     c72:	88 23       	and	r24, r24
     c74:	09 f4       	brne	.+2      	; 0xc78 <CAN_task+0x104>
     c76:	4d c0       	rjmp	.+154    	; 0xd12 <CAN_task+0x19e>
		static uint8_t frame=0;
		if(frame == MOb_1 ){ //RPDO 1
     c78:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <frame.1539>
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	21 f4       	brne	.+8      	; 0xc88 <CAN_task+0x114>
			//CAN.status_word = MOb_data[frame][1]<<8 | MOb_data[frame][0];
			frame++;
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <frame.1539>
     c86:	08 95       	ret
		}
		else if(frame == MOb_2 ){ //TPDO 1 - nadaje
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	f9 f4       	brne	.+62     	; 0xcca <CAN_task+0x156>
			MOb_data[frame][0] = CAN.state;
     c8c:	aa e8       	ldi	r26, 0x8A	; 138
     c8e:	b1 e0       	ldi	r27, 0x01	; 1
     c90:	13 96       	adiw	r26, 0x03	; 3
     c92:	8c 91       	ld	r24, X
     c94:	13 97       	sbiw	r26, 0x03	; 3
     c96:	e4 e9       	ldi	r30, 0x94	; 148
     c98:	f1 e0       	ldi	r31, 0x01	; 1
     c9a:	80 8b       	std	Z+16, r24	; 0x10
			MOb_data[frame][1] = CAN.water;
     c9c:	11 96       	adiw	r26, 0x01	; 1
     c9e:	8c 91       	ld	r24, X
     ca0:	11 97       	sbiw	r26, 0x01	; 1
     ca2:	81 8b       	std	Z+17, r24	; 0x11
			MOb_data[frame][2] = CAN.supply_voltage;
     ca4:	12 96       	adiw	r26, 0x02	; 2
     ca6:	8c 91       	ld	r24, X
     ca8:	12 97       	sbiw	r26, 0x02	; 2
     caa:	82 8b       	std	Z+18, r24	; 0x12
			MOb_data[frame][3] = CAN.current;
     cac:	8c 91       	ld	r24, X
     cae:	83 8b       	std	Z+19, r24	; 0x13
			MOb_data[frame][4] = CAN.diag_1;
     cb0:	14 96       	adiw	r26, 0x04	; 4
     cb2:	8c 91       	ld	r24, X
     cb4:	14 97       	sbiw	r26, 0x04	; 4
     cb6:	84 8b       	std	Z+20, r24	; 0x14
			MOb_data[frame][5] = CAN.diag_2;
     cb8:	15 96       	adiw	r26, 0x05	; 5
     cba:	8c 91       	ld	r24, X
     cbc:	85 8b       	std	Z+21, r24	; 0x15
			MOb_data[frame][6] = 0x00;
     cbe:	16 8a       	std	Z+22, r1	; 0x16
			MOb_data[frame][7] = 0x00;
     cc0:	17 8a       	std	Z+23, r1	; 0x17
			frame++;
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <frame.1539>
     cc8:	08 95       	ret
		}
		else if(frame == MOb_3 ){ //TPDO 2 nadaje
     cca:	83 30       	cpi	r24, 0x03	; 3
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <CAN_task+0x15c>
     cce:	60 c0       	rjmp	.+192    	; 0xd90 <CAN_task+0x21c>
			MOb_data[frame][0] = CAN.state;
     cd0:	aa e8       	ldi	r26, 0x8A	; 138
     cd2:	b1 e0       	ldi	r27, 0x01	; 1
     cd4:	13 96       	adiw	r26, 0x03	; 3
     cd6:	8c 91       	ld	r24, X
     cd8:	13 97       	sbiw	r26, 0x03	; 3
     cda:	e4 e9       	ldi	r30, 0x94	; 148
     cdc:	f1 e0       	ldi	r31, 0x01	; 1
     cde:	80 8f       	std	Z+24, r24	; 0x18
			MOb_data[frame][1] = CAN.water;
     ce0:	11 96       	adiw	r26, 0x01	; 1
     ce2:	8c 91       	ld	r24, X
     ce4:	11 97       	sbiw	r26, 0x01	; 1
     ce6:	81 8f       	std	Z+25, r24	; 0x19
			MOb_data[frame][2] = CAN.water >>8;
     ce8:	08 2e       	mov	r0, r24
     cea:	00 0c       	add	r0, r0
     cec:	99 0b       	sbc	r25, r25
     cee:	92 8f       	std	Z+26, r25	; 0x1a
			MOb_data[frame][3] = CAN.current_raw ;
     cf0:	18 96       	adiw	r26, 0x08	; 8
     cf2:	9c 91       	ld	r25, X
     cf4:	18 97       	sbiw	r26, 0x08	; 8
     cf6:	19 96       	adiw	r26, 0x09	; 9
     cf8:	8c 91       	ld	r24, X
     cfa:	19 97       	sbiw	r26, 0x09	; 9
     cfc:	93 8f       	std	Z+27, r25	; 0x1b
			MOb_data[frame][4] = CAN.current_raw >> 8;
     cfe:	84 8f       	std	Z+28, r24	; 0x1c
			MOb_data[frame][5] = CAN.current ;
     d00:	8c 91       	ld	r24, X
     d02:	85 8f       	std	Z+29, r24	; 0x1d
			MOb_data[frame][6] = CAN.current >> 8;
     d04:	16 8e       	std	Z+30, r1	; 0x1e
			MOb_data[frame][7] = 0x00 | (uint8_t)(CAN.current > 256);
     d06:	17 8e       	std	Z+31, r1	; 0x1f
			CLEAR_update_data_flag;
     d08:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Update_data_flag.1530>
			frame = 0;
     d0c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <frame.1539>
     d10:	08 95       	ret
		}						
	}
	else if( CAN_SYNC_flag  ){ //){ //Zleæ transmisjê po koleji transmisjê kolejnych paczek
     d12:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <CAN_SYNC_flag>
     d16:	88 23       	and	r24, r24
     d18:	d9 f1       	breq	.+118    	; 0xd90 <CAN_task+0x21c>
		static uint8_t mob=MOb_2; //pierwszy MOb odbieraj¹cy
		CANPAGE = ( mob << 4 );						// Selects Message Object 0-5
     d1a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mob.1540>
     d1e:	82 95       	swap	r24
     d20:	80 7f       	andi	r24, 0xF0	; 240
     d22:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if((CANEN2 & ( 1 << mob )) == 0){		//Jeœli MOb jest wolny
     d26:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <mob.1540>
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <CAN_task+0x1c2>
     d32:	95 95       	asr	r25
     d34:	87 95       	ror	r24
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <CAN_task+0x1be>
     d3a:	80 fd       	sbrc	r24, 0
     d3c:	19 c0       	rjmp	.+50     	; 0xd70 <CAN_task+0x1fc>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
				CANMSG = MOb_data[mob][byte_nr];
     d42:	aa ef       	ldi	r26, 0xFA	; 250
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <mob.1540>
     d4a:	fc 01       	movw	r30, r24
     d4c:	38 e0       	ldi	r19, 0x08	; 8
     d4e:	23 9f       	mul	r18, r19
     d50:	e0 0d       	add	r30, r0
     d52:	f1 1d       	adc	r31, r1
     d54:	11 24       	eor	r1, r1
     d56:	ec 56       	subi	r30, 0x6C	; 108
     d58:	fe 4f       	sbci	r31, 0xFE	; 254
     d5a:	20 81       	ld	r18, Z
     d5c:	2c 93       	st	X, r18
     d5e:	01 96       	adiw	r24, 0x01	; 1
	}
	else if( CAN_SYNC_flag  ){ //){ //Zleæ transmisjê po koleji transmisjê kolejnych paczek
		static uint8_t mob=MOb_2; //pierwszy MOb odbieraj¹cy
		CANPAGE = ( mob << 4 );						// Selects Message Object 0-5
		if((CANEN2 & ( 1 << mob )) == 0){		//Jeœli MOb jest wolny
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
     d60:	88 30       	cpi	r24, 0x08	; 8
     d62:	91 05       	cpc	r25, r1
     d64:	81 f7       	brne	.-32     	; 0xd46 <CAN_task+0x1d2>
				CANMSG = MOb_data[mob][byte_nr];
			}
			//czyszczenie rejestru statusu
			CANSTMOB = 0x00;
     d66:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			//komenda nadania
			CANCDMOB = TRANSMISSION | ( 8 << DLC0);//zleæ transmisjê 8 bajtów
     d6a:	88 e4       	ldi	r24, 0x48	; 72
     d6c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		}
		if(mob >= MOb_3 ){
     d70:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mob.1540>
     d74:	83 30       	cpi	r24, 0x03	; 3
     d76:	48 f0       	brcs	.+18     	; 0xd8a <CAN_task+0x216>
			 mob=MOb_2;
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mob.1540>
			 CLEAR_SYNC_flag
     d7e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <CAN_SYNC_flag>
			 SET_update_data_flag
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Update_data_flag.1530>
     d88:	08 95       	ret
		}		
		else mob++;
     d8a:	8f 5f       	subi	r24, 0xFF	; 255
     d8c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mob.1540>
     d90:	08 95       	ret

00000d92 <Init_PSC>:


void Init_PSC(){
	
	//Inicjalizacja portów na wyjœciowe i ustawienie wyjœæ na 0
	DDR(PSC0A_PORT) |= (1<<PSC0A_PIN);
     d92:	50 9a       	sbi	0x0a, 0	; 10
	PORT(PSC0A_PORT) &= ~(_BV(PSC0A_PIN));
     d94:	58 98       	cbi	0x0b, 0	; 11
	PORT(PSC0A_PORT) |= (_BV(PSC0A_PIN));
     d96:	58 9a       	sbi	0x0b, 0	; 11
	
	//rejestr konfiguracjyny
	//PULOCK - jednoczena zmiana rejestrów gdy zwoniony na 0
	//PMODE - 0 One Ramp Mode
	//POPx - 1 aktywny stan wysoki
	PCNF |= (0<<PULOCK) | (0<<PMODE) | (1<<POPB) | (1<<POPA);
     d98:	e5 eb       	ldi	r30, 0xB5	; 181
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8c 60       	ori	r24, 0x0C	; 12
     da0:	80 83       	st	Z, r24
	
	//PPRE - prescaler na wejœciu modu³o- brak preskalera
	//PCLKSEL - ¿ród³o zegara PLL
	//PRUN - start modu³u
	PCTL = (1<<PPRE1) | (0<<PPRE0) | (0<<PCLKSEL) | (0<<SWAP0) | (0<<SWAP1) | (0<<SWAP2);
     da2:	e7 eb       	ldi	r30, 0xB7	; 183
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 e8       	ldi	r24, 0x80	; 128
     da8:	80 83       	st	Z, r24
	//POVEN - zabezpieczenie przed overlapem
	//PELEV - stan wysoki powoduje b³¹d
	//PFLTE0 filtr cyforwy na wejsciu fault
	//PRFM - zatrzymaj modu³ w przypadku b³êdu
	//PMIC0 |= (0<<POVEN0) | (1<<PELEV0) | (1<<PFLTE0) | (1<<PRFM02) | (1<<PRFM01);
	PMIC0 |= (1<<POVEN0) | (0<<PELEV0) | (0<<PFLTE0) | (0<<PRFM02) | (0<<PRFM01);
     daa:	a8 eb       	ldi	r26, 0xB8	; 184
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	8c 91       	ld	r24, X
     db0:	80 68       	ori	r24, 0x80	; 128
     db2:	8c 93       	st	X, r24
	
	//Przewanie od Overcurrent
	//PIM |= (1<<PEVE0);
	
	//Ustawia TOP licznika
	POCR_RB = PSC_TOP;
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	97 e0       	ldi	r25, 0x07	; 7
     db8:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     dbc:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	
	//W³¹cz kana³ 0A
	POC = (1<<POEN0A);
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	
	//ustawia wartoœæ pocz¹tkow¹ momentu
	PSC.torque = TORQUE_INIT_VAL;
     dc6:	84 e6       	ldi	r24, 0x64	; 100
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <PSC+0x1>
     dce:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <PSC>
	POCR0RA = ((uint32_t)PSC_TOP*TORQUE_INIT_VAL)/1000;
	PCTL |= (1<<PRUN);
}

inline void Disable_PSC(){
	PCTL &= ~(1<<PRUN);
     dd2:	80 81       	ld	r24, Z
     dd4:	8e 7f       	andi	r24, 0xFE	; 254
     dd6:	80 83       	st	Z, r24
     dd8:	08 95       	ret

00000dda <Enable_PSC>:
	Disable_PSC();
	
}

inline void Enable_PSC(){
	POCR0RA = ((uint32_t)PSC_TOP*TORQUE_INIT_VAL)/1000;
     dda:	8c ec       	ldi	r24, 0xCC	; 204
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     de2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	PCTL |= (1<<PRUN);
     de6:	e7 eb       	ldi	r30, 0xB7	; 183
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	81 60       	ori	r24, 0x01	; 1
     dee:	80 83       	st	Z, r24
     df0:	08 95       	ret

00000df2 <Disable_PSC>:
}

inline void Disable_PSC(){
	PCTL &= ~(1<<PRUN);
     df2:	e7 eb       	ldi	r30, 0xB7	; 183
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8e 7f       	andi	r24, 0xFE	; 254
     dfa:	80 83       	st	Z, r24
     dfc:	08 95       	ret

00000dfe <PSC_Task>:

void PSC_Task(){
	static uint16_t torque_prev = 0;
	static uint16_t duty_cycle=0;
	
	if(PSC.torque != torque_prev){
     dfe:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <PSC>
     e02:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <PSC+0x1>
     e06:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <torque_prev.1535>
     e0a:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <torque_prev.1535+0x1>
     e0e:	82 17       	cp	r24, r18
     e10:	93 07       	cpc	r25, r19
     e12:	49 f1       	breq	.+82     	; 0xe66 <PSC_Task+0x68>
		
		duty_cycle = PSC.torque;
			
		if(duty_cycle>1000){
     e14:	89 3e       	cpi	r24, 0xE9	; 233
     e16:	23 e0       	ldi	r18, 0x03	; 3
     e18:	92 07       	cpc	r25, r18
     e1a:	28 f4       	brcc	.+10     	; 0xe26 <PSC_Task+0x28>
	static uint16_t torque_prev = 0;
	static uint16_t duty_cycle=0;
	
	if(PSC.torque != torque_prev){
		
		duty_cycle = PSC.torque;
     e1c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <duty_cycle.1536+0x1>
     e20:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <duty_cycle.1536>
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <PSC_Task+0x34>
			
		if(duty_cycle>1000){
			duty_cycle=1000;
     e26:	88 ee       	ldi	r24, 0xE8	; 232
     e28:	93 e0       	ldi	r25, 0x03	; 3
     e2a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <duty_cycle.1536+0x1>
     e2e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <duty_cycle.1536>
		}
		
		POCR0RA = ((uint32_t)PSC_TOP*duty_cycle)/1000;
     e32:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <duty_cycle.1536>
     e36:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <duty_cycle.1536+0x1>
     e3a:	af ef       	ldi	r26, 0xFF	; 255
     e3c:	b7 e0       	ldi	r27, 0x07	; 7
     e3e:	0e 94 02 08 	call	0x1004	; 0x1004 <__umulhisi3>
     e42:	28 ee       	ldi	r18, 0xE8	; 232
     e44:	33 e0       	ldi	r19, 0x03	; 3
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodsi4>
     e4e:	30 93 a3 00 	sts	0x00A3, r19	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     e52:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
		
		torque_prev = PSC.torque;
     e56:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <PSC>
     e5a:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <PSC+0x1>
     e5e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <torque_prev.1535+0x1>
     e62:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <torque_prev.1535>
     e66:	08 95       	ret

00000e68 <__vector_5>:
	
		 
}

//przerwanie od overcurrent
SIGNAL (PSC_FAULT_vect){
     e68:	1f 92       	push	r1
     e6a:	0f 92       	push	r0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	0f 92       	push	r0
     e70:	11 24       	eor	r1, r1
     e72:	8f 93       	push	r24
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
	
	PSC_CLEAR_INTERRUPT
     e78:	ec eb       	ldi	r30, 0xBC	; 188
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	82 60       	ori	r24, 0x02	; 2
     e80:	80 83       	st	Z, r24
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	8f 91       	pop	r24
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	0f 90       	pop	r0
     e8e:	1f 90       	pop	r1
     e90:	18 95       	reti

00000e92 <timer_init>:
		return (time_2 - time_1);
	}
	else{
		return (time_2+(0xFFFF-time_1));
	}
};
     e92:	84 b5       	in	r24, 0x24	; 36
     e94:	82 60       	ori	r24, 0x02	; 2
     e96:	84 bd       	out	0x24, r24	; 36
     e98:	89 ef       	ldi	r24, 0xF9	; 249
     e9a:	87 bd       	out	0x27, r24	; 39
     e9c:	ee e6       	ldi	r30, 0x6E	; 110
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	80 83       	st	Z, r24
     ea6:	85 b5       	in	r24, 0x25	; 37
     ea8:	83 60       	ori	r24, 0x03	; 3
     eaa:	85 bd       	out	0x25, r24	; 37
     eac:	e1 e8       	ldi	r30, 0x81	; 129
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	83 60       	ori	r24, 0x03	; 3
     eb4:	80 83       	st	Z, r24
     eb6:	08 95       	ret

00000eb8 <timer_get>:
     eb8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <timer>
     ebc:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <timer+0x1>
     ec0:	08 95       	ret

00000ec2 <timer_time_elapsed>:
     ec2:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <timer>
     ec6:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <timer+0x1>
     eca:	28 17       	cp	r18, r24
     ecc:	39 07       	cpc	r19, r25
     ece:	28 f0       	brcs	.+10     	; 0xeda <timer_time_elapsed+0x18>
     ed0:	a9 01       	movw	r20, r18
     ed2:	48 1b       	sub	r20, r24
     ed4:	59 0b       	sbc	r21, r25
     ed6:	ca 01       	movw	r24, r20
     ed8:	08 95       	ret
     eda:	28 1b       	sub	r18, r24
     edc:	39 0b       	sbc	r19, r25
     ede:	c9 01       	movw	r24, r18
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	08 95       	ret

00000ee4 <timer_time_elapsed_us>:
     ee4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ee8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     eec:	28 17       	cp	r18, r24
     eee:	39 07       	cpc	r19, r25
     ef0:	28 f0       	brcs	.+10     	; 0xefc <timer_time_elapsed_us+0x18>
     ef2:	a9 01       	movw	r20, r18
     ef4:	48 1b       	sub	r20, r24
     ef6:	59 0b       	sbc	r21, r25
     ef8:	ca 01       	movw	r24, r20
     efa:	08 95       	ret
     efc:	28 1b       	sub	r18, r24
     efe:	39 0b       	sbc	r19, r25
     f00:	c9 01       	movw	r24, r18
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	08 95       	ret

00000f06 <timer_new_tick>:
     f06:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <time_stamp.1525>
     f0a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <time_stamp.1525+0x1>
     f0e:	0e 94 72 07 	call	0xee4	; 0xee4 <timer_time_elapsed_us>
     f12:	49 97       	sbiw	r24, 0x19	; 25
     f14:	50 f0       	brcs	.+20     	; 0xf2a <timer_new_tick+0x24>
     f16:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f1a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f1e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <time_stamp.1525+0x1>
     f22:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <time_stamp.1525>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	08 95       	ret
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	08 95       	ret

00000f2e <__vector_15>:

//Przepe³nienie linika 0
SIGNAL(TIMER0_COMPA_vect) {
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
	//zwiêksz TIMER
	timer++;
     f3c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <timer>
     f40:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <timer+0x1>
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <timer+0x1>
     f4a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timer>
}
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__vector_14>:

//Przepe³nienie linika 1
SIGNAL(TIMER1_OVF_vect){
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1

}
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <__vector_12>:
//Comapare A Timer1
SIGNAL(TIMER1_COMPA_vect){
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
		
}
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <__vector_13>:
//Comapare B Timer1
SIGNAL(TIMER1_COMPB_vect ){
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
	
}
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	0f 90       	pop	r0
     f94:	1f 90       	pop	r1
     f96:	18 95       	reti

00000f98 <__divmodhi4>:
     f98:	97 fb       	bst	r25, 7
     f9a:	07 2e       	mov	r0, r23
     f9c:	16 f4       	brtc	.+4      	; 0xfa2 <__divmodhi4+0xa>
     f9e:	00 94       	com	r0
     fa0:	07 d0       	rcall	.+14     	; 0xfb0 <__divmodhi4_neg1>
     fa2:	77 fd       	sbrc	r23, 7
     fa4:	09 d0       	rcall	.+18     	; 0xfb8 <__divmodhi4_neg2>
     fa6:	0e 94 18 08 	call	0x1030	; 0x1030 <__udivmodhi4>
     faa:	07 fc       	sbrc	r0, 7
     fac:	05 d0       	rcall	.+10     	; 0xfb8 <__divmodhi4_neg2>
     fae:	3e f4       	brtc	.+14     	; 0xfbe <__divmodhi4_exit>

00000fb0 <__divmodhi4_neg1>:
     fb0:	90 95       	com	r25
     fb2:	81 95       	neg	r24
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	08 95       	ret

00000fb8 <__divmodhi4_neg2>:
     fb8:	70 95       	com	r23
     fba:	61 95       	neg	r22
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255

00000fbe <__divmodhi4_exit>:
     fbe:	08 95       	ret

00000fc0 <__udivmodsi4>:
     fc0:	a1 e2       	ldi	r26, 0x21	; 33
     fc2:	1a 2e       	mov	r1, r26
     fc4:	aa 1b       	sub	r26, r26
     fc6:	bb 1b       	sub	r27, r27
     fc8:	fd 01       	movw	r30, r26
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <__udivmodsi4_ep>

00000fcc <__udivmodsi4_loop>:
     fcc:	aa 1f       	adc	r26, r26
     fce:	bb 1f       	adc	r27, r27
     fd0:	ee 1f       	adc	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	a2 17       	cp	r26, r18
     fd6:	b3 07       	cpc	r27, r19
     fd8:	e4 07       	cpc	r30, r20
     fda:	f5 07       	cpc	r31, r21
     fdc:	20 f0       	brcs	.+8      	; 0xfe6 <__udivmodsi4_ep>
     fde:	a2 1b       	sub	r26, r18
     fe0:	b3 0b       	sbc	r27, r19
     fe2:	e4 0b       	sbc	r30, r20
     fe4:	f5 0b       	sbc	r31, r21

00000fe6 <__udivmodsi4_ep>:
     fe6:	66 1f       	adc	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	1a 94       	dec	r1
     ff0:	69 f7       	brne	.-38     	; 0xfcc <__udivmodsi4_loop>
     ff2:	60 95       	com	r22
     ff4:	70 95       	com	r23
     ff6:	80 95       	com	r24
     ff8:	90 95       	com	r25
     ffa:	9b 01       	movw	r18, r22
     ffc:	ac 01       	movw	r20, r24
     ffe:	bd 01       	movw	r22, r26
    1000:	cf 01       	movw	r24, r30
    1002:	08 95       	ret

00001004 <__umulhisi3>:
    1004:	a2 9f       	mul	r26, r18
    1006:	b0 01       	movw	r22, r0
    1008:	b3 9f       	mul	r27, r19
    100a:	c0 01       	movw	r24, r0
    100c:	a3 9f       	mul	r26, r19
    100e:	70 0d       	add	r23, r0
    1010:	81 1d       	adc	r24, r1
    1012:	11 24       	eor	r1, r1
    1014:	91 1d       	adc	r25, r1
    1016:	b2 9f       	mul	r27, r18
    1018:	70 0d       	add	r23, r0
    101a:	81 1d       	adc	r24, r1
    101c:	11 24       	eor	r1, r1
    101e:	91 1d       	adc	r25, r1
    1020:	08 95       	ret

00001022 <__usmulhisi3>:
    1022:	0e 94 02 08 	call	0x1004	; 0x1004 <__umulhisi3>

00001026 <__usmulhisi3_tail>:
    1026:	b7 ff       	sbrs	r27, 7
    1028:	08 95       	ret
    102a:	82 1b       	sub	r24, r18
    102c:	93 0b       	sbc	r25, r19
    102e:	08 95       	ret

00001030 <__udivmodhi4>:
    1030:	aa 1b       	sub	r26, r26
    1032:	bb 1b       	sub	r27, r27
    1034:	51 e1       	ldi	r21, 0x11	; 17
    1036:	07 c0       	rjmp	.+14     	; 0x1046 <__udivmodhi4_ep>

00001038 <__udivmodhi4_loop>:
    1038:	aa 1f       	adc	r26, r26
    103a:	bb 1f       	adc	r27, r27
    103c:	a6 17       	cp	r26, r22
    103e:	b7 07       	cpc	r27, r23
    1040:	10 f0       	brcs	.+4      	; 0x1046 <__udivmodhi4_ep>
    1042:	a6 1b       	sub	r26, r22
    1044:	b7 0b       	sbc	r27, r23

00001046 <__udivmodhi4_ep>:
    1046:	88 1f       	adc	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	5a 95       	dec	r21
    104c:	a9 f7       	brne	.-22     	; 0x1038 <__udivmodhi4_loop>
    104e:	80 95       	com	r24
    1050:	90 95       	com	r25
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	08 95       	ret

00001058 <_exit>:
    1058:	f8 94       	cli

0000105a <__stop_program>:
    105a:	ff cf       	rjmp	.-2      	; 0x105a <__stop_program>
