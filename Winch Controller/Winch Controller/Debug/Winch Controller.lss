
Winch Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001dc6  00001e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dc6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000197  00800120  00800120  00001e9a  2**0
                  ALLOC
  3 .eeprom       00000028  00810000  00810000  00001e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001ec2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ef4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000208  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002190  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b21  00000000  00000000  000042cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001cf0  00000000  00000000  00004ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005a0  00000000  00000000  00006ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a15  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000010b6  00000000  00000000  00007a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b0  00000000  00000000  00008b4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a3 00 	jmp	0x146	; 0x146 <__ctors_end>
       4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
       8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
       c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      10:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      14:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_5>
      18:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      1c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      20:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      24:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      28:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      2c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      30:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__vector_12>
      34:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__vector_13>
      38:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__vector_14>
      3c:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__vector_15>
      40:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      44:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      48:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__vector_18>
      4c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      50:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__vector_20>
      54:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      58:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_22>
      5c:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__vector_23>
      60:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      64:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      68:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      6c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_27>
      70:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      74:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      78:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
      7c:	5d 08       	sbc	r5, r13
      7e:	8b 08       	sbc	r8, r11
      80:	c4 08       	sbc	r12, r4
      82:	e8 08       	sbc	r14, r8
      84:	0c 09       	sbc	r16, r12
      86:	28 09       	sbc	r18, r8
      88:	61 09       	sbc	r22, r1
      8a:	8a 09       	sbc	r24, r10
      8c:	15 0a       	sbc	r1, r21
      8e:	38 0a       	sbc	r3, r24
      90:	5b 0a       	sbc	r5, r27
      92:	7e 0a       	sbc	r7, r30
      94:	9a 0a       	sbc	r9, r26
      96:	db 0a       	sbc	r13, r27
      98:	04 0b       	sbc	r16, r20

0000009a <__trampolines_end>:
      9a:	45 45       	sbci	r20, 0x55	; 85
      9c:	50 52       	subi	r21, 0x20	; 32
      9e:	4f 4d       	sbci	r20, 0xDF	; 223
      a0:	20 77       	andi	r18, 0x70	; 112
      a2:	72 69       	ori	r23, 0x92	; 146
      a4:	74 65       	ori	r23, 0x54	; 84
      a6:	20 66       	ori	r18, 0x60	; 96
      a8:	61 69       	ori	r22, 0x91	; 145
      aa:	6c 65       	ori	r22, 0x5C	; 92
      ac:	64 0a       	sbc	r6, r20
	...

000000af <__c.2059>:
      af:	45 45 50 52 4f 4d 20 77 72 69 74 65 20 43 52 43     EEPROM write CRC
      bf:	20 6d 69 73 73 6d 61 74 63 68 20 2d 20 72 65 74      missmatch - ret
      cf:	72 69 6e 67 0a 00                                   ring..

000000d5 <__c.2057>:
      d5:	45 45 50 52 4f 4d 20 77 72 69 74 65 20 6f 6b 0a     EEPROM write ok.
	...

000000e6 <__c.2040>:
      e6:	45 45 50 52 4f 4d 20 72 65 61 64 20 66 61 69 6c     EEPROM read fail
      f6:	65 64 0a 00                                         ed..

000000fa <__c.2035>:
      fa:	45 45 50 52 4f 4d 20 72 65 61 64 20 43 52 43 20     EEPROM read CRC 
     10a:	6d 69 73 73 6d 61 74 63 68 20 2d 20 72 65 74 72     missmatch - retr
     11a:	69 6e 67 0a 00                                      ing..

0000011f <__c.2033>:
     11f:	45 45 50 52 4f 4d 20 72 65 61 64 20 6f 6b 0a 00     EEPROM read ok..

0000012f <__c.2347>:
     12f:	4c 6f 61 64 69 6e 67 20 64 65 66 61 75 6c 74 20     Loading default 
     13f:	76 61 6c 75 65 73 00                                values.

00000146 <__ctors_end>:
     146:	11 24       	eor	r1, r1
     148:	1f be       	out	0x3f, r1	; 63
     14a:	cf ef       	ldi	r28, 0xFF	; 255
     14c:	d8 e0       	ldi	r29, 0x08	; 8
     14e:	de bf       	out	0x3e, r29	; 62
     150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
     152:	11 e0       	ldi	r17, 0x01	; 1
     154:	a0 e0       	ldi	r26, 0x00	; 0
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	e6 ec       	ldi	r30, 0xC6	; 198
     15a:	fd e1       	ldi	r31, 0x1D	; 29
     15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x10>
     15e:	05 90       	lpm	r0, Z+
     160:	0d 92       	st	X+, r0
     162:	a0 32       	cpi	r26, 0x20	; 32
     164:	b1 07       	cpc	r27, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0xc>

00000168 <__do_clear_bss>:
     168:	22 e0       	ldi	r18, 0x02	; 2
     16a:	a0 e2       	ldi	r26, 0x20	; 32
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
     170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
     172:	a7 3b       	cpi	r26, 0xB7	; 183
     174:	b2 07       	cpc	r27, r18
     176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
     178:	0e 94 03 05 	call	0xa06	; 0xa06 <main>
     17c:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <_exit>

00000180 <__bad_interrupt>:
     180:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000184 <ADC_switch>:
	
	adc_ready_to_send = 0;
}

void ADC_switch(uint8_t channel){
		ADMUX = (ADMUX & 0xF0) | (channel & ADMUX_MASK);
     184:	ec e7       	ldi	r30, 0x7C	; 124
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	90 81       	ld	r25, Z
     18a:	8f 70       	andi	r24, 0x0F	; 15
     18c:	90 7f       	andi	r25, 0xF0	; 240
     18e:	89 2b       	or	r24, r25
     190:	80 83       	st	Z, r24
     192:	08 95       	ret

00000194 <ADC_init>:

void ADC_init(void){
	int8_t c;
	
	//Wybór Ÿród³a wyzwalania - 
	ADCSRB |= (1<<ADHSM) | (1<<AREFEN)| (0<<ADTS3) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
     194:	eb e7       	ldi	r30, 0x7B	; 123
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	80 6a       	ori	r24, 0xA0	; 160
     19c:	80 83       	st	Z, r24
	// ADEN - aktywowanie ADC
	// ADATE - zewnêtrzne Ÿród³o wyzwalania
	// ADPSX - ustawienie preskalera 0 1 1 - clk/8 ->2Mhz
	// ADIE - aktywowanie przerwania
	// ADSC - start pomiaru
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (0<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     19e:	ea e7       	ldi	r30, 0x7A	; 122
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	8f 68       	ori	r24, 0x8F	; 143
     1a6:	80 83       	st	Z, r24
			
	// REFS1	REFS0
	// 0		0	-nap odniesienia z VREF
	// 1		1	-nap odniesienia z wew referencji
	// MUX2..0  -wybór wejscia przetwornika			
	ADMUX |= (0<<REFS1) | (1<<REFS0);
     1a8:	ec e7       	ldi	r30, 0x7C	; 124
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	80 64       	ori	r24, 0x40	; 64
     1b0:	80 83       	st	Z, r24
	
	// init adc state struct
	adc_state.active_channel  = 0;
     1b2:	e7 ee       	ldi	r30, 0xE7	; 231
     1b4:	f1 e0       	ldi	r31, 0x01	; 1
     1b6:	11 82       	std	Z+1, r1	; 0x01
	adc_state.buffor_position = 0;
     1b8:	12 82       	std	Z+2, r1	; 0x02
	
	//translate index to ADC channel num
	channel_idx_to_num[ADC_CHANNEL_BOARD_POSITION]   = ADC_CHANNEL_BOARD_POSITION_NUM;
     1ba:	a8 ed       	ldi	r26, 0xD8	; 216
     1bc:	b1 e0       	ldi	r27, 0x01	; 1
     1be:	84 e0       	ldi	r24, 0x04	; 4
     1c0:	12 96       	adiw	r26, 0x02	; 2
     1c2:	8c 93       	st	X, r24
     1c4:	12 97       	sbiw	r26, 0x02	; 2
	channel_idx_to_num[ADC_CHANNEL_VOLTAGE] = ADC_CHANNEL_VOLTAGE_NUM;
     1c6:	89 e0       	ldi	r24, 0x09	; 9
     1c8:	11 96       	adiw	r26, 0x01	; 1
     1ca:	8c 93       	st	X, r24
     1cc:	11 97       	sbiw	r26, 0x01	; 1
	channel_idx_to_num[ADC_CHANNEL_CURRENT] = ADC_CHANNEL_CURRENT_NUM;
     1ce:	8a e0       	ldi	r24, 0x0A	; 10
     1d0:	8c 93       	st	X, r24
	
	// init sum
	for( c = 0 ; c < ADC_MAX_CHANNEL ; c++ ){
		adc_state.sum[c] = 0;
     1d2:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <adc_state+0x5e>
     1d6:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <adc_state+0x5d>
     1da:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <adc_state+0x60>
     1de:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <adc_state+0x5f>
     1e2:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <adc_state+0x62>
     1e6:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <adc_state+0x61>
	}

	// trun on first channel	
	ADC_switch(channel_idx_to_num[adc_state.active_channel]);
     1ea:	e1 81       	ldd	r30, Z+1	; 0x01
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	e8 52       	subi	r30, 0x28	; 40
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	80 81       	ld	r24, Z
     1f4:	0e 94 c2 00 	call	0x184	; 0x184 <ADC_switch>
	
	adc_ready_to_send = 0;
     1f8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <adc_ready_to_send>
     1fc:	08 95       	ret

000001fe <ADC_start_conversion>:
void ADC_switch(uint8_t channel){
		ADMUX = (ADMUX & 0xF0) | (channel & ADMUX_MASK);
}

void ADC_start_conversion(){
	ADCSRA |= (1<<ADSC);
     1fe:	ea e7       	ldi	r30, 0x7A	; 122
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	80 64       	ori	r24, 0x40	; 64
     206:	80 83       	st	Z, r24
     208:	08 95       	ret

0000020a <ADC_task>:
}

// ADC task function, called every loop in main_loop
void ADC_task(void){
     20a:	cf 92       	push	r12
     20c:	df 92       	push	r13
     20e:	ef 92       	push	r14
     210:	ff 92       	push	r15
     212:	0f 93       	push	r16
     214:	1f 93       	push	r17
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
	/* if we have new results */
	if( HAS_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED)) {
     21a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <adc_state>
     21e:	80 ff       	sbrs	r24, 0
     220:	9c c0       	rjmp	.+312    	; 0x35a <ADC_task+0x150>
		adc_results.raw_current = adc_state.sum[ADC_CHANNEL_CURRENT] / ADC_SAMPELS;
     222:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <adc_state+0x5d>
     226:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <adc_state+0x5e>
     22a:	2f e0       	ldi	r18, 0x0F	; 15
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	b9 01       	movw	r22, r18
     230:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__divmodhi4>
     234:	7b 01       	movw	r14, r22
     236:	eb ed       	ldi	r30, 0xDB	; 219
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	71 83       	std	Z+1, r23	; 0x01
     23c:	60 83       	st	Z, r22
		adc_results.raw_voltage = adc_state.sum[ADC_CHANNEL_VOLTAGE] / ADC_SAMPELS;
     23e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <adc_state+0x5f>
     242:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <adc_state+0x60>
     246:	b9 01       	movw	r22, r18
     248:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__divmodhi4>
     24c:	6b 01       	movw	r12, r22
     24e:	73 83       	std	Z+3, r23	; 0x03
     250:	62 83       	std	Z+2, r22	; 0x02
		adc_results.raw_board_position   = adc_state.sum[ADC_CHANNEL_BOARD_POSITION]   / ADC_SAMPELS;		
     252:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <adc_state+0x61>
     256:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <adc_state+0x62>
     25a:	b9 01       	movw	r22, r18
     25c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__divmodhi4>
     260:	8b 01       	movw	r16, r22
     262:	75 83       	std	Z+5, r23	; 0x05
     264:	64 83       	std	Z+4, r22	; 0x04
		
		/* voltage result */
		
		adc_results.voltage = (((int32_t)adc_results.raw_voltage * non_volatile_data.adc_voltage_scale) / ADC_RAW_MAX_VAL);
     266:	ca e4       	ldi	r28, 0x4A	; 74
     268:	d2 e0       	ldi	r29, 0x02	; 2
     26a:	2e 85       	ldd	r18, Y+14	; 0x0e
     26c:	3f 85       	ldd	r19, Y+15	; 0x0f
     26e:	d6 01       	movw	r26, r12
     270:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__usmulhisi3>
     274:	2f ef       	ldi	r18, 0xFF	; 255
     276:	33 e0       	ldi	r19, 0x03	; 3
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__divmodsi4>
		if(non_volatile_data.adc_voltage_offset < 0 && adc_results.voltage > -non_volatile_data.adc_voltage_offset){
     280:	8c 85       	ldd	r24, Y+12	; 0x0c
     282:	9d 85       	ldd	r25, Y+13	; 0x0d
     284:	99 23       	and	r25, r25
     286:	74 f4       	brge	.+28     	; 0x2a4 <ADC_task+0x9a>
     288:	ee 27       	eor	r30, r30
     28a:	ff 27       	eor	r31, r31
     28c:	e8 1b       	sub	r30, r24
     28e:	f9 0b       	sbc	r31, r25
     290:	e2 17       	cp	r30, r18
     292:	f3 07       	cpc	r31, r19
     294:	3c f4       	brge	.+14     	; 0x2a4 <ADC_task+0x9a>
			adc_results.voltage += non_volatile_data.adc_voltage_offset;
     296:	28 0f       	add	r18, r24
     298:	39 1f       	adc	r19, r25
     29a:	30 93 e4 01 	sts	0x01E4, r19	; 0x8001e4 <adc_results+0x9>
     29e:	20 93 e3 01 	sts	0x01E3, r18	; 0x8001e3 <adc_results+0x8>
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <ADC_task+0xa2>
		}
		else {
			adc_results.voltage = 0;
     2a4:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <adc_results+0x9>
     2a8:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <adc_results+0x8>
		}
		
		/* current result */
		adc_results.current = (((int32_t)adc_results.raw_current * non_volatile_data.adc_current_scale) / ADC_RAW_MAX_VAL);
     2ac:	ca e4       	ldi	r28, 0x4A	; 74
     2ae:	d2 e0       	ldi	r29, 0x02	; 2
     2b0:	2a 85       	ldd	r18, Y+10	; 0x0a
     2b2:	3b 85       	ldd	r19, Y+11	; 0x0b
     2b4:	d7 01       	movw	r26, r14
     2b6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__usmulhisi3>
     2ba:	2f ef       	ldi	r18, 0xFF	; 255
     2bc:	33 e0       	ldi	r19, 0x03	; 3
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__divmodsi4>
		if(non_volatile_data.adc_current_offset < 0 && adc_results.current > -non_volatile_data.adc_current_offset){
     2c6:	88 85       	ldd	r24, Y+8	; 0x08
     2c8:	99 85       	ldd	r25, Y+9	; 0x09
     2ca:	99 23       	and	r25, r25
     2cc:	74 f4       	brge	.+28     	; 0x2ea <ADC_task+0xe0>
     2ce:	ee 27       	eor	r30, r30
     2d0:	ff 27       	eor	r31, r31
     2d2:	e8 1b       	sub	r30, r24
     2d4:	f9 0b       	sbc	r31, r25
     2d6:	e2 17       	cp	r30, r18
     2d8:	f3 07       	cpc	r31, r19
     2da:	3c f4       	brge	.+14     	; 0x2ea <ADC_task+0xe0>
			adc_results.current += non_volatile_data.adc_current_offset;
     2dc:	28 0f       	add	r18, r24
     2de:	39 1f       	adc	r19, r25
     2e0:	30 93 e2 01 	sts	0x01E2, r19	; 0x8001e2 <adc_results+0x7>
     2e4:	20 93 e1 01 	sts	0x01E1, r18	; 0x8001e1 <adc_results+0x6>
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <ADC_task+0xe8>
		}
		else {
			adc_results.current = 0;
     2ea:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <adc_results+0x7>
     2ee:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <adc_results+0x6>
		}
		
		/*board position results*/
		adc_results.board_position = (((int32_t)adc_results.raw_board_position * non_volatile_data.adc_board_position_scale) / ADC_RAW_MAX_VAL) + non_volatile_data.adc_board_position_offset;
     2f2:	ca e4       	ldi	r28, 0x4A	; 74
     2f4:	d2 e0       	ldi	r29, 0x02	; 2
     2f6:	aa 81       	ldd	r26, Y+2	; 0x02
     2f8:	bb 81       	ldd	r27, Y+3	; 0x03
     2fa:	98 01       	movw	r18, r16
     2fc:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__mulhisi3>
     300:	2f ef       	ldi	r18, 0xFF	; 255
     302:	33 e0       	ldi	r19, 0x03	; 3
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__divmodsi4>
     30c:	88 81       	ld	r24, Y
     30e:	99 81       	ldd	r25, Y+1	; 0x01
     310:	28 0f       	add	r18, r24
     312:	39 1f       	adc	r19, r25
     314:	30 93 e6 01 	sts	0x01E6, r19	; 0x8001e6 <adc_results+0xb>
     318:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <adc_results+0xa>
		if(adc_results.board_position > non_volatile_data.adc_board_position_max){
     31c:	8c 81       	ldd	r24, Y+4	; 0x04
     31e:	9d 81       	ldd	r25, Y+5	; 0x05
     320:	82 17       	cp	r24, r18
     322:	93 07       	cpc	r25, r19
     324:	2c f4       	brge	.+10     	; 0x330 <ADC_task+0x126>
			adc_results.board_position = non_volatile_data.adc_board_position_max;
     326:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <adc_results+0xb>
     32a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <adc_results+0xa>
     32e:	0b c0       	rjmp	.+22     	; 0x346 <ADC_task+0x13c>
		}
		else if(adc_results.board_position < non_volatile_data.adc_board_position_min){
     330:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <non_volatile_data+0x6>
     334:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <non_volatile_data+0x7>
     338:	28 17       	cp	r18, r24
     33a:	39 07       	cpc	r19, r25
     33c:	24 f4       	brge	.+8      	; 0x346 <ADC_task+0x13c>
			adc_results.board_position = non_volatile_data.adc_board_position_min;
     33e:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <adc_results+0xb>
     342:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <adc_results+0xa>
		}
			
		adc_ready_to_send++;
     346:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <adc_ready_to_send>
     34a:	8f 5f       	subi	r24, 0xFF	; 255
     34c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <adc_ready_to_send>
		/* clearing flag for conversion resulsts */
		CLEAR_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED);
     350:	e7 ee       	ldi	r30, 0xE7	; 231
     352:	f1 e0       	ldi	r31, 0x01	; 1
     354:	80 81       	ld	r24, Z
     356:	8e 7f       	andi	r24, 0xFE	; 254
     358:	80 83       	st	Z, r24
	}
};
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	08 95       	ret

0000036c <__vector_27>:

// ADC conversion completed signal
SIGNAL(ADC_vect){
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	0f 92       	push	r0
     374:	11 24       	eor	r1, r1
     376:	2f 93       	push	r18
     378:	3f 93       	push	r19
     37a:	4f 93       	push	r20
     37c:	5f 93       	push	r21
     37e:	6f 93       	push	r22
     380:	7f 93       	push	r23
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
     386:	af 93       	push	r26
     388:	bf 93       	push	r27
     38a:	ef 93       	push	r30
     38c:	ff 93       	push	r31
	/* save result */
	
	/* removing old result from the sum */
	if( HAS_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF) ) {
     38e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <adc_state>
     392:	81 ff       	sbrs	r24, 1
     394:	21 c0       	rjmp	.+66     	; 0x3d8 <__vector_27+0x6c>
		adc_state.sum[adc_state.active_channel] -= adc_state.buffor[adc_state.active_channel][adc_state.buffor_position];
     396:	a7 ee       	ldi	r26, 0xE7	; 231
     398:	b1 e0       	ldi	r27, 0x01	; 1
     39a:	11 96       	adiw	r26, 0x01	; 1
     39c:	ec 91       	ld	r30, X
     39e:	11 97       	sbiw	r26, 0x01	; 1
     3a0:	12 96       	adiw	r26, 0x02	; 2
     3a2:	8c 91       	ld	r24, X
     3a4:	12 97       	sbiw	r26, 0x02	; 2
     3a6:	9f e0       	ldi	r25, 0x0F	; 15
     3a8:	e9 9f       	mul	r30, r25
     3aa:	f0 01       	movw	r30, r0
     3ac:	11 24       	eor	r1, r1
     3ae:	e8 0f       	add	r30, r24
     3b0:	f1 1d       	adc	r31, r1
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	e9 51       	subi	r30, 0x19	; 25
     3b8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ba:	23 81       	ldd	r18, Z+3	; 0x03
     3bc:	34 81       	ldd	r19, Z+4	; 0x04
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	ec 91       	ld	r30, X
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	ee 0f       	add	r30, r30
     3c6:	ff 1f       	adc	r31, r31
     3c8:	ec 5b       	subi	r30, 0xBC	; 188
     3ca:	fd 4f       	sbci	r31, 0xFD	; 253
     3cc:	80 81       	ld	r24, Z
     3ce:	91 81       	ldd	r25, Z+1	; 0x01
     3d0:	82 1b       	sub	r24, r18
     3d2:	93 0b       	sbc	r25, r19
     3d4:	91 83       	std	Z+1, r25	; 0x01
     3d6:	80 83       	st	Z, r24
	}
	/* putting new result to the buffor */
	adc_state.buffor[adc_state.active_channel][adc_state.buffor_position] = ADC;
     3d8:	a7 ee       	ldi	r26, 0xE7	; 231
     3da:	b1 e0       	ldi	r27, 0x01	; 1
     3dc:	11 96       	adiw	r26, 0x01	; 1
     3de:	ec 91       	ld	r30, X
     3e0:	11 97       	sbiw	r26, 0x01	; 1
     3e2:	12 96       	adiw	r26, 0x02	; 2
     3e4:	9c 91       	ld	r25, X
     3e6:	12 97       	sbiw	r26, 0x02	; 2
     3e8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     3ec:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     3f0:	8f e0       	ldi	r24, 0x0F	; 15
     3f2:	8e 9f       	mul	r24, r30
     3f4:	f0 01       	movw	r30, r0
     3f6:	11 24       	eor	r1, r1
     3f8:	e9 0f       	add	r30, r25
     3fa:	f1 1d       	adc	r31, r1
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	e9 51       	subi	r30, 0x19	; 25
     402:	fe 4f       	sbci	r31, 0xFE	; 254
     404:	34 83       	std	Z+4, r19	; 0x04
     406:	23 83       	std	Z+3, r18	; 0x03
	/* adding new result to sum */
	adc_state.sum[adc_state.active_channel] += adc_state.buffor[adc_state.active_channel][adc_state.buffor_position];
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	ec 91       	ld	r30, X
     40c:	11 97       	sbiw	r26, 0x01	; 1
     40e:	12 96       	adiw	r26, 0x02	; 2
     410:	9c 91       	ld	r25, X
     412:	12 97       	sbiw	r26, 0x02	; 2
     414:	8e 9f       	mul	r24, r30
     416:	f0 01       	movw	r30, r0
     418:	11 24       	eor	r1, r1
     41a:	e9 0f       	add	r30, r25
     41c:	f1 1d       	adc	r31, r1
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	e9 51       	subi	r30, 0x19	; 25
     424:	fe 4f       	sbci	r31, 0xFE	; 254
     426:	83 81       	ldd	r24, Z+3	; 0x03
     428:	94 81       	ldd	r25, Z+4	; 0x04
     42a:	11 96       	adiw	r26, 0x01	; 1
     42c:	ec 91       	ld	r30, X
     42e:	11 97       	sbiw	r26, 0x01	; 1
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	ee 0f       	add	r30, r30
     434:	ff 1f       	adc	r31, r31
     436:	ec 5b       	subi	r30, 0xBC	; 188
     438:	fd 4f       	sbci	r31, 0xFD	; 253
     43a:	20 81       	ld	r18, Z
     43c:	31 81       	ldd	r19, Z+1	; 0x01
     43e:	82 0f       	add	r24, r18
     440:	93 1f       	adc	r25, r19
     442:	91 83       	std	Z+1, r25	; 0x01
     444:	80 83       	st	Z, r24
	
	/* inc channel position counters */
	if( ++adc_state.active_channel == ADC_MAX_CHANNEL) {
     446:	11 96       	adiw	r26, 0x01	; 1
     448:	8c 91       	ld	r24, X
     44a:	11 97       	sbiw	r26, 0x01	; 1
     44c:	8f 5f       	subi	r24, 0xFF	; 255
     44e:	11 96       	adiw	r26, 0x01	; 1
     450:	8c 93       	st	X, r24
     452:	11 97       	sbiw	r26, 0x01	; 1
     454:	83 30       	cpi	r24, 0x03	; 3
     456:	a1 f4       	brne	.+40     	; 0x480 <__FUSE_REGION_LENGTH__+0x80>
		/* we checked all channels, starting from the begging */
		adc_state.active_channel = 0;
     458:	fd 01       	movw	r30, r26
     45a:	11 82       	std	Z+1, r1	; 0x01
		/* reseting buffer position */
		if( ++adc_state.buffor_position == ADC_SAMPELS ){
     45c:	82 81       	ldd	r24, Z+2	; 0x02
     45e:	8f 5f       	subi	r24, 0xFF	; 255
     460:	82 83       	std	Z+2, r24	; 0x02
     462:	8f 30       	cpi	r24, 0x0F	; 15
     464:	21 f4       	brne	.+8      	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
			/* we filled whole buffor, starting from the begging */
			adc_state.buffor_position = 0;
     466:	12 82       	std	Z+2, r1	; 0x02
			// setting flag that buffor is full (you can read results)
			SET_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF);
     468:	80 81       	ld	r24, Z
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	80 83       	st	Z, r24
		}
		/* setting flag that there is new result ready */
		if( HAS_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF) ) {
     46e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <adc_state>
     472:	81 ff       	sbrs	r24, 1
     474:	05 c0       	rjmp	.+10     	; 0x480 <__FUSE_REGION_LENGTH__+0x80>
			SET_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED);
     476:	e7 ee       	ldi	r30, 0xE7	; 231
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 83       	st	Z, r24
		}
	}
	/* switching active channel */
	ADC_switch(channel_idx_to_num[adc_state.active_channel]);
     480:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <adc_state+0x1>
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	e8 52       	subi	r30, 0x28	; 40
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	80 81       	ld	r24, Z
     48c:	0e 94 c2 00 	call	0x184	; 0x184 <ADC_switch>
	/* starting conversion */
	ADC_start_conversion();	
     490:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ADC_start_conversion>
};
     494:	ff 91       	pop	r31
     496:	ef 91       	pop	r30
     498:	bf 91       	pop	r27
     49a:	af 91       	pop	r26
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	7f 91       	pop	r23
     4a2:	6f 91       	pop	r22
     4a4:	5f 91       	pop	r21
     4a6:	4f 91       	pop	r20
     4a8:	3f 91       	pop	r19
     4aa:	2f 91       	pop	r18
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <eeprom_read>:

struct eeprom_struct EEMEM eeprom_data;
struct eeprom_struct non_volatile_data;

uint8_t eeprom_read(void)
{
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
	uint16_t crc = 0xFFFF;
	uint8_t *ptr = (uint8_t *) &non_volatile_data; //wskaŸnik na struktur¹ rzutujemy na zmienn¹ jednobajtow¹ ¿eby móc siê przesuwaæ co bajt przy liczeniu CRC
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     4be:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4c0:	f8 94       	cli
		eeprom_read_block(&non_volatile_data, &eeprom_data, sizeof(struct eeprom_struct));
     4c2:	48 e2       	ldi	r20, 0x28	; 40
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	8a e4       	ldi	r24, 0x4A	; 74
     4cc:	92 e0       	ldi	r25, 0x02	; 2
     4ce:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <eeprom_read_block>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4d2:	cf bf       	out	0x3f, r28	; 63
struct eeprom_struct non_volatile_data;

uint8_t eeprom_read(void)
{
	uint16_t crc = 0xFFFF;
	uint8_t *ptr = (uint8_t *) &non_volatile_data; //wskaŸnik na struktur¹ rzutujemy na zmienn¹ jednobajtow¹ ¿eby móc siê przesuwaæ co bajt przy liczeniu CRC
     4d4:	0a e4       	ldi	r16, 0x4A	; 74
     4d6:	12 e0       	ldi	r17, 0x02	; 2
struct eeprom_struct EEMEM eeprom_data;
struct eeprom_struct non_volatile_data;

uint8_t eeprom_read(void)
{
	uint16_t crc = 0xFFFF;
     4d8:	cf ef       	ldi	r28, 0xFF	; 255
     4da:	df ef       	ldi	r29, 0xFF	; 255
     4dc:	2b c0       	rjmp	.+86     	; 0x534 <eeprom_read+0x7e>
		eeprom_read_block(&non_volatile_data, &eeprom_data, sizeof(struct eeprom_struct));
	}
	for(uint8_t i=0; i < EEPROM_READ_RETRIES ; i++){
		//liczymy crc z ca³ej struktury razem z crc które by³o zapisane, jeœli siê zgadza to wyliczone crc wyjdzie 0!
		for(uint8_t i=0; i < sizeof(non_volatile_data); i++){
			crc = _crc16_update(crc, *ptr++ );
     4de:	81 91       	ld	r24, Z+
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     4e0:	c8 27       	eor	r28, r24
     4e2:	8c 2f       	mov	r24, r28
     4e4:	82 95       	swap	r24
     4e6:	8c 27       	eor	r24, r28
     4e8:	08 2e       	mov	r0, r24
     4ea:	86 95       	lsr	r24
     4ec:	86 95       	lsr	r24
     4ee:	80 25       	eor	r24, r0
     4f0:	08 2e       	mov	r0, r24
     4f2:	86 95       	lsr	r24
     4f4:	80 25       	eor	r24, r0
     4f6:	87 70       	andi	r24, 0x07	; 7
     4f8:	0c 2e       	mov	r0, r28
     4fa:	cd 2f       	mov	r28, r29
     4fc:	86 95       	lsr	r24
     4fe:	07 94       	ror	r0
     500:	87 95       	ror	r24
     502:	d0 2d       	mov	r29, r0
     504:	c8 27       	eor	r28, r24
     506:	06 94       	lsr	r0
     508:	87 95       	ror	r24
     50a:	d0 25       	eor	r29, r0
     50c:	c8 27       	eor	r28, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		eeprom_read_block(&non_volatile_data, &eeprom_data, sizeof(struct eeprom_struct));
	}
	for(uint8_t i=0; i < EEPROM_READ_RETRIES ; i++){
		//liczymy crc z ca³ej struktury razem z crc które by³o zapisane, jeœli siê zgadza to wyliczone crc wyjdzie 0!
		for(uint8_t i=0; i < sizeof(non_volatile_data); i++){
     50e:	e2 17       	cp	r30, r18
     510:	f3 07       	cpc	r31, r19
     512:	29 f7       	brne	.-54     	; 0x4de <eeprom_read+0x28>
			crc = _crc16_update(crc, *ptr++ );
		}
		//jeœli crc 0 to odczyt ok
		if(crc == 0){
     514:	20 97       	sbiw	r28, 0x00	; 0
     516:	31 f4       	brne	.+12     	; 0x524 <eeprom_read+0x6e>
			uart_puts_P("EEPROM read ok\n");
     518:	8f e1       	ldi	r24, 0x1F	; 31
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <uart_puts_p>
			return EEPROM_OK;
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	12 c0       	rjmp	.+36     	; 0x548 <eeprom_read+0x92>
		}
		uart_puts_P("EEPROM read CRC missmatch - retring\n");
     524:	8a ef       	ldi	r24, 0xFA	; 250
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <uart_puts_p>
	uint8_t *ptr = (uint8_t *) &non_volatile_data; //wskaŸnik na struktur¹ rzutujemy na zmienn¹ jednobajtow¹ ¿eby móc siê przesuwaæ co bajt przy liczeniu CRC
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		eeprom_read_block(&non_volatile_data, &eeprom_data, sizeof(struct eeprom_struct));
	}
	for(uint8_t i=0; i < EEPROM_READ_RETRIES ; i++){
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	02 3c       	cpi	r16, 0xC2	; 194
     530:	18 07       	cpc	r17, r24
     532:	29 f0       	breq	.+10     	; 0x53e <eeprom_read+0x88>
     534:	f8 01       	movw	r30, r16
     536:	08 5d       	subi	r16, 0xD8	; 216
     538:	1f 4f       	sbci	r17, 0xFF	; 255
     53a:	98 01       	movw	r18, r16
     53c:	d0 cf       	rjmp	.-96     	; 0x4de <eeprom_read+0x28>
			uart_puts_P("EEPROM read ok\n");
			return EEPROM_OK;
		}
		uart_puts_P("EEPROM read CRC missmatch - retring\n");
	}
	uart_puts_P("EEPROM read failed\n");
     53e:	86 ee       	ldi	r24, 0xE6	; 230
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <uart_puts_p>
	return EEPROM_ERROR;
     546:	81 e0       	ldi	r24, 0x01	; 1
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	08 95       	ret

00000552 <eeprom_write>:

uint8_t eeprom_write(void)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	ea e4       	ldi	r30, 0x4A	; 74
     558:	f2 e0       	ldi	r31, 0x02	; 2
     55a:	40 e7       	ldi	r20, 0x70	; 112
     55c:	52 e0       	ldi	r21, 0x02	; 2
	uint16_t crc = 0xFFFF;
     55e:	2f ef       	ldi	r18, 0xFF	; 255
     560:	3f ef       	ldi	r19, 0xFF	; 255
	uint8_t *ptr = (uint8_t *) &non_volatile_data; //wskaŸnik na struktur¹ rzutujemy na zmienn¹ jednobajtow¹ ¿eby móc siê przesuwaæ co bajt przy liczeniu CRC
	
	//liczymy crc z ca³ej struktury bez dwóch ostatnich bajtów którymi jest suma crc
	for(uint8_t i=0; i < (sizeof(non_volatile_data)-2); i++){
		crc = _crc16_update(crc, *ptr++ );
     562:	81 91       	ld	r24, Z+
     564:	28 27       	eor	r18, r24
     566:	82 2f       	mov	r24, r18
     568:	82 95       	swap	r24
     56a:	82 27       	eor	r24, r18
     56c:	08 2e       	mov	r0, r24
     56e:	86 95       	lsr	r24
     570:	86 95       	lsr	r24
     572:	80 25       	eor	r24, r0
     574:	08 2e       	mov	r0, r24
     576:	86 95       	lsr	r24
     578:	80 25       	eor	r24, r0
     57a:	87 70       	andi	r24, 0x07	; 7
     57c:	02 2e       	mov	r0, r18
     57e:	23 2f       	mov	r18, r19
     580:	86 95       	lsr	r24
     582:	07 94       	ror	r0
     584:	87 95       	ror	r24
     586:	30 2d       	mov	r19, r0
     588:	28 27       	eor	r18, r24
     58a:	06 94       	lsr	r0
     58c:	87 95       	ror	r24
     58e:	30 25       	eor	r19, r0
     590:	28 27       	eor	r18, r24
{
	uint16_t crc = 0xFFFF;
	uint8_t *ptr = (uint8_t *) &non_volatile_data; //wskaŸnik na struktur¹ rzutujemy na zmienn¹ jednobajtow¹ ¿eby móc siê przesuwaæ co bajt przy liczeniu CRC
	
	//liczymy crc z ca³ej struktury bez dwóch ostatnich bajtów którymi jest suma crc
	for(uint8_t i=0; i < (sizeof(non_volatile_data)-2); i++){
     592:	e4 17       	cp	r30, r20
     594:	f5 07       	cpc	r31, r21
     596:	29 f7       	brne	.-54     	; 0x562 <eeprom_write+0x10>
		crc = _crc16_update(crc, *ptr++ );
	}
	//wpisujemy crc na ostatni¹ pozycjê
	non_volatile_data.crc = crc;
     598:	30 93 71 02 	sts	0x0271, r19	; 0x800271 <non_volatile_data+0x27>
     59c:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <non_volatile_data+0x26>
     5a0:	c2 e0       	ldi	r28, 0x02	; 2
	
	for(uint8_t i=0; i < EEPROM_WRITE_RETRIES ; i++){
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     5a2:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5a4:	f8 94       	cli
			eeprom_write_block(&non_volatile_data, &eeprom_data, sizeof(struct eeprom_struct));
     5a6:	48 e2       	ldi	r20, 0x28	; 40
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	8a e4       	ldi	r24, 0x4A	; 74
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <eeprom_write_block>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5b6:	df bf       	out	0x3f, r29	; 63
		}
		if (eeprom_read() == EEPROM_OK){ //sprawdzamy czy zapis siê powiód³
     5b8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <eeprom_read>
     5bc:	d8 2f       	mov	r29, r24
     5be:	81 11       	cpse	r24, r1
     5c0:	05 c0       	rjmp	.+10     	; 0x5cc <eeprom_write+0x7a>
			uart_puts_P("EEPROM write ok\n");
     5c2:	85 ed       	ldi	r24, 0xD5	; 213
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <uart_puts_p>
			return EEPROM_OK;
     5ca:	0b c0       	rjmp	.+22     	; 0x5e2 <eeprom_write+0x90>
		}
		uart_puts_P("EEPROM write CRC missmatch - retring\n");
     5cc:	8f ea       	ldi	r24, 0xAF	; 175
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <uart_puts_p>
     5d4:	c1 50       	subi	r28, 0x01	; 1
		crc = _crc16_update(crc, *ptr++ );
	}
	//wpisujemy crc na ostatni¹ pozycjê
	non_volatile_data.crc = crc;
	
	for(uint8_t i=0; i < EEPROM_WRITE_RETRIES ; i++){
     5d6:	29 f7       	brne	.-54     	; 0x5a2 <eeprom_write+0x50>
			uart_puts_P("EEPROM write ok\n");
			return EEPROM_OK;
		}
		uart_puts_P("EEPROM write CRC missmatch - retring\n");
	}
	uart_puts_P("EEPROM write failed\n");
     5d8:	8a e9       	ldi	r24, 0x9A	; 154
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <uart_puts_p>
	return EEPROM_ERROR;
     5e0:	d1 e0       	ldi	r29, 0x01	; 1
	
}
     5e2:	8d 2f       	mov	r24, r29
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <eeprom_restore_defaults>:

void eeprom_restore_defaults(void){
	
	non_volatile_data.adc_board_position_offset = ADC_BOARD_POSITION_OFFSET;
     5ea:	ea e4       	ldi	r30, 0x4A	; 74
     5ec:	f2 e0       	ldi	r31, 0x02	; 2
     5ee:	84 e6       	ldi	r24, 0x64	; 100
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	91 83       	std	Z+1, r25	; 0x01
     5f4:	80 83       	st	Z, r24
	non_volatile_data.adc_board_position_scale = ADC_BOARD_POSITION_SCALE;
     5f6:	2b e7       	ldi	r18, 0x7B	; 123
     5f8:	3f ef       	ldi	r19, 0xFF	; 255
     5fa:	33 83       	std	Z+3, r19	; 0x03
     5fc:	22 83       	std	Z+2, r18	; 0x02
	
	non_volatile_data.adc_board_position_max = ADC_BOARD_POSITION_MAX;
     5fe:	95 83       	std	Z+5, r25	; 0x05
     600:	84 83       	std	Z+4, r24	; 0x04
	non_volatile_data.adc_board_position_min = ADC_BOARD_POSITION_MIN;
     602:	17 82       	std	Z+7, r1	; 0x07
     604:	16 82       	std	Z+6, r1	; 0x06
	
	non_volatile_data.adc_current_offset = ADC_CURRENT_OFFSET;
     606:	83 e9       	ldi	r24, 0x93	; 147
     608:	9e ef       	ldi	r25, 0xFE	; 254
     60a:	91 87       	std	Z+9, r25	; 0x09
     60c:	80 87       	std	Z+8, r24	; 0x08
	non_volatile_data.adc_current_scale = ADC_CURRENT_SCALE;
     60e:	8b ed       	ldi	r24, 0xDB	; 219
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	93 87       	std	Z+11, r25	; 0x0b
     614:	82 87       	std	Z+10, r24	; 0x0a
	
	//0x2003
	non_volatile_data.adc_voltage_offset = ADC_VOLTAGE_OFFSET;
     616:	87 e8       	ldi	r24, 0x87	; 135
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	95 87       	std	Z+13, r25	; 0x0d
     61c:	84 87       	std	Z+12, r24	; 0x0c
	non_volatile_data.adc_voltage_scale = ADC_VOLTAGE_SCALE;
     61e:	8a ea       	ldi	r24, 0xAA	; 170
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	97 87       	std	Z+15, r25	; 0x0f
     624:	86 87       	std	Z+14, r24	; 0x0e
	//0x2004
	non_volatile_data.winch_overcurrent_value = OVERCURRENT_WINCH;
     626:	88 e6       	ldi	r24, 0x68	; 104
     628:	80 8b       	std	Z+16, r24	; 0x10
	non_volatile_data.board_overcurrent_value = OVERCURRENT_BOARD;
     62a:	82 e3       	ldi	r24, 0x32	; 50
     62c:	81 8b       	std	Z+17, r24	; 0x11
	//0x2005
	non_volatile_data.torque_init_val_winch_up = TORQUE_INIT_VAL_WINCH_UP;
     62e:	88 e5       	ldi	r24, 0x58	; 88
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	93 8b       	std	Z+19, r25	; 0x13
     634:	82 8b       	std	Z+18, r24	; 0x12
	non_volatile_data.torque_init_val_winch_down = TORQUE_INIT_VAL_WINCH_DOWN;
     636:	88 ec       	ldi	r24, 0xC8	; 200
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	95 8b       	std	Z+21, r25	; 0x15
     63c:	84 8b       	std	Z+20, r24	; 0x14
	non_volatile_data.torque_init_val_board_up = TORQUE_INIT_VAL_BOARD_UP;
     63e:	82 ec       	ldi	r24, 0xC2	; 194
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	97 8b       	std	Z+23, r25	; 0x17
     644:	86 8b       	std	Z+22, r24	; 0x16
	non_volatile_data.torque_init_val_board_down = TORQUE_INIT_VAL_BOARD_DOWN;
     646:	91 8f       	std	Z+25, r25	; 0x19
     648:	80 8f       	std	Z+24, r24	; 0x18
	//0x2006
	non_volatile_data.torque_rising_speed_period_winch_up = TORQUE_RISING_SPEED_PERIOD_WINCH_UP;
     64a:	89 e1       	ldi	r24, 0x19	; 25
     64c:	82 8f       	std	Z+26, r24	; 0x1a
	non_volatile_data.torque_rising_speed_period_winch_down = TORQUE_RISING_SPEED_PERIOD_WINCH_DOWN;
     64e:	83 8f       	std	Z+27, r24	; 0x1b
	non_volatile_data.torque_rising_speed_period_board_up = TORQUE_RISING_SPEED_PERIOD_BOARD_UP;
     650:	84 8f       	std	Z+28, r24	; 0x1c
	non_volatile_data.torque_rising_speed_period_board_down = TORQUE_RISING_SPEED_PERIOD_BOARD_DOWN;
     652:	85 8f       	std	Z+29, r24	; 0x1d
	//0x2007
	non_volatile_data.torque_rising_speed_winch_up = TORQUE_RISING_SPEED_PERIOD_WINCH_UP;
     654:	89 e1       	ldi	r24, 0x19	; 25
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	97 8f       	std	Z+31, r25	; 0x1f
     65a:	86 8f       	std	Z+30, r24	; 0x1e
	non_volatile_data.torque_rising_speed_winch_down = TORQUE_RISING_SPEED_PERIOD_WINCH_DOWN;
     65c:	91 a3       	std	Z+33, r25	; 0x21
     65e:	80 a3       	std	Z+32, r24	; 0x20
	non_volatile_data.torque_rising_speed_board_up = TORQUE_RISING_SPEED_PERIOD_BOARD_UP;
     660:	93 a3       	std	Z+35, r25	; 0x23
     662:	82 a3       	std	Z+34, r24	; 0x22
	non_volatile_data.torque_rising_speed_board_down = TORQUE_RISING_SPEED_PERIOD_BOARD_DOWN;
     664:	95 a3       	std	Z+37, r25	; 0x25
     666:	84 a3       	std	Z+36, r24	; 0x24
     668:	08 95       	ret

0000066a <main_loop>:
		}
};

void LEDs_OFF(void){
	LED_0_OFF;
	LED_1_OFF;
     66a:	0e 94 05 01 	call	0x20a	; 0x20a <ADC_task>
     66e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <PSC_Task>
     672:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <winch_status>
     676:	e4 e7       	ldi	r30, 0x74	; 116
     678:	f2 e0       	ldi	r31, 0x02	; 2
     67a:	83 83       	std	Z+3, r24	; 0x03
     67c:	83 b1       	in	r24, 0x03	; 3
     67e:	80 72       	andi	r24, 0x20	; 32
     680:	84 83       	std	Z+4, r24	; 0x04
     682:	ab ed       	ldi	r26, 0xDB	; 219
     684:	b1 e0       	ldi	r27, 0x01	; 1
     686:	16 96       	adiw	r26, 0x06	; 6
     688:	8c 91       	ld	r24, X
     68a:	16 97       	sbiw	r26, 0x06	; 6
     68c:	80 83       	st	Z, r24
     68e:	1a 96       	adiw	r26, 0x0a	; 10
     690:	8c 91       	ld	r24, X
     692:	1a 97       	sbiw	r26, 0x0a	; 10
     694:	81 83       	std	Z+1, r24	; 0x01
     696:	18 96       	adiw	r26, 0x08	; 8
     698:	8c 91       	ld	r24, X
     69a:	18 97       	sbiw	r26, 0x08	; 8
     69c:	82 83       	std	Z+2, r24	; 0x02
     69e:	14 96       	adiw	r26, 0x04	; 4
     6a0:	8d 91       	ld	r24, X+
     6a2:	9c 91       	ld	r25, X
     6a4:	15 97       	sbiw	r26, 0x05	; 5
     6a6:	90 87       	std	Z+8, r25	; 0x08
     6a8:	87 83       	std	Z+7, r24	; 0x07
     6aa:	8d 91       	ld	r24, X+
     6ac:	9c 91       	ld	r25, X
     6ae:	92 87       	std	Z+10, r25	; 0x0a
     6b0:	81 87       	std	Z+9, r24	; 0x09
     6b2:	0e 94 42 08 	call	0x1084	; 0x1084 <CAN_task>
     6b6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <life_timer>
     6ba:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <life_timer+0x1>
     6be:	0e 94 bf 0c 	call	0x197e	; 0x197e <timer_time_elapsed>
     6c2:	81 35       	cpi	r24, 0x51	; 81
     6c4:	93 4c       	sbci	r25, 0xC3	; 195
     6c6:	98 f0       	brcs	.+38     	; 0x6ee <main_loop+0x84>
     6c8:	5a 98       	cbi	0x0b, 2	; 11
     6ca:	2b 98       	cbi	0x05, 3	; 5
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	93 ed       	ldi	r25, 0xD3	; 211
     6d0:	20 e3       	ldi	r18, 0x30	; 48
     6d2:	81 50       	subi	r24, 0x01	; 1
     6d4:	90 40       	sbci	r25, 0x00	; 0
     6d6:	20 40       	sbci	r18, 0x00	; 0
     6d8:	e1 f7       	brne	.-8      	; 0x6d2 <main_loop+0x68>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <main_loop+0x72>
     6dc:	00 00       	nop
     6de:	0e 94 ba 0c 	call	0x1974	; 0x1974 <timer_get>
     6e2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <life_timer+0x1>
     6e6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <life_timer>
     6ea:	2b 9a       	sbi	0x05, 3	; 5
     6ec:	5a 9a       	sbi	0x0b, 2	; 11
     6ee:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     6f2:	82 30       	cpi	r24, 0x02	; 2
     6f4:	21 f0       	breq	.+8      	; 0x6fe <main_loop+0x94>
     6f6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	31 f4       	brne	.+12     	; 0x70a <main_loop+0xa0>
     6fe:	1d 99       	sbic	0x03, 5	; 3
     700:	02 c0       	rjmp	.+4      	; 0x706 <main_loop+0x9c>
     702:	2c 9a       	sbi	0x05, 4	; 5
     704:	09 c0       	rjmp	.+18     	; 0x718 <main_loop+0xae>
     706:	2c 98       	cbi	0x05, 4	; 5
     708:	07 c0       	rjmp	.+14     	; 0x718 <main_loop+0xae>
     70a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     70e:	83 30       	cpi	r24, 0x03	; 3
     710:	11 f4       	brne	.+4      	; 0x716 <main_loop+0xac>
     712:	2c 9a       	sbi	0x05, 4	; 5
     714:	01 c0       	rjmp	.+2      	; 0x718 <main_loop+0xae>
     716:	2c 98       	cbi	0x05, 4	; 5
     718:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     71c:	83 30       	cpi	r24, 0x03	; 3
     71e:	09 f4       	brne	.+2      	; 0x722 <main_loop+0xb8>
     720:	31 c1       	rjmp	.+610    	; 0x984 <__stack+0x85>
     722:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     726:	88 23       	and	r24, r24
     728:	09 f4       	brne	.+2      	; 0x72c <main_loop+0xc2>
     72a:	2c c1       	rjmp	.+600    	; 0x984 <__stack+0x85>
     72c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	29 f0       	breq	.+10     	; 0x73e <main_loop+0xd4>
     734:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	09 f0       	breq	.+2      	; 0x73e <main_loop+0xd4>
     73c:	23 c1       	rjmp	.+582    	; 0x984 <__stack+0x85>
     73e:	1d 9b       	sbis	0x03, 5	; 3
     740:	0a c0       	rjmp	.+20     	; 0x756 <main_loop+0xec>
     742:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <non_volatile_data+0x10>
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <adc_results+0x6>
     74c:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <adc_results+0x7>
     750:	28 17       	cp	r18, r24
     752:	39 07       	cpc	r19, r25
     754:	64 f4       	brge	.+24     	; 0x76e <main_loop+0x104>
     756:	1d 99       	sbic	0x03, 5	; 3
     758:	18 c0       	rjmp	.+48     	; 0x78a <main_loop+0x120>
     75a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <non_volatile_data+0x11>
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <adc_results+0x6>
     764:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <adc_results+0x7>
     768:	28 17       	cp	r18, r24
     76a:	39 07       	cpc	r19, r25
     76c:	74 f0       	brlt	.+28     	; 0x78a <main_loop+0x120>
     76e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <winch_timer>
     772:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <winch_timer+0x1>
     776:	0e 94 bf 0c 	call	0x197e	; 0x197e <timer_time_elapsed>
     77a:	8b 34       	cpi	r24, 0x4B	; 75
     77c:	91 05       	cpc	r25, r1
     77e:	28 f0       	brcs	.+10     	; 0x78a <main_loop+0x120>
     780:	83 e0       	ldi	r24, 0x03	; 3
     782:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <winch_state>
     786:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Disable_PSC>
     78a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <timer_get>
     78e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <life_timer+0x1>
     792:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <life_timer>
     796:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <winch_status>
     79a:	81 11       	cpse	r24, r1
     79c:	10 c0       	rjmp	.+32     	; 0x7be <main_loop+0x154>
     79e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <timer_get>
     7a2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     7a6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
     7aa:	0e 94 ba 0c 	call	0x1974	; 0x1974 <timer_get>
     7ae:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <winch_timer+0x1>
     7b2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <winch_timer>
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <winch_status>
     7bc:	08 95       	ret
     7be:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <winch_status>
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <main_loop+0x15e>
     7c6:	55 c0       	rjmp	.+170    	; 0x872 <main_loop+0x208>
     7c8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     7cc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
     7d0:	0e 94 bf 0c 	call	0x197e	; 0x197e <timer_time_elapsed>
     7d4:	0f 97       	sbiw	r24, 0x0f	; 15
     7d6:	08 f4       	brcc	.+2      	; 0x7da <main_loop+0x170>
     7d8:	d5 c0       	rjmp	.+426    	; 0x984 <__stack+0x85>
     7da:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     7de:	82 30       	cpi	r24, 0x02	; 2
     7e0:	61 f4       	brne	.+24     	; 0x7fa <main_loop+0x190>
     7e2:	1d 9b       	sbis	0x03, 5	; 3
     7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <main_loop+0x186>
     7e6:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <non_volatile_data+0x12>
     7ea:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <non_volatile_data+0x13>
     7ee:	10 c0       	rjmp	.+32     	; 0x810 <main_loop+0x1a6>
     7f0:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <non_volatile_data+0x16>
     7f4:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <non_volatile_data+0x17>
     7f8:	0b c0       	rjmp	.+22     	; 0x810 <main_loop+0x1a6>
     7fa:	1d 9b       	sbis	0x03, 5	; 3
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <main_loop+0x19e>
     7fe:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <non_volatile_data+0x14>
     802:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <non_volatile_data+0x15>
     806:	04 c0       	rjmp	.+8      	; 0x810 <main_loop+0x1a6>
     808:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <non_volatile_data+0x18>
     80c:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <non_volatile_data+0x19>
     810:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <PSC+0x1>
     814:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <PSC>
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <winch_status>
     81e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <timer_get>
     822:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     826:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
     82a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <timer_get>
     82e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <winch_timer+0x1>
     832:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <winch_timer>
     836:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	61 f4       	brne	.+24     	; 0x856 <main_loop+0x1ec>
     83e:	1d 9b       	sbis	0x03, 5	; 3
     840:	05 c0       	rjmp	.+10     	; 0x84c <main_loop+0x1e2>
     842:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <non_volatile_data+0x12>
     846:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <non_volatile_data+0x13>
     84a:	10 c0       	rjmp	.+32     	; 0x86c <main_loop+0x202>
     84c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <non_volatile_data+0x16>
     850:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <non_volatile_data+0x17>
     854:	0b c0       	rjmp	.+22     	; 0x86c <main_loop+0x202>
     856:	1d 9b       	sbis	0x03, 5	; 3
     858:	05 c0       	rjmp	.+10     	; 0x864 <main_loop+0x1fa>
     85a:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <non_volatile_data+0x14>
     85e:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <non_volatile_data+0x15>
     862:	04 c0       	rjmp	.+8      	; 0x86c <main_loop+0x202>
     864:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <non_volatile_data+0x18>
     868:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <non_volatile_data+0x19>
     86c:	0e 94 42 0c 	call	0x1884	; 0x1884 <Enable_PSC>
     870:	08 95       	ret
     872:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <winch_status>
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	09 f0       	breq	.+2      	; 0x87c <main_loop+0x212>
     87a:	82 c0       	rjmp	.+260    	; 0x980 <__stack+0x81>
     87c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     880:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
     884:	0e 94 bf 0c 	call	0x197e	; 0x197e <timer_time_elapsed>
     888:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <winch_state>
     88c:	22 30       	cpi	r18, 0x02	; 2
     88e:	41 f4       	brne	.+16     	; 0x8a0 <main_loop+0x236>
     890:	1d 9b       	sbis	0x03, 5	; 3
     892:	03 c0       	rjmp	.+6      	; 0x89a <main_loop+0x230>
     894:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <non_volatile_data+0x1a>
     898:	0a c0       	rjmp	.+20     	; 0x8ae <main_loop+0x244>
     89a:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <non_volatile_data+0x1c>
     89e:	07 c0       	rjmp	.+14     	; 0x8ae <main_loop+0x244>
     8a0:	1d 9b       	sbis	0x03, 5	; 3
     8a2:	03 c0       	rjmp	.+6      	; 0x8aa <main_loop+0x240>
     8a4:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <non_volatile_data+0x1b>
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <main_loop+0x244>
     8aa:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <non_volatile_data+0x1d>
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	82 17       	cp	r24, r18
     8b2:	93 07       	cpc	r25, r19
     8b4:	08 f4       	brcc	.+2      	; 0x8b8 <main_loop+0x24e>
     8b6:	66 c0       	rjmp	.+204    	; 0x984 <__stack+0x85>
     8b8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <timer_get>
     8bc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     8c0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
     8c4:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <PSC>
     8c8:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <PSC+0x1>
     8cc:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <winch_state>
     8d0:	22 30       	cpi	r18, 0x02	; 2
     8d2:	a1 f4       	brne	.+40     	; 0x8fc <main_loop+0x292>
     8d4:	1d 9b       	sbis	0x03, 5	; 3
     8d6:	09 c0       	rjmp	.+18     	; 0x8ea <main_loop+0x280>
     8d8:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <non_volatile_data+0x1e>
     8dc:	50 91 69 02 	lds	r21, 0x0269	; 0x800269 <non_volatile_data+0x1f>
     8e0:	28 ee       	ldi	r18, 0xE8	; 232
     8e2:	33 e0       	ldi	r19, 0x03	; 3
     8e4:	24 1b       	sub	r18, r20
     8e6:	35 0b       	sbc	r19, r21
     8e8:	1c c0       	rjmp	.+56     	; 0x922 <__stack+0x23>
     8ea:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <non_volatile_data+0x22>
     8ee:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <non_volatile_data+0x23>
     8f2:	28 ee       	ldi	r18, 0xE8	; 232
     8f4:	33 e0       	ldi	r19, 0x03	; 3
     8f6:	24 1b       	sub	r18, r20
     8f8:	35 0b       	sbc	r19, r21
     8fa:	13 c0       	rjmp	.+38     	; 0x922 <__stack+0x23>
     8fc:	1d 9b       	sbis	0x03, 5	; 3
     8fe:	09 c0       	rjmp	.+18     	; 0x912 <__stack+0x13>
     900:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <non_volatile_data+0x20>
     904:	50 91 6b 02 	lds	r21, 0x026B	; 0x80026b <non_volatile_data+0x21>
     908:	28 ee       	ldi	r18, 0xE8	; 232
     90a:	33 e0       	ldi	r19, 0x03	; 3
     90c:	24 1b       	sub	r18, r20
     90e:	35 0b       	sbc	r19, r21
     910:	08 c0       	rjmp	.+16     	; 0x922 <__stack+0x23>
     912:	40 91 6e 02 	lds	r20, 0x026E	; 0x80026e <non_volatile_data+0x24>
     916:	50 91 6f 02 	lds	r21, 0x026F	; 0x80026f <non_volatile_data+0x25>
     91a:	28 ee       	ldi	r18, 0xE8	; 232
     91c:	33 e0       	ldi	r19, 0x03	; 3
     91e:	24 1b       	sub	r18, r20
     920:	35 0b       	sbc	r19, r21
     922:	28 17       	cp	r18, r24
     924:	39 07       	cpc	r19, r25
     926:	10 f1       	brcs	.+68     	; 0x96c <__stack+0x6d>
     928:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <winch_state>
     92c:	22 30       	cpi	r18, 0x02	; 2
     92e:	61 f4       	brne	.+24     	; 0x948 <__stack+0x49>
     930:	1d 9b       	sbis	0x03, 5	; 3
     932:	05 c0       	rjmp	.+10     	; 0x93e <__stack+0x3f>
     934:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <non_volatile_data+0x1e>
     938:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <non_volatile_data+0x1f>
     93c:	10 c0       	rjmp	.+32     	; 0x95e <__stack+0x5f>
     93e:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <non_volatile_data+0x22>
     942:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <non_volatile_data+0x23>
     946:	0b c0       	rjmp	.+22     	; 0x95e <__stack+0x5f>
     948:	1d 9b       	sbis	0x03, 5	; 3
     94a:	05 c0       	rjmp	.+10     	; 0x956 <__stack+0x57>
     94c:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <non_volatile_data+0x20>
     950:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <non_volatile_data+0x21>
     954:	04 c0       	rjmp	.+8      	; 0x95e <__stack+0x5f>
     956:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <non_volatile_data+0x24>
     95a:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <non_volatile_data+0x25>
     95e:	82 0f       	add	r24, r18
     960:	93 1f       	adc	r25, r19
     962:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <PSC+0x1>
     966:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <PSC>
     96a:	08 95       	ret
     96c:	88 ee       	ldi	r24, 0xE8	; 232
     96e:	93 e0       	ldi	r25, 0x03	; 3
     970:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <PSC+0x1>
     974:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <PSC>
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <winch_status>
     97e:	08 95       	ret
     980:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <winch_status>
     984:	08 95       	ret

00000986 <HAL_init>:
};

void HAL_init(void){
	
	//w³¹czenie PLL na 64MHz
	PLLCSR |= (1<PLLF) | (1<<PLLE);
     986:	89 b5       	in	r24, 0x29	; 41
     988:	83 60       	ori	r24, 0x03	; 3
     98a:	89 bd       	out	0x29, r24	; 41
	
	//ustawienie porty na wyjœciowe dla LED-ow
	DDR(LED_0_PORT) |= (1<<LED_0);
     98c:	52 9a       	sbi	0x0a, 2	; 10
	DDR(LED_1_PORT) |= (1<<LED_1);
     98e:	24 9a       	sbi	0x04, 4	; 4

	LED_0_ON;
     990:	5a 9a       	sbi	0x0b, 2	; 11
	LED_1_ON;
     992:	2c 9a       	sbi	0x05, 4	; 5
	
	//ustawienei podtrzymanie zasilania na wyjœcie
	DDR(PWR_PORT) |= (1<<PWR);
     994:	23 9a       	sbi	0x04, 3	; 4
	
	//Inicjalizacja DIP Switchy
	DDR(SW_1_PORT) &= ~(1<<SW_1);
     996:	57 98       	cbi	0x0a, 7	; 10
	DDR(SW_2_PORT) &= ~(1<<SW_2);
     998:	56 98       	cbi	0x0a, 6	; 10
	DDR(SW_3_PORT) &= ~(1<<SW_3);
     99a:	55 98       	cbi	0x0a, 5	; 10
	DDR(SW_4_PORT) &= ~(1<<SW_4);
     99c:	21 98       	cbi	0x04, 1	; 4
	DDR(SW_5_PORT) &= ~(1<<SW_5);
     99e:	20 98       	cbi	0x04, 0	; 4
	DDR(SW_6_PORT) &= ~(1<<SW_6);
     9a0:	39 98       	cbi	0x07, 1	; 7
	DDR(SW_7_PORT) &= ~(1<<SW_7);
     9a2:	51 98       	cbi	0x0a, 1	; 10
	DDR(SW_8_PORT) &= ~(1<<SW_8);
     9a4:	38 98       	cbi	0x07, 0	; 7
	
	//w³aczenie pull-up-ów
	PORT(SW_1_PORT) |= 1<<SW_1;
     9a6:	5f 9a       	sbi	0x0b, 7	; 11
	PORT(SW_2_PORT) |= 1<<SW_2;
     9a8:	5e 9a       	sbi	0x0b, 6	; 11
	PORT(SW_3_PORT) |= 1<<SW_3;
     9aa:	5d 9a       	sbi	0x0b, 5	; 11
	PORT(SW_4_PORT) |= 1<<SW_4;
     9ac:	29 9a       	sbi	0x05, 1	; 5
	PORT(SW_5_PORT) |= 1<<SW_5;
     9ae:	28 9a       	sbi	0x05, 0	; 5
	PORT(SW_6_PORT) |= 1<<SW_6;
     9b0:	41 9a       	sbi	0x08, 1	; 8
	PORT(SW_7_PORT) |= 1<<SW_7;
     9b2:	59 9a       	sbi	0x0b, 1	; 11
	PORT(SW_8_PORT) |= 1<<SW_8;
     9b4:	40 9a       	sbi	0x08, 0	; 8
	
	//Inicjalizacja wejœæ UP i DOWN
	DDR(WINCH_UP_PORT) &= ~(1<<WINCH_UP);
     9b6:	22 98       	cbi	0x04, 2	; 4
	DDR(WINCH_DOWN_PORT) &= ~(1<<WINCH_DOWN);
     9b8:	3c 98       	cbi	0x07, 4	; 7
	DDR(WINCH_SET_PIN_PORT) &= ~(1<<WINCH_SET_PIN);
     9ba:	25 98       	cbi	0x04, 5	; 4
	
	//Inicjalizacja wyjœæ
	DDR(BUZZER_PORT) |= (1<<BUZZER);
     9bc:	3f 9a       	sbi	0x07, 7	; 7
	
	//aktywacja przerwañ
	PCICR |= (1<<PCIE0) | (1<<PCIE1);
     9be:	e8 e6       	ldi	r30, 0x68	; 104
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	83 60       	ori	r24, 0x03	; 3
     9c6:	80 83       	st	Z, r24
	
	PCMSK0 |= (1<<PCINT2);
     9c8:	ea e6       	ldi	r30, 0x6A	; 106
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	84 60       	ori	r24, 0x04	; 4
     9d0:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12);
     9d2:	eb e6       	ldi	r30, 0x6B	; 107
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	80 61       	ori	r24, 0x10	; 16
     9da:	80 83       	st	Z, r24
     9dc:	08 95       	ret

000009de <Get_DIP_sw_word>:
	
};

uint8_t Get_DIP_sw_word(void){
	uint8_t result=0;
	if(SW_1_SET)
     9de:	89 b1       	in	r24, 0x09	; 9
     9e0:	80 95       	com	r24
     9e2:	88 1f       	adc	r24, r24
     9e4:	88 27       	eor	r24, r24
     9e6:	88 1f       	adc	r24, r24
		result |= 1<<0;
	if(SW_2_SET)
     9e8:	4e 9b       	sbis	0x09, 6	; 9
		result |= 1<<1;
     9ea:	82 60       	ori	r24, 0x02	; 2
	if(SW_3_SET)
     9ec:	4d 9b       	sbis	0x09, 5	; 9
		result |= 1<<2;
     9ee:	84 60       	ori	r24, 0x04	; 4
	if(SW_4_SET)
     9f0:	19 9b       	sbis	0x03, 1	; 3
		result |= 1<<3;
     9f2:	88 60       	ori	r24, 0x08	; 8
	if(SW_5_SET)
     9f4:	18 9b       	sbis	0x03, 0	; 3
		result |= 1<<4;
     9f6:	80 61       	ori	r24, 0x10	; 16
	if(SW_6_SET)
     9f8:	31 9b       	sbis	0x06, 1	; 6
		result |= 1<<5;
     9fa:	80 62       	ori	r24, 0x20	; 32
	if(SW_7_SET)
     9fc:	49 9b       	sbis	0x09, 1	; 9
		result |= 1<<6;
     9fe:	80 64       	ori	r24, 0x40	; 64
	if(SW_8_SET)
     a00:	30 9b       	sbis	0x06, 0	; 6
		result |= 1<<7;
     a02:	80 68       	ori	r24, 0x80	; 128
	return result; 
	
};
     a04:	08 95       	ret

00000a06 <main>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getc_s, _FDEV_SETUP_READ);


int main(void) {
	
	HAL_init();
     a06:	0e 94 c3 04 	call	0x986	; 0x986 <HAL_init>
	timer_init();
     a0a:	0e 94 a7 0c 	call	0x194e	; 0x194e <timer_init>
	ADC_init();
     a0e:	0e 94 ca 00 	call	0x194	; 0x194 <ADC_init>
	PSC_init();
     a12:	0e 94 1e 0c 	call	0x183c	; 0x183c <PSC_init>
	uart_init(BAUD);
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	91 ee       	ldi	r25, 0xE1	; 225
     a1a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <uart_init>
	CAN_init(GET_DIP_SW_CAN_ADDR);
     a1e:	0e 94 ef 04 	call	0x9de	; 0x9de <Get_DIP_sw_word>
     a22:	87 70       	andi	r24, 0x07	; 7
     a24:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <CAN_init>

	stdout = &uart_output;
     a28:	e1 eb       	ldi	r30, 0xB1	; 177
     a2a:	f2 e0       	ldi	r31, 0x02	; 2
     a2c:	8e e0       	ldi	r24, 0x0E	; 14
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	93 83       	std	Z+3, r25	; 0x03
     a32:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &uart_input;
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	80 83       	st	Z, r24
	
	sei();
     a3c:	78 94       	sei
	//uart_puts_P("Winch Controller\nCompilation date ");
	//uart_puts_P(__DATE__);
	//uart_puts_P("\n");
	
	//próba odczytu konfiguracji z EEPROMU, jeœli odczyt siê nie powiód³ przypisujemy wartoœci domyœlne
	if(eeprom_read() == EEPROM_ERROR){
     a3e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <eeprom_read>
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	31 f4       	brne	.+12     	; 0xa52 <main+0x4c>
		eeprom_restore_defaults();
     a46:	0e 94 f5 02 	call	0x5ea	; 0x5ea <eeprom_restore_defaults>
		uart_puts_P("Loading default values");
     a4a:	8f e2       	ldi	r24, 0x2F	; 47
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <uart_puts_p>
	}
	
	
	if( WINCH_UP_SET && WINCH_DOWN_SET ){
     a52:	1a 9b       	sbis	0x03, 2	; 3
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <main+0x5c>
     a56:	34 9b       	sbis	0x06, 4	; 6
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <main+0x5c>
		power_up_source = SWITCH_ON;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <power_up_source>
     a60:	15 c0       	rjmp	.+42     	; 0xa8c <main+0x86>
	}
	else if(WINCH_UP_SET){
     a62:	1a 9b       	sbis	0x03, 2	; 3
     a64:	07 c0       	rjmp	.+14     	; 0xa74 <main+0x6e>
		PWR_ON;
     a66:	2b 9a       	sbi	0x05, 3	; 5
		power_up_source = WINCH_ON;
     a68:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <power_up_source>
		winch_state = UP;
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <winch_state>
     a72:	0c c0       	rjmp	.+24     	; 0xa8c <main+0x86>
	}
	else if(WINCH_DOWN_SET){
     a74:	34 9b       	sbis	0x06, 4	; 6
     a76:	07 c0       	rjmp	.+14     	; 0xa86 <main+0x80>
		PWR_ON;
     a78:	2b 9a       	sbi	0x05, 3	; 5
		power_up_source = WINCH_ON;
     a7a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <power_up_source>
		winch_state = DOWN;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <winch_state>
     a84:	03 c0       	rjmp	.+6      	; 0xa8c <main+0x86>
	}
	else{
		power_up_source = SWITCH_ON;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <power_up_source>
	}
	
	//PWR_ON;
	LED_0_ON;
     a8c:	5a 9a       	sbi	0x0b, 2	; 11
	LED_1_OFF;
     a8e:	2c 98       	cbi	0x05, 4	; 5
	
	ADC_start_conversion();
     a90:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ADC_start_conversion>
	
	time_stamp=timer_get();
     a94:	0e 94 ba 0c 	call	0x1974	; 0x1974 <timer_get>
     a98:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     a9c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	life_timer=timer_get();
     aa0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <timer_get>
     aa4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <life_timer+0x1>
     aa8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <life_timer>
	
    while(1) {
		if( timer_new_tick() ){
     aac:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <timer_new_tick>
     ab0:	88 23       	and	r24, r24
     ab2:	e1 f3       	breq	.-8      	; 0xaac <main+0xa6>
			main_loop();
     ab4:	0e 94 35 03 	call	0x66a	; 0x66a <main_loop>
     ab8:	f9 cf       	rjmp	.-14     	; 0xaac <main+0xa6>

00000aba <__vector_22>:
		result |= 1<<7;
	return result; 
	
};

SIGNAL (PCINT0_vect){ //przerwanie od WINCH_UP
     aba:	1f 92       	push	r1
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	0f 92       	push	r0
     ac2:	11 24       	eor	r1, r1
     ac4:	2f 93       	push	r18
     ac6:	3f 93       	push	r19
     ac8:	4f 93       	push	r20
     aca:	5f 93       	push	r21
     acc:	6f 93       	push	r22
     ace:	7f 93       	push	r23
     ad0:	8f 93       	push	r24
     ad2:	9f 93       	push	r25
     ad4:	af 93       	push	r26
     ad6:	bf 93       	push	r27
     ad8:	ef 93       	push	r30
     ada:	ff 93       	push	r31
	if(WINCH_UP_SET && winch_state == OFF){
     adc:	1a 9b       	sbis	0x03, 2	; 3
     ade:	1b c0       	rjmp	.+54     	; 0xb16 <__vector_22+0x5c>
     ae0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     ae4:	81 11       	cpse	r24, r1
     ae6:	17 c0       	rjmp	.+46     	; 0xb16 <__vector_22+0x5c>
		winch_state = UP;
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <winch_state>
		PSC.torque = TORQUE_INIT_VAL;
     aee:	84 e6       	ldi	r24, 0x64	; 100
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <PSC+0x1>
     af6:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <PSC>
		winch_timer=timer_get();
     afa:	0e 94 ba 0c 	call	0x1974	; 0x1974 <timer_get>
     afe:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <winch_timer+0x1>
     b02:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <winch_timer>
		//Enable_PSC();
		if(power_up_source == SWITCH_ON){
     b06:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <power_up_source>
     b0a:	81 30       	cpi	r24, 0x01	; 1
     b0c:	81 f4       	brne	.+32     	; 0xb2e <__vector_22+0x74>
			power_up_source = WINCH_ON;
     b0e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <power_up_source>
			PWR_ON;
     b12:	2b 9a       	sbi	0x05, 3	; 5
     b14:	0c c0       	rjmp	.+24     	; 0xb2e <__vector_22+0x74>
		}
	}
	else if(WINCH_UP_CLEAR && winch_state != OFF){
     b16:	1a 99       	sbic	0x03, 2	; 3
     b18:	0a c0       	rjmp	.+20     	; 0xb2e <__vector_22+0x74>
     b1a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     b1e:	88 23       	and	r24, r24
     b20:	31 f0       	breq	.+12     	; 0xb2e <__vector_22+0x74>
		winch_state = OFF;
     b22:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <winch_state>
		Disable_PSC();
     b26:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Disable_PSC>
		winch_status = INIT;
     b2a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <winch_status>
	}
};
     b2e:	ff 91       	pop	r31
     b30:	ef 91       	pop	r30
     b32:	bf 91       	pop	r27
     b34:	af 91       	pop	r26
     b36:	9f 91       	pop	r25
     b38:	8f 91       	pop	r24
     b3a:	7f 91       	pop	r23
     b3c:	6f 91       	pop	r22
     b3e:	5f 91       	pop	r21
     b40:	4f 91       	pop	r20
     b42:	3f 91       	pop	r19
     b44:	2f 91       	pop	r18
     b46:	0f 90       	pop	r0
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	0f 90       	pop	r0
     b4c:	1f 90       	pop	r1
     b4e:	18 95       	reti

00000b50 <__vector_23>:

SIGNAL (PCINT1_vect){ //przerwanie od WINCH_DOWN
     b50:	1f 92       	push	r1
     b52:	0f 92       	push	r0
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	0f 92       	push	r0
     b58:	11 24       	eor	r1, r1
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
	if(WINCH_DOWN_SET && winch_state == OFF){
     b72:	34 9b       	sbis	0x06, 4	; 6
     b74:	1b c0       	rjmp	.+54     	; 0xbac <__vector_23+0x5c>
     b76:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     b7a:	81 11       	cpse	r24, r1
     b7c:	17 c0       	rjmp	.+46     	; 0xbac <__vector_23+0x5c>
		winch_state = DOWN;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <winch_state>
		PSC.torque = TORQUE_INIT_VAL;
     b84:	84 e6       	ldi	r24, 0x64	; 100
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <PSC+0x1>
     b8c:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <PSC>
		winch_timer=timer_get();
     b90:	0e 94 ba 0c 	call	0x1974	; 0x1974 <timer_get>
     b94:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <winch_timer+0x1>
     b98:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <winch_timer>
		//Enable_PSC();
		if(power_up_source == SWITCH_ON){
     b9c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <power_up_source>
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	81 f4       	brne	.+32     	; 0xbc4 <__vector_23+0x74>
			power_up_source = WINCH_ON;
     ba4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <power_up_source>
			PWR_ON;
     ba8:	2b 9a       	sbi	0x05, 3	; 5
     baa:	0c c0       	rjmp	.+24     	; 0xbc4 <__vector_23+0x74>
		}
	}
	else if(WINCH_DOWN_CLEAR && winch_state != OFF){
     bac:	34 99       	sbic	0x06, 4	; 6
     bae:	0a c0       	rjmp	.+20     	; 0xbc4 <__vector_23+0x74>
     bb0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     bb4:	88 23       	and	r24, r24
     bb6:	31 f0       	breq	.+12     	; 0xbc4 <__vector_23+0x74>
		winch_state = OFF;
     bb8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <winch_state>
		Disable_PSC();
     bbc:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Disable_PSC>
		winch_status = INIT;
     bc0:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <winch_status>
	}
};
     bc4:	ff 91       	pop	r31
     bc6:	ef 91       	pop	r30
     bc8:	bf 91       	pop	r27
     bca:	af 91       	pop	r26
     bcc:	9f 91       	pop	r25
     bce:	8f 91       	pop	r24
     bd0:	7f 91       	pop	r23
     bd2:	6f 91       	pop	r22
     bd4:	5f 91       	pop	r21
     bd6:	4f 91       	pop	r20
     bd8:	3f 91       	pop	r19
     bda:	2f 91       	pop	r18
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	0f 90       	pop	r0
     be2:	1f 90       	pop	r1
     be4:	18 95       	reti

00000be6 <CAN_init>:

volatile uint16_t int_counter=0;


//Inicjalizacja CAN
void CAN_init(uint8_t dip_sw){
     be6:	2f 92       	push	r2
     be8:	3f 92       	push	r3
     bea:	4f 92       	push	r4
     bec:	5f 92       	push	r5
     bee:	6f 92       	push	r6
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <CAN_init+0x26>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <CAN_init+0x28>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
	uint16_t mob_3_id = 0x280 + BASE_ID; //TPDO 2
	uint16_t mob_4_id = 0x580 + BASE_ID; //SDO TX
	uint16_t mob_5_id = 0x600 + BASE_ID; //SDO RX
	
	//dodwania do adresu ustawienia z DIP switchy
	mob_1_id += dip_sw;
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	6c 01       	movw	r12, r24
     c16:	20 ef       	ldi	r18, 0xF0	; 240
     c18:	c2 1a       	sub	r12, r18
     c1a:	2d ef       	ldi	r18, 0xFD	; 253
     c1c:	d2 0a       	sbc	r13, r18
	mob_2_id += dip_sw;
     c1e:	2c 01       	movw	r4, r24
     c20:	30 e7       	ldi	r19, 0x70	; 112
     c22:	43 1a       	sub	r4, r19
     c24:	3e ef       	ldi	r19, 0xFE	; 254
     c26:	53 0a       	sbc	r5, r19
	mob_3_id += dip_sw;
     c28:	dc 01       	movw	r26, r24
     c2a:	a0 57       	subi	r26, 0x70	; 112
     c2c:	bd 4f       	sbci	r27, 0xFD	; 253
     c2e:	ba 83       	std	Y+2, r27	; 0x02
     c30:	a9 83       	std	Y+1, r26	; 0x01
	mob_4_id += dip_sw;
     c32:	fc 01       	movw	r30, r24
     c34:	e0 57       	subi	r30, 0x70	; 112
     c36:	fa 4f       	sbci	r31, 0xFA	; 250
     c38:	fc 83       	std	Y+4, r31	; 0x04
     c3a:	eb 83       	std	Y+3, r30	; 0x03
	mob_5_id += dip_sw;
     c3c:	1c 01       	movw	r2, r24
     c3e:	f0 ef       	ldi	r31, 0xF0	; 240
     c40:	2f 1a       	sub	r2, r31
     c42:	f9 ef       	ldi	r31, 0xF9	; 249
     c44:	3f 0a       	sbc	r3, r31
	
	CANGCON = ( 1 << SWRES );   // Software reset
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	CANTCON = 0x00;             // CAN timing prescaler set to 0
     c4c:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
     c50:	e2 ee       	ldi	r30, 0xE2	; 226
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	8e 60       	ori	r24, 0x0E	; 14
     c58:	80 83       	st	Z, r24
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
     c5a:	e3 ee       	ldi	r30, 0xE3	; 227
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	8c 60       	ori	r24, 0x0C	; 12
     c62:	80 83       	st	Z, r24
	CANBT3	|= 0x37; //CAN Baud set 125kbit
     c64:	e4 ee       	ldi	r30, 0xE4	; 228
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	87 63       	ori	r24, 0x37	; 55
     c6c:	80 83       	st	Z, r24
	
	for ( int8_t mob=0; mob<6; mob++ ) {
     c6e:	80 e0       	ldi	r24, 0x00	; 0
		CANPAGE = ( mob << 4 );   // Selects Message Object 0-5
     c70:	2d ee       	ldi	r18, 0xED	; 237
     c72:	30 e0       	ldi	r19, 0x00	; 0
		CANCDMOB = 0x00;          // Disable mob
     c74:	af ee       	ldi	r26, 0xEF	; 239
     c76:	b0 e0       	ldi	r27, 0x00	; 0
		CANSTMOB = 0x00;          // Clear mob status register;
     c78:	4e ee       	ldi	r20, 0xEE	; 238
     c7a:	50 e0       	ldi	r21, 0x00	; 0
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
	CANBT3	|= 0x37; //CAN Baud set 125kbit
	
	for ( int8_t mob=0; mob<6; mob++ ) {
		CANPAGE = ( mob << 4 );   // Selects Message Object 0-5
     c7c:	98 2f       	mov	r25, r24
     c7e:	92 95       	swap	r25
     c80:	90 7f       	andi	r25, 0xF0	; 240
     c82:	f9 01       	movw	r30, r18
     c84:	90 83       	st	Z, r25
		CANCDMOB = 0x00;          // Disable mob
     c86:	1c 92       	st	X, r1
		CANSTMOB = 0x00;          // Clear mob status register;
     c88:	fa 01       	movw	r30, r20
     c8a:	10 82       	st	Z, r1
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
	
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
	CANBT3	|= 0x37; //CAN Baud set 125kbit
	
	for ( int8_t mob=0; mob<6; mob++ ) {
     c8e:	86 30       	cpi	r24, 0x06	; 6
     c90:	a9 f7       	brne	.-22     	; 0xc7c <CAN_init+0x96>
		CANSTMOB = 0x00;          // Clear mob status register;
	}
			
	
	//MOb 0 configuration SYNC
	CANPAGE	 = (MOb_0<<4);
     c92:	0f 2e       	mov	r0, r31
     c94:	fd ee       	ldi	r31, 0xED	; 237
     c96:	ef 2e       	mov	r14, r31
     c98:	f1 2c       	mov	r15, r1
     c9a:	f0 2d       	mov	r31, r0
     c9c:	d7 01       	movw	r26, r14
     c9e:	1c 92       	st	X, r1
	CANIDM4 = 0x00; //full mask setting
     ca0:	04 ef       	ldi	r16, 0xF4	; 244
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	f8 01       	movw	r30, r16
     ca6:	10 82       	st	Z, r1
	CANIDM3 = 0x00; //full mask setting
     ca8:	65 ef       	ldi	r22, 0xF5	; 245
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	db 01       	movw	r26, r22
     cae:	1c 92       	st	X, r1
	CANIDM2 = 0xFF; //full mask setting
     cb0:	46 ef       	ldi	r20, 0xF6	; 246
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	99 24       	eor	r9, r9
     cb6:	9a 94       	dec	r9
     cb8:	fa 01       	movw	r30, r20
     cba:	90 82       	st	Z, r9
	CANIDM1 = 0xFF; //full mask setting
     cbc:	27 ef       	ldi	r18, 0xF7	; 247
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	d9 01       	movw	r26, r18
     cc2:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     cc4:	ef ee       	ldi	r30, 0xEF	; 239
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
	CANCDMOB |= RECEPTION;
     cca:	80 81       	ld	r24, Z
     ccc:	80 68       	ori	r24, 0x80	; 128
     cce:	80 83       	st	Z, r24
	CANIDT4 = 0x00;
     cd0:	80 ef       	ldi	r24, 0xF0	; 240
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	dc 01       	movw	r26, r24
     cd6:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     cd8:	e1 ef       	ldi	r30, 0xF1	; 241
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	10 82       	st	Z, r1
	CANIDT2 = ((mob_0_id & 0x07) << 5);
     cde:	0f 2e       	mov	r0, r31
     ce0:	f2 ef       	ldi	r31, 0xF2	; 242
     ce2:	af 2e       	mov	r10, r31
     ce4:	b1 2c       	mov	r11, r1
     ce6:	f0 2d       	mov	r31, r0
     ce8:	d5 01       	movw	r26, r10
     cea:	1c 92       	st	X, r1
	CANIDT1 = (mob_0_id >> 3);
     cec:	0f 2e       	mov	r0, r31
     cee:	f3 ef       	ldi	r31, 0xF3	; 243
     cf0:	6f 2e       	mov	r6, r31
     cf2:	71 2c       	mov	r7, r1
     cf4:	f0 2d       	mov	r31, r0
     cf6:	68 94       	set
     cf8:	88 24       	eor	r8, r8
     cfa:	84 f8       	bld	r8, 4
     cfc:	f3 01       	movw	r30, r6
     cfe:	80 82       	st	Z, r8
	CANIE2	|= (1<<IEMOB0); //Enable Interrupt MOb 0
     d00:	ee ed       	ldi	r30, 0xDE	; 222
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 80       	ld	r8, Z
     d06:	a8 2d       	mov	r26, r8
     d08:	a1 60       	ori	r26, 0x01	; 1
     d0a:	a0 83       	st	Z, r26
	
	//MOb 1 configuration odbierana paczka RPDO 1 0x200+
	CANPAGE	 = (MOb_1<<4);
     d0c:	68 94       	set
     d0e:	88 24       	eor	r8, r8
     d10:	84 f8       	bld	r8, 4
     d12:	d7 01       	movw	r26, r14
     d14:	8c 92       	st	X, r8
	CANIDM4 = 0x00; //full mask setting
     d16:	d8 01       	movw	r26, r16
     d18:	1c 92       	st	X, r1
	CANIDM3 = 0x00; //full mask setting
     d1a:	db 01       	movw	r26, r22
     d1c:	1c 92       	st	X, r1
	CANIDM2 = 0xFF; //full mask setting
     d1e:	da 01       	movw	r26, r20
     d20:	9c 92       	st	X, r9
	CANIDM1 = 0xFF; //full mask setting
     d22:	d9 01       	movw	r26, r18
     d24:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     d26:	af ee       	ldi	r26, 0xEF	; 239
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	1c 92       	st	X, r1
	CANCDMOB |= RECEPTION | ( 8 << DLC0);
     d2c:	8c 90       	ld	r8, X
     d2e:	b8 2d       	mov	r27, r8
     d30:	b8 68       	ori	r27, 0x88	; 136
     d32:	8b 2e       	mov	r8, r27
     d34:	af ee       	ldi	r26, 0xEF	; 239
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	8c 92       	st	X, r8
	CANIDT4 = 0x00;
     d3a:	dc 01       	movw	r26, r24
     d3c:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     d3e:	a1 ef       	ldi	r26, 0xF1	; 241
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	1c 92       	st	X, r1
	CANIDT2 = ((mob_1_id & 0x07) << 5);
     d44:	8c 2c       	mov	r8, r12
     d46:	88 0c       	add	r8, r8
     d48:	88 0c       	add	r8, r8
     d4a:	88 0c       	add	r8, r8
     d4c:	88 0c       	add	r8, r8
     d4e:	88 0c       	add	r8, r8
     d50:	d5 01       	movw	r26, r10
     d52:	8c 92       	st	X, r8
	CANIDT1 = (mob_1_id >> 3);
     d54:	d6 94       	lsr	r13
     d56:	c7 94       	ror	r12
     d58:	d6 94       	lsr	r13
     d5a:	c7 94       	ror	r12
     d5c:	d6 94       	lsr	r13
     d5e:	c7 94       	ror	r12
     d60:	d3 01       	movw	r26, r6
     d62:	cc 92       	st	X, r12
	CANIE2	|= (1<<IEMOB1); //Enable Interrupt MOb 1
     d64:	d0 80       	ld	r13, Z
     d66:	bd 2d       	mov	r27, r13
     d68:	b2 60       	ori	r27, 0x02	; 2
     d6a:	b0 83       	st	Z, r27
	
	//MOb 2 configuration nadawana paczka TPDO 1 0x180+
	CANPAGE	 = (MOb_2<<4);
     d6c:	68 94       	set
     d6e:	dd 24       	eor	r13, r13
     d70:	d5 f8       	bld	r13, 5
     d72:	d7 01       	movw	r26, r14
     d74:	dc 92       	st	X, r13
	CANIDM4 = 0x00; //full mask setting
     d76:	d8 01       	movw	r26, r16
     d78:	1c 92       	st	X, r1
	CANIDM3 = 0x00; //full mask setting
     d7a:	db 01       	movw	r26, r22
     d7c:	1c 92       	st	X, r1
	CANIDM2 = (0x07 <<5); //full mask setting
     d7e:	0f 2e       	mov	r0, r31
     d80:	f0 ee       	ldi	r31, 0xE0	; 224
     d82:	8f 2e       	mov	r8, r31
     d84:	f0 2d       	mov	r31, r0
     d86:	da 01       	movw	r26, r20
     d88:	8c 92       	st	X, r8
	CANIDM1 = 0xFF; //full mask setting
     d8a:	d9 01       	movw	r26, r18
     d8c:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     d8e:	af ee       	ldi	r26, 0xEF	; 239
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	1c 92       	st	X, r1
	//CANCDMOB |= TRANSMISSION;
	CANIDT4 = 0x00;
     d94:	dc 01       	movw	r26, r24
     d96:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     d98:	a1 ef       	ldi	r26, 0xF1	; 241
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	1c 92       	st	X, r1
	CANIDT2 = ((mob_2_id & 0x07) << 5);
     d9e:	d4 2c       	mov	r13, r4
     da0:	dd 0c       	add	r13, r13
     da2:	dd 0c       	add	r13, r13
     da4:	dd 0c       	add	r13, r13
     da6:	dd 0c       	add	r13, r13
     da8:	dd 0c       	add	r13, r13
     daa:	d5 01       	movw	r26, r10
     dac:	dc 92       	st	X, r13
	CANIDT1 = (mob_2_id >> 3);
     dae:	62 01       	movw	r12, r4
     db0:	d6 94       	lsr	r13
     db2:	c7 94       	ror	r12
     db4:	d6 94       	lsr	r13
     db6:	c7 94       	ror	r12
     db8:	d6 94       	lsr	r13
     dba:	c7 94       	ror	r12
     dbc:	d3 01       	movw	r26, r6
     dbe:	cc 92       	st	X, r12
	CANIE2	|= (1<<IEMOB2); //Enable Interrupt MOb 2
     dc0:	d0 80       	ld	r13, Z
     dc2:	bd 2d       	mov	r27, r13
     dc4:	b4 60       	ori	r27, 0x04	; 4
     dc6:	b0 83       	st	Z, r27
	
	
	//MOb 3 configuration nadawana paczka TPDO 2 0x280+
	CANPAGE	 = (MOb_3<<4);
     dc8:	0f 2e       	mov	r0, r31
     dca:	f0 e3       	ldi	r31, 0x30	; 48
     dcc:	df 2e       	mov	r13, r31
     dce:	f0 2d       	mov	r31, r0
     dd0:	d7 01       	movw	r26, r14
     dd2:	dc 92       	st	X, r13
	CANIDM4 = 0x00; //full mask setting
     dd4:	d8 01       	movw	r26, r16
     dd6:	1c 92       	st	X, r1
	CANIDM3 = 0x00; //full mask setting
     dd8:	db 01       	movw	r26, r22
     dda:	1c 92       	st	X, r1
	CANIDM2 = (0x07 <<5); //full mask setting
     ddc:	da 01       	movw	r26, r20
     dde:	8c 92       	st	X, r8
	CANIDM1 = 0xFF; //full mask setting
     de0:	d9 01       	movw	r26, r18
     de2:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     de4:	af ee       	ldi	r26, 0xEF	; 239
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	1c 92       	st	X, r1
	//CANCDMOB |= TRANSMISSION;
	CANIDT4 = 0x00;
     dea:	dc 01       	movw	r26, r24
     dec:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     dee:	a1 ef       	ldi	r26, 0xF1	; 241
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	1c 92       	st	X, r1
	CANIDT2 = ((mob_3_id & 0x07) << 5);
     df4:	d9 80       	ldd	r13, Y+1	; 0x01
     df6:	dd 0c       	add	r13, r13
     df8:	dd 0c       	add	r13, r13
     dfa:	dd 0c       	add	r13, r13
     dfc:	dd 0c       	add	r13, r13
     dfe:	dd 0c       	add	r13, r13
     e00:	d5 01       	movw	r26, r10
     e02:	dc 92       	st	X, r13
	CANIDT1 = (mob_3_id >> 3);
     e04:	c9 80       	ldd	r12, Y+1	; 0x01
     e06:	da 80       	ldd	r13, Y+2	; 0x02
     e08:	d6 94       	lsr	r13
     e0a:	c7 94       	ror	r12
     e0c:	d6 94       	lsr	r13
     e0e:	c7 94       	ror	r12
     e10:	d6 94       	lsr	r13
     e12:	c7 94       	ror	r12
     e14:	d3 01       	movw	r26, r6
     e16:	cc 92       	st	X, r12
	CANIE2	|= (1<<IEMOB3); //Enable Interrupt MOb 3
     e18:	d0 80       	ld	r13, Z
     e1a:	bd 2d       	mov	r27, r13
     e1c:	b8 60       	ori	r27, 0x08	; 8
     e1e:	b0 83       	st	Z, r27
	
	//MOb 4 configuration nadawana paczka SDO TX
	CANPAGE	 = (MOb_4<<4);
     e20:	68 94       	set
     e22:	dd 24       	eor	r13, r13
     e24:	d6 f8       	bld	r13, 6
     e26:	d7 01       	movw	r26, r14
     e28:	dc 92       	st	X, r13
	CANIDM4 = 0x00; //full mask setting
     e2a:	d8 01       	movw	r26, r16
     e2c:	1c 92       	st	X, r1
	CANIDM3 = 0x00; //full mask setting
     e2e:	db 01       	movw	r26, r22
     e30:	1c 92       	st	X, r1
	CANIDM2 = (0x07 <<5); //full mask setting
     e32:	da 01       	movw	r26, r20
     e34:	8c 92       	st	X, r8
	CANIDM1 = 0xFF; //full mask setting
     e36:	d9 01       	movw	r26, r18
     e38:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     e3a:	af ee       	ldi	r26, 0xEF	; 239
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	1c 92       	st	X, r1
	//CANCDMOB |= TRANSMISSION;
	CANIDT4 = 0x00;
     e40:	dc 01       	movw	r26, r24
     e42:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     e44:	a1 ef       	ldi	r26, 0xF1	; 241
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	1c 92       	st	X, r1
	CANIDT2 = ((mob_4_id & 0x07) << 5);
     e4a:	db 80       	ldd	r13, Y+3	; 0x03
     e4c:	dd 0c       	add	r13, r13
     e4e:	dd 0c       	add	r13, r13
     e50:	dd 0c       	add	r13, r13
     e52:	dd 0c       	add	r13, r13
     e54:	dd 0c       	add	r13, r13
     e56:	d5 01       	movw	r26, r10
     e58:	dc 92       	st	X, r13
	CANIDT1 = (mob_4_id >> 3);
     e5a:	cb 80       	ldd	r12, Y+3	; 0x03
     e5c:	dc 80       	ldd	r13, Y+4	; 0x04
     e5e:	d6 94       	lsr	r13
     e60:	c7 94       	ror	r12
     e62:	d6 94       	lsr	r13
     e64:	c7 94       	ror	r12
     e66:	d6 94       	lsr	r13
     e68:	c7 94       	ror	r12
     e6a:	d3 01       	movw	r26, r6
     e6c:	cc 92       	st	X, r12
	CANIE2	|= (1<<IEMOB4); //Enable Interrupt MOb 4
     e6e:	d0 80       	ld	r13, Z
     e70:	bd 2d       	mov	r27, r13
     e72:	b0 61       	ori	r27, 0x10	; 16
     e74:	b0 83       	st	Z, r27
	
	//MOb 5 configuration odbierana paczka SDO RX
	CANPAGE	 = (MOb_5<<4);
     e76:	0f 2e       	mov	r0, r31
     e78:	f0 e5       	ldi	r31, 0x50	; 80
     e7a:	df 2e       	mov	r13, r31
     e7c:	f0 2d       	mov	r31, r0
     e7e:	d7 01       	movw	r26, r14
     e80:	dc 92       	st	X, r13
	CANIDM4 = 0x00; //full mask setting
     e82:	d8 01       	movw	r26, r16
     e84:	1c 92       	st	X, r1
	CANIDM3 = 0x00; //full mask setting
     e86:	db 01       	movw	r26, r22
     e88:	1c 92       	st	X, r1
	CANIDM2 = 0xFF; //full mask setting
     e8a:	da 01       	movw	r26, r20
     e8c:	9c 92       	st	X, r9
	CANIDM1 = 0xFF; //full mask setting
     e8e:	d9 01       	movw	r26, r18
     e90:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     e92:	af ee       	ldi	r26, 0xEF	; 239
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	1c 92       	st	X, r1
	CANCDMOB |= RECEPTION | ( 8 << DLC0);
     e98:	2c 91       	ld	r18, X
     e9a:	28 68       	ori	r18, 0x88	; 136
     e9c:	2c 93       	st	X, r18
	CANIDT4 = 0x00;
     e9e:	dc 01       	movw	r26, r24
     ea0:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     ea2:	a1 ef       	ldi	r26, 0xF1	; 241
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	1c 92       	st	X, r1
	CANIDT2 = ((mob_5_id & 0x07) << 5);
     ea8:	82 2d       	mov	r24, r2
     eaa:	82 95       	swap	r24
     eac:	88 0f       	add	r24, r24
     eae:	80 7e       	andi	r24, 0xE0	; 224
     eb0:	d5 01       	movw	r26, r10
     eb2:	8c 93       	st	X, r24
	CANIDT1 = (mob_5_id >> 3);
     eb4:	c1 01       	movw	r24, r2
     eb6:	96 95       	lsr	r25
     eb8:	87 95       	ror	r24
     eba:	96 95       	lsr	r25
     ebc:	87 95       	ror	r24
     ebe:	96 95       	lsr	r25
     ec0:	87 95       	ror	r24
     ec2:	d3 01       	movw	r26, r6
     ec4:	8c 93       	st	X, r24
	CANIE2	|= (1<<IEMOB5); //Enable Interrupt MOb 5
     ec6:	80 81       	ld	r24, Z
     ec8:	80 62       	ori	r24, 0x20	; 32
     eca:	80 83       	st	Z, r24
	
	
	CLEAR_FLAG(can_state.flags, CAN_FLAG_INTERRUPT);
     ecc:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
     ed0:	8e 7f       	andi	r24, 0xFE	; 254
     ed2:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
	
	CANGCON |= (1<<ENASTB); //Enable controller
     ed6:	e8 ed       	ldi	r30, 0xD8	; 216
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	82 60       	ori	r24, 0x02	; 2
     ede:	80 83       	st	Z, r24
	
	CANGIE	|= ( 1 << ENIT ) | (1<<ENRX); //Enable Receive Interrupt
     ee0:	eb ed       	ldi	r30, 0xDB	; 219
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 6a       	ori	r24, 0xA0	; 160
     ee8:	80 83       	st	Z, r24
}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	bf 90       	pop	r11
     f04:	af 90       	pop	r10
     f06:	9f 90       	pop	r9
     f08:	8f 90       	pop	r8
     f0a:	7f 90       	pop	r7
     f0c:	6f 90       	pop	r6
     f0e:	5f 90       	pop	r5
     f10:	4f 90       	pop	r4
     f12:	3f 90       	pop	r3
     f14:	2f 90       	pop	r2
     f16:	08 95       	ret

00000f18 <__vector_18>:

//Obs³uga przerwania
SIGNAL ( CAN_INT_vect ){              // use interrupts
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	2f 93       	push	r18
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	af 93       	push	r26
     f2a:	bf 93       	push	r27
     f2c:	ef 93       	push	r30
     f2e:	ff 93       	push	r31
	
	//SET_FLAG(can_state.flags, CAN_FLAG_INTERRUPT);
	int_counter++;
     f30:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <int_counter>
     f34:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <int_counter+0x1>
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <int_counter+0x1>
     f3e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <int_counter>
	
	CANPAGE = CANHPMOB & 0xF0;      // Selects MOB with highest priority interrupt 
     f42:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     f46:	80 7f       	andi	r24, 0xF0	; 240
     f48:	ed ee       	ldi	r30, 0xED	; 237
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 83       	st	Z, r24
				
		if((CANPAGE>>4) == MOb_0){ //SYNC - odbiera
     f4e:	80 81       	ld	r24, Z
     f50:	82 95       	swap	r24
     f52:	8f 70       	andi	r24, 0x0F	; 15
     f54:	91 f4       	brne	.+36     	; 0xf7a <__vector_18+0x62>
			if(CANSTMOB & ( 1 << RXOK)){	//obiór SYNC-a
     f56:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     f5a:	85 ff       	sbrs	r24, 5
     f5c:	05 c0       	rjmp	.+10     	; 0xf68 <__vector_18+0x50>
				SET_FLAG(can_state.flags, CAN_FLAG_SYNC_RECEIVED);				//ustaw flagê ob³sugi synca
     f5e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
     f62:	82 60       	ori	r24, 0x02	; 2
     f64:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
			}
			CANSTMOB=0x00;
     f68:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x00;			//restart MOB-a
     f6c:	ef ee       	ldi	r30, 0xEF	; 239
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	10 82       	st	Z, r1
			CANCDMOB |= RECEPTION;		
     f72:	80 81       	ld	r24, Z
     f74:	80 68       	ori	r24, 0x80	; 128
     f76:	80 83       	st	Z, r24
     f78:	5f c0       	rjmp	.+190    	; 0x1038 <__vector_18+0x120>
		}
		
		else if((CANPAGE>>4) == MOb_1){ //RPDO 1 - odbiera
     f7a:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     f7e:	82 95       	swap	r24
     f80:	8f 70       	andi	r24, 0x0F	; 15
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	d1 f4       	brne	.+52     	; 0xfba <__vector_18+0xa2>
			if(CANSTMOB & ( 1 << RXOK)){	//
     f86:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     f8a:	85 ff       	sbrs	r24, 5
     f8c:	0d c0       	rjmp	.+26     	; 0xfa8 <__vector_18+0x90>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
					MOb_data[MOb_1][byte_nr] = CANMSG;
     f92:	aa ef       	ldi	r26, 0xFA	; 250
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	2c 91       	ld	r18, X
     f98:	fc 01       	movw	r30, r24
     f9a:	e1 58       	subi	r30, 0x81	; 129
     f9c:	fd 4f       	sbci	r31, 0xFD	; 253
     f9e:	20 87       	std	Z+8, r18	; 0x08
     fa0:	01 96       	adiw	r24, 0x01	; 1
			CANCDMOB |= RECEPTION;		
		}
		
		else if((CANPAGE>>4) == MOb_1){ //RPDO 1 - odbiera
			if(CANSTMOB & ( 1 << RXOK)){	//
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
     fa2:	88 30       	cpi	r24, 0x08	; 8
     fa4:	91 05       	cpc	r25, r1
     fa6:	b9 f7       	brne	.-18     	; 0xf96 <__vector_18+0x7e>
					MOb_data[MOb_1][byte_nr] = CANMSG;
				}		
			}
			CANSTMOB=0x00;
     fa8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x00;			//restart MOB-a
     fac:	ef ee       	ldi	r30, 0xEF	; 239
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	10 82       	st	Z, r1
			CANCDMOB |= RECEPTION;
     fb2:	80 81       	ld	r24, Z
     fb4:	80 68       	ori	r24, 0x80	; 128
     fb6:	80 83       	st	Z, r24
     fb8:	3f c0       	rjmp	.+126    	; 0x1038 <__vector_18+0x120>
		}
		
		//czyszczenie flag przerwania dla paczek nadaj¹cych
		else if((CANPAGE>>4) == MOb_2){//TPDO 1
     fba:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     fbe:	82 95       	swap	r24
     fc0:	8f 70       	andi	r24, 0x0F	; 15
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	19 f4       	brne	.+6      	; 0xfcc <__vector_18+0xb4>
			CANSTMOB=0x00;
     fc6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     fca:	36 c0       	rjmp	.+108    	; 0x1038 <__vector_18+0x120>
		}
		
		else if((CANPAGE>>4) == MOb_3){//TPDO 2
     fcc:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     fd0:	82 95       	swap	r24
     fd2:	8f 70       	andi	r24, 0x0F	; 15
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	19 f4       	brne	.+6      	; 0xfde <__vector_18+0xc6>
			CANSTMOB=0x00;
     fd8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     fdc:	2d c0       	rjmp	.+90     	; 0x1038 <__vector_18+0x120>
		}
		
		else if((CANPAGE>>4) == MOb_4){//SDO TX
     fde:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     fe2:	82 95       	swap	r24
     fe4:	8f 70       	andi	r24, 0x0F	; 15
     fe6:	84 30       	cpi	r24, 0x04	; 4
     fe8:	19 f4       	brne	.+6      	; 0xff0 <__vector_18+0xd8>
			CANSTMOB=0x00;
     fea:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     fee:	24 c0       	rjmp	.+72     	; 0x1038 <__vector_18+0x120>
		}
		
		else if((CANPAGE>>4) == MOb_5){ //SDO RX - odbiera
     ff0:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     ff4:	82 95       	swap	r24
     ff6:	8f 70       	andi	r24, 0x0F	; 15
     ff8:	85 30       	cpi	r24, 0x05	; 5
     ffa:	f1 f4       	brne	.+60     	; 0x1038 <__vector_18+0x120>
			if(CANSTMOB & ( 1 << RXOK)){	
     ffc:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1000:	85 ff       	sbrs	r24, 5
    1002:	0d c0       	rjmp	.+26     	; 0x101e <__vector_18+0x106>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
					MOb_data[MOb_5][byte_nr] = CANMSG;
    1008:	aa ef       	ldi	r26, 0xFA	; 250
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	2c 91       	ld	r18, X
    100e:	fc 01       	movw	r30, r24
    1010:	e1 58       	subi	r30, 0x81	; 129
    1012:	fd 4f       	sbci	r31, 0xFD	; 253
    1014:	20 a7       	std	Z+40, r18	; 0x28
    1016:	01 96       	adiw	r24, 0x01	; 1
			CANSTMOB=0x00;
		}
		
		else if((CANPAGE>>4) == MOb_5){ //SDO RX - odbiera
			if(CANSTMOB & ( 1 << RXOK)){	
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
    1018:	88 30       	cpi	r24, 0x08	; 8
    101a:	91 05       	cpc	r25, r1
    101c:	b9 f7       	brne	.-18     	; 0x100c <__vector_18+0xf4>
					MOb_data[MOb_5][byte_nr] = CANMSG;
				}
			}
			SET_FLAG(can_state.flags, CAN_FLAG_SDO_RECEIVED);
    101e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1022:	88 60       	ori	r24, 0x08	; 8
    1024:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
			CANSTMOB=0x00;
    1028:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x00;			//restart MOB-a
    102c:	ef ee       	ldi	r30, 0xEF	; 239
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	10 82       	st	Z, r1
			CANCDMOB |= RECEPTION;
    1032:	80 81       	ld	r24, Z
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	80 83       	st	Z, r24
		}
		

} 
    1038:	ff 91       	pop	r31
    103a:	ef 91       	pop	r30
    103c:	bf 91       	pop	r27
    103e:	af 91       	pop	r26
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	2f 91       	pop	r18
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <CAN_send_SDO>:
		else mob++;
	}
}

void CAN_send_SDO(){
		CANPAGE = ( MOb_SDO_TX << 4 );						// Selects Message Object 0-5
    1050:	80 e4       	ldi	r24, 0x40	; 64
    1052:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if((CANEN2 & ( 1 << MOb_SDO_TX )) == 0){		//Jeœli MOb jest wolny
    1056:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    105a:	84 fd       	sbrc	r24, 4
    105c:	0d c0       	rjmp	.+26     	; 0x1078 <CAN_send_SDO+0x28>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
				CANMSG = MOb_data[MOb_SDO_TX][byte_nr];
    1062:	aa ef       	ldi	r26, 0xFA	; 250
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	fc 01       	movw	r30, r24
    1068:	e1 58       	subi	r30, 0x81	; 129
    106a:	fd 4f       	sbci	r31, 0xFD	; 253
    106c:	20 a1       	ldd	r18, Z+32	; 0x20
    106e:	2c 93       	st	X, r18
    1070:	01 96       	adiw	r24, 0x01	; 1
}

void CAN_send_SDO(){
		CANPAGE = ( MOb_SDO_TX << 4 );						// Selects Message Object 0-5
		if((CANEN2 & ( 1 << MOb_SDO_TX )) == 0){		//Jeœli MOb jest wolny
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
    1072:	88 30       	cpi	r24, 0x08	; 8
    1074:	91 05       	cpc	r25, r1
    1076:	b9 f7       	brne	.-18     	; 0x1066 <CAN_send_SDO+0x16>
				CANMSG = MOb_data[MOb_SDO_TX][byte_nr];
			}
		}
		//czyszczenie rejestru statusu
		CANSTMOB = 0x00;
    1078:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		//komenda nadania
		CANCDMOB = TRANSMISSION | ( 8 << DLC0);//zleæ transmisjê 8 bajtów
    107c:	88 e4       	ldi	r24, 0x48	; 72
    107e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    1082:	08 95       	ret

00001084 <CAN_task>:
}*/

void CAN_task(){
	
	//obs³uga SDO
	if( HAS_FLAG(can_state.flags, CAN_FLAG_SDO_RECEIVED) ){
    1084:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1088:	83 ff       	sbrs	r24, 3
    108a:	3d c3       	rjmp	.+1658   	; 0x1706 <CAN_task+0x682>
		
		if(SDO_RX_COMMAND == SDO_READ_COMMAND){//gdy komenda odczytu
    108c:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <MOb_data+0x28>
    1090:	80 34       	cpi	r24, 0x40	; 64
    1092:	09 f0       	breq	.+2      	; 0x1096 <CAN_task+0x12>
    1094:	b2 c1       	rjmp	.+868    	; 0x13fa <CAN_task+0x376>
			switch (SDO_RX_INDEX){//sprawdzanie po indexie
    1096:	af e7       	ldi	r26, 0x7F	; 127
    1098:	b2 e0       	ldi	r27, 0x02	; 2
    109a:	99 96       	adiw	r26, 0x29	; 41
    109c:	ec 91       	ld	r30, X
    109e:	99 97       	sbiw	r26, 0x29	; 41
    10a0:	9a 96       	adiw	r26, 0x2a	; 42
    10a2:	8c 91       	ld	r24, X
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	f8 2b       	or	r31, r24
    10a8:	f0 52       	subi	r31, 0x20	; 32
    10aa:	e8 30       	cpi	r30, 0x08	; 8
    10ac:	f1 05       	cpc	r31, r1
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <CAN_task+0x2e>
    10b0:	69 c1       	rjmp	.+722    	; 0x1384 <CAN_task+0x300>
    10b2:	e2 5c       	subi	r30, 0xC2	; 194
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__tablejump2__>
				
				case 0x2000:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    10ba:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    10be:	80 62       	ori	r24, 0x20	; 32
    10c0:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){ //sprawdzanie po subindexie
    10c4:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	69 f0       	breq	.+26     	; 0x10e6 <CAN_task+0x62>
    10cc:	18 f0       	brcs	.+6      	; 0x10d4 <CAN_task+0x50>
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	99 f0       	breq	.+38     	; 0x10f8 <CAN_task+0x74>
    10d2:	1b c0       	rjmp	.+54     	; 0x110a <CAN_task+0x86>
						case 0x00:
							SDO_TX_DATA_1 = adc_results.raw_board_position;
    10d4:	eb ed       	ldi	r30, 0xDB	; 219
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	94 81       	ldd	r25, Z+4	; 0x04
    10da:	85 81       	ldd	r24, Z+5	; 0x05
    10dc:	ef e7       	ldi	r30, 0x7F	; 127
    10de:	f2 e0       	ldi	r31, 0x02	; 2
    10e0:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = adc_results.raw_board_position >> 8;
    10e2:	85 a3       	std	Z+37, r24	; 0x25
						break;
    10e4:	54 c1       	rjmp	.+680    	; 0x138e <CAN_task+0x30a>
						
						case 0x01:
							SDO_TX_DATA_1 = adc_results.raw_current;
    10e6:	eb ed       	ldi	r30, 0xDB	; 219
    10e8:	f1 e0       	ldi	r31, 0x01	; 1
    10ea:	90 81       	ld	r25, Z
    10ec:	81 81       	ldd	r24, Z+1	; 0x01
    10ee:	ef e7       	ldi	r30, 0x7F	; 127
    10f0:	f2 e0       	ldi	r31, 0x02	; 2
    10f2:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = adc_results.raw_current >> 8;
    10f4:	85 a3       	std	Z+37, r24	; 0x25
						break;
    10f6:	4b c1       	rjmp	.+662    	; 0x138e <CAN_task+0x30a>
						
						case 0x02:
							SDO_TX_DATA_1 = adc_results.raw_voltage;
    10f8:	eb ed       	ldi	r30, 0xDB	; 219
    10fa:	f1 e0       	ldi	r31, 0x01	; 1
    10fc:	92 81       	ldd	r25, Z+2	; 0x02
    10fe:	83 81       	ldd	r24, Z+3	; 0x03
    1100:	ef e7       	ldi	r30, 0x7F	; 127
    1102:	f2 e0       	ldi	r31, 0x02	; 2
    1104:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = adc_results.raw_voltage >> 8;
    1106:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1108:	42 c1       	rjmp	.+644    	; 0x138e <CAN_task+0x30a>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    110a:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    110e:	80 61       	ori	r24, 0x10	; 16
    1110:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    1114:	3c c1       	rjmp	.+632    	; 0x138e <CAN_task+0x30a>
					}
				break;
				
				case 0x2001:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    1116:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    111a:	80 62       	ori	r24, 0x20	; 32
    111c:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){
    1120:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	79 f0       	breq	.+30     	; 0x1146 <CAN_task+0xc2>
    1128:	28 f0       	brcs	.+10     	; 0x1134 <CAN_task+0xb0>
    112a:	82 30       	cpi	r24, 0x02	; 2
    112c:	a9 f0       	breq	.+42     	; 0x1158 <CAN_task+0xd4>
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	e1 f0       	breq	.+56     	; 0x116a <CAN_task+0xe6>
    1132:	24 c0       	rjmp	.+72     	; 0x117c <CAN_task+0xf8>
						
						case 0x00:
							SDO_TX_DATA_1 = non_volatile_data.adc_board_position_offset;
    1134:	ea e4       	ldi	r30, 0x4A	; 74
    1136:	f2 e0       	ldi	r31, 0x02	; 2
    1138:	90 81       	ld	r25, Z
    113a:	81 81       	ldd	r24, Z+1	; 0x01
    113c:	ef e7       	ldi	r30, 0x7F	; 127
    113e:	f2 e0       	ldi	r31, 0x02	; 2
    1140:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.adc_board_position_offset >> 8;
    1142:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1144:	24 c1       	rjmp	.+584    	; 0x138e <CAN_task+0x30a>
						
						case 0x01:
							SDO_TX_DATA_1 = non_volatile_data.adc_board_position_scale;
    1146:	ea e4       	ldi	r30, 0x4A	; 74
    1148:	f2 e0       	ldi	r31, 0x02	; 2
    114a:	92 81       	ldd	r25, Z+2	; 0x02
    114c:	83 81       	ldd	r24, Z+3	; 0x03
    114e:	ef e7       	ldi	r30, 0x7F	; 127
    1150:	f2 e0       	ldi	r31, 0x02	; 2
    1152:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.adc_board_position_scale >> 8;
    1154:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1156:	1b c1       	rjmp	.+566    	; 0x138e <CAN_task+0x30a>
						
						case 0x02:
							SDO_TX_DATA_1 = non_volatile_data.adc_board_position_max;
    1158:	ea e4       	ldi	r30, 0x4A	; 74
    115a:	f2 e0       	ldi	r31, 0x02	; 2
    115c:	94 81       	ldd	r25, Z+4	; 0x04
    115e:	85 81       	ldd	r24, Z+5	; 0x05
    1160:	ef e7       	ldi	r30, 0x7F	; 127
    1162:	f2 e0       	ldi	r31, 0x02	; 2
    1164:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.adc_board_position_max >> 8;
    1166:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1168:	12 c1       	rjmp	.+548    	; 0x138e <CAN_task+0x30a>
						
						case 0x03:
							SDO_TX_DATA_1 = non_volatile_data.adc_board_position_min;
    116a:	ea e4       	ldi	r30, 0x4A	; 74
    116c:	f2 e0       	ldi	r31, 0x02	; 2
    116e:	96 81       	ldd	r25, Z+6	; 0x06
    1170:	87 81       	ldd	r24, Z+7	; 0x07
    1172:	ef e7       	ldi	r30, 0x7F	; 127
    1174:	f2 e0       	ldi	r31, 0x02	; 2
    1176:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.adc_board_position_min >> 8;
    1178:	85 a3       	std	Z+37, r24	; 0x25
						break;
    117a:	09 c1       	rjmp	.+530    	; 0x138e <CAN_task+0x30a>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    117c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1180:	80 61       	ori	r24, 0x10	; 16
    1182:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    1186:	03 c1       	rjmp	.+518    	; 0x138e <CAN_task+0x30a>
					}
				break;
				
				case 0x2002:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    1188:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    118c:	80 62       	ori	r24, 0x20	; 32
    118e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){
    1192:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    1196:	88 23       	and	r24, r24
    1198:	19 f0       	breq	.+6      	; 0x11a0 <CAN_task+0x11c>
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	51 f0       	breq	.+20     	; 0x11b2 <CAN_task+0x12e>
    119e:	12 c0       	rjmp	.+36     	; 0x11c4 <CAN_task+0x140>
						case 0x00:
							SDO_TX_DATA_1 = non_volatile_data.adc_current_offset;
    11a0:	ea e4       	ldi	r30, 0x4A	; 74
    11a2:	f2 e0       	ldi	r31, 0x02	; 2
    11a4:	90 85       	ldd	r25, Z+8	; 0x08
    11a6:	81 85       	ldd	r24, Z+9	; 0x09
    11a8:	ef e7       	ldi	r30, 0x7F	; 127
    11aa:	f2 e0       	ldi	r31, 0x02	; 2
    11ac:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.adc_current_offset >> 8;
    11ae:	85 a3       	std	Z+37, r24	; 0x25
						break;
    11b0:	ee c0       	rjmp	.+476    	; 0x138e <CAN_task+0x30a>
					
						case 0x01:
							SDO_TX_DATA_1 = non_volatile_data.adc_current_scale;
    11b2:	ea e4       	ldi	r30, 0x4A	; 74
    11b4:	f2 e0       	ldi	r31, 0x02	; 2
    11b6:	92 85       	ldd	r25, Z+10	; 0x0a
    11b8:	83 85       	ldd	r24, Z+11	; 0x0b
    11ba:	ef e7       	ldi	r30, 0x7F	; 127
    11bc:	f2 e0       	ldi	r31, 0x02	; 2
    11be:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.adc_current_scale >> 8;
    11c0:	85 a3       	std	Z+37, r24	; 0x25
						break;
    11c2:	e5 c0       	rjmp	.+458    	; 0x138e <CAN_task+0x30a>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    11c4:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    11c8:	80 61       	ori	r24, 0x10	; 16
    11ca:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    11ce:	df c0       	rjmp	.+446    	; 0x138e <CAN_task+0x30a>
					}
				break;
				
				case 0x2003:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    11d0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    11d4:	80 62       	ori	r24, 0x20	; 32
    11d6:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){
    11da:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    11de:	88 23       	and	r24, r24
    11e0:	19 f0       	breq	.+6      	; 0x11e8 <CAN_task+0x164>
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	51 f0       	breq	.+20     	; 0x11fa <CAN_task+0x176>
    11e6:	12 c0       	rjmp	.+36     	; 0x120c <CAN_task+0x188>
						case 0x00:
							SDO_TX_DATA_1 = non_volatile_data.adc_voltage_offset;
    11e8:	ea e4       	ldi	r30, 0x4A	; 74
    11ea:	f2 e0       	ldi	r31, 0x02	; 2
    11ec:	94 85       	ldd	r25, Z+12	; 0x0c
    11ee:	85 85       	ldd	r24, Z+13	; 0x0d
    11f0:	ef e7       	ldi	r30, 0x7F	; 127
    11f2:	f2 e0       	ldi	r31, 0x02	; 2
    11f4:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.adc_voltage_offset >> 8;
    11f6:	85 a3       	std	Z+37, r24	; 0x25
						break;
    11f8:	ca c0       	rjmp	.+404    	; 0x138e <CAN_task+0x30a>
					
						case 0x01:
							SDO_TX_DATA_1 = non_volatile_data.adc_voltage_scale;
    11fa:	ea e4       	ldi	r30, 0x4A	; 74
    11fc:	f2 e0       	ldi	r31, 0x02	; 2
    11fe:	96 85       	ldd	r25, Z+14	; 0x0e
    1200:	87 85       	ldd	r24, Z+15	; 0x0f
    1202:	ef e7       	ldi	r30, 0x7F	; 127
    1204:	f2 e0       	ldi	r31, 0x02	; 2
    1206:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.adc_voltage_scale >> 8;
    1208:	85 a3       	std	Z+37, r24	; 0x25
						break;
    120a:	c1 c0       	rjmp	.+386    	; 0x138e <CAN_task+0x30a>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    120c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1210:	80 61       	ori	r24, 0x10	; 16
    1212:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    1216:	bb c0       	rjmp	.+374    	; 0x138e <CAN_task+0x30a>
					}
				break;
				
				case 0x2004:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_8);
    1218:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    121c:	80 61       	ori	r24, 0x10	; 16
    121e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){
    1222:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    1226:	88 23       	and	r24, r24
    1228:	19 f0       	breq	.+6      	; 0x1230 <CAN_task+0x1ac>
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	31 f0       	breq	.+12     	; 0x123a <CAN_task+0x1b6>
    122e:	0a c0       	rjmp	.+20     	; 0x1244 <CAN_task+0x1c0>
						case 0x00:
							SDO_TX_DATA_1 = non_volatile_data.winch_overcurrent_value;
    1230:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <non_volatile_data+0x10>
    1234:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <MOb_data+0x24>
						break;
    1238:	aa c0       	rjmp	.+340    	; 0x138e <CAN_task+0x30a>
					
						case 0x01:
							SDO_TX_DATA_1 = non_volatile_data.board_overcurrent_value;
    123a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <non_volatile_data+0x11>
    123e:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <MOb_data+0x24>
						break;
    1242:	a5 c0       	rjmp	.+330    	; 0x138e <CAN_task+0x30a>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    1244:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1248:	80 61       	ori	r24, 0x10	; 16
    124a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    124e:	9f c0       	rjmp	.+318    	; 0x138e <CAN_task+0x30a>
					}
				break;
				
				case 0x2005:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    1250:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1254:	80 62       	ori	r24, 0x20	; 32
    1256:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){
    125a:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	79 f0       	breq	.+30     	; 0x1280 <CAN_task+0x1fc>
    1262:	28 f0       	brcs	.+10     	; 0x126e <CAN_task+0x1ea>
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	a9 f0       	breq	.+42     	; 0x1292 <CAN_task+0x20e>
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	e1 f0       	breq	.+56     	; 0x12a4 <CAN_task+0x220>
    126c:	24 c0       	rjmp	.+72     	; 0x12b6 <CAN_task+0x232>
						case 0x00:
							SDO_TX_DATA_1 = non_volatile_data.torque_init_val_winch_up;
    126e:	ea e4       	ldi	r30, 0x4A	; 74
    1270:	f2 e0       	ldi	r31, 0x02	; 2
    1272:	92 89       	ldd	r25, Z+18	; 0x12
    1274:	83 89       	ldd	r24, Z+19	; 0x13
    1276:	ef e7       	ldi	r30, 0x7F	; 127
    1278:	f2 e0       	ldi	r31, 0x02	; 2
    127a:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.torque_init_val_winch_up >> 8;
    127c:	85 a3       	std	Z+37, r24	; 0x25
						break;
    127e:	87 c0       	rjmp	.+270    	; 0x138e <CAN_task+0x30a>
					
						case 0x01:
							SDO_TX_DATA_1 = non_volatile_data.torque_init_val_winch_down;
    1280:	ea e4       	ldi	r30, 0x4A	; 74
    1282:	f2 e0       	ldi	r31, 0x02	; 2
    1284:	94 89       	ldd	r25, Z+20	; 0x14
    1286:	85 89       	ldd	r24, Z+21	; 0x15
    1288:	ef e7       	ldi	r30, 0x7F	; 127
    128a:	f2 e0       	ldi	r31, 0x02	; 2
    128c:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.torque_init_val_winch_down >> 8;
    128e:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1290:	7e c0       	rjmp	.+252    	; 0x138e <CAN_task+0x30a>
						
						case 0x02:
							SDO_TX_DATA_1 = non_volatile_data.torque_init_val_board_up;
    1292:	ea e4       	ldi	r30, 0x4A	; 74
    1294:	f2 e0       	ldi	r31, 0x02	; 2
    1296:	96 89       	ldd	r25, Z+22	; 0x16
    1298:	87 89       	ldd	r24, Z+23	; 0x17
    129a:	ef e7       	ldi	r30, 0x7F	; 127
    129c:	f2 e0       	ldi	r31, 0x02	; 2
    129e:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.torque_init_val_board_up >> 8;
    12a0:	85 a3       	std	Z+37, r24	; 0x25
						break;
    12a2:	75 c0       	rjmp	.+234    	; 0x138e <CAN_task+0x30a>
					
						case 0x03:
							SDO_TX_DATA_1 = non_volatile_data.torque_init_val_board_down;
    12a4:	ea e4       	ldi	r30, 0x4A	; 74
    12a6:	f2 e0       	ldi	r31, 0x02	; 2
    12a8:	90 8d       	ldd	r25, Z+24	; 0x18
    12aa:	81 8d       	ldd	r24, Z+25	; 0x19
    12ac:	ef e7       	ldi	r30, 0x7F	; 127
    12ae:	f2 e0       	ldi	r31, 0x02	; 2
    12b0:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.torque_init_val_board_down >> 8;
    12b2:	85 a3       	std	Z+37, r24	; 0x25
						break;
    12b4:	6c c0       	rjmp	.+216    	; 0x138e <CAN_task+0x30a>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    12b6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    12ba:	80 61       	ori	r24, 0x10	; 16
    12bc:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    12c0:	66 c0       	rjmp	.+204    	; 0x138e <CAN_task+0x30a>
					}
				break;
				
				case 0x2006:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_8);
    12c2:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    12c6:	80 61       	ori	r24, 0x10	; 16
    12c8:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){
    12cc:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	59 f0       	breq	.+22     	; 0x12ea <CAN_task+0x266>
    12d4:	28 f0       	brcs	.+10     	; 0x12e0 <CAN_task+0x25c>
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	69 f0       	breq	.+26     	; 0x12f4 <CAN_task+0x270>
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	81 f0       	breq	.+32     	; 0x12fe <CAN_task+0x27a>
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <CAN_task+0x284>
						case 0x00:
							SDO_TX_DATA_1 = non_volatile_data.torque_rising_speed_period_winch_up;
    12e0:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <non_volatile_data+0x1a>
    12e4:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <MOb_data+0x24>
						break;
    12e8:	52 c0       	rjmp	.+164    	; 0x138e <CAN_task+0x30a>
					
						case 0x01:
							SDO_TX_DATA_1 = non_volatile_data.torque_rising_speed_period_winch_down;
    12ea:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <non_volatile_data+0x1b>
    12ee:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <MOb_data+0x24>
						break;
    12f2:	4d c0       	rjmp	.+154    	; 0x138e <CAN_task+0x30a>
					
						case 0x02:
							SDO_TX_DATA_1 = non_volatile_data.torque_rising_speed_period_board_up;
    12f4:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <non_volatile_data+0x1c>
    12f8:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <MOb_data+0x24>
						break;
    12fc:	48 c0       	rjmp	.+144    	; 0x138e <CAN_task+0x30a>
					
						case 0x03:
							SDO_TX_DATA_1 = non_volatile_data.torque_rising_speed_period_board_down;
    12fe:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <non_volatile_data+0x1d>
    1302:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <MOb_data+0x24>
						break;
    1306:	43 c0       	rjmp	.+134    	; 0x138e <CAN_task+0x30a>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    1308:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    130c:	80 61       	ori	r24, 0x10	; 16
    130e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    1312:	3d c0       	rjmp	.+122    	; 0x138e <CAN_task+0x30a>
					}
				break;
				
				case 0x2007:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    1314:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1318:	80 62       	ori	r24, 0x20	; 32
    131a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){
    131e:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	79 f0       	breq	.+30     	; 0x1344 <CAN_task+0x2c0>
    1326:	28 f0       	brcs	.+10     	; 0x1332 <CAN_task+0x2ae>
    1328:	82 30       	cpi	r24, 0x02	; 2
    132a:	a9 f0       	breq	.+42     	; 0x1356 <CAN_task+0x2d2>
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	e1 f0       	breq	.+56     	; 0x1368 <CAN_task+0x2e4>
    1330:	24 c0       	rjmp	.+72     	; 0x137a <CAN_task+0x2f6>
						case 0x00:
							SDO_TX_DATA_1 = non_volatile_data.torque_rising_speed_winch_up;
    1332:	ea e4       	ldi	r30, 0x4A	; 74
    1334:	f2 e0       	ldi	r31, 0x02	; 2
    1336:	96 8d       	ldd	r25, Z+30	; 0x1e
    1338:	87 8d       	ldd	r24, Z+31	; 0x1f
    133a:	ef e7       	ldi	r30, 0x7F	; 127
    133c:	f2 e0       	ldi	r31, 0x02	; 2
    133e:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.torque_rising_speed_winch_up >> 8;
    1340:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1342:	20 c0       	rjmp	.+64     	; 0x1384 <CAN_task+0x300>
					
						case 0x01:
							SDO_TX_DATA_1 = non_volatile_data.torque_rising_speed_winch_down;
    1344:	ea e4       	ldi	r30, 0x4A	; 74
    1346:	f2 e0       	ldi	r31, 0x02	; 2
    1348:	90 a1       	ldd	r25, Z+32	; 0x20
    134a:	81 a1       	ldd	r24, Z+33	; 0x21
    134c:	ef e7       	ldi	r30, 0x7F	; 127
    134e:	f2 e0       	ldi	r31, 0x02	; 2
    1350:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.torque_rising_speed_winch_down >> 8;
    1352:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1354:	17 c0       	rjmp	.+46     	; 0x1384 <CAN_task+0x300>
						
						case 0x02:
							SDO_TX_DATA_1 = non_volatile_data.torque_rising_speed_board_up;
    1356:	ea e4       	ldi	r30, 0x4A	; 74
    1358:	f2 e0       	ldi	r31, 0x02	; 2
    135a:	92 a1       	ldd	r25, Z+34	; 0x22
    135c:	83 a1       	ldd	r24, Z+35	; 0x23
    135e:	ef e7       	ldi	r30, 0x7F	; 127
    1360:	f2 e0       	ldi	r31, 0x02	; 2
    1362:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.torque_rising_speed_board_up >> 8;
    1364:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1366:	0e c0       	rjmp	.+28     	; 0x1384 <CAN_task+0x300>
					
						case 0x03:
							SDO_TX_DATA_1 = non_volatile_data.torque_rising_speed_board_down;
    1368:	ea e4       	ldi	r30, 0x4A	; 74
    136a:	f2 e0       	ldi	r31, 0x02	; 2
    136c:	94 a1       	ldd	r25, Z+36	; 0x24
    136e:	85 a1       	ldd	r24, Z+37	; 0x25
    1370:	ef e7       	ldi	r30, 0x7F	; 127
    1372:	f2 e0       	ldi	r31, 0x02	; 2
    1374:	94 a3       	std	Z+36, r25	; 0x24
							SDO_TX_DATA_2 = non_volatile_data.torque_rising_speed_board_down >> 8;
    1376:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <CAN_task+0x300>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    137a:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    137e:	80 61       	ori	r24, 0x10	; 16
    1380:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					}
					
				default:
					SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    1384:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1388:	80 61       	ori	r24, 0x10	; 16
    138a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
			}
			//uzupe³nianie pozosta³ych pól pakietu
			if(!(HAS_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED))){
    138e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1392:	84 fd       	sbrc	r24, 4
    1394:	23 c0       	rjmp	.+70     	; 0x13dc <CAN_task+0x358>
				if(HAS_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16)){
    1396:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    139a:	85 ff       	sbrs	r24, 5
    139c:	0d c0       	rjmp	.+26     	; 0x13b8 <CAN_task+0x334>
					SDO_READ_POSITIVE_RESPONSE_16;
    139e:	ef e7       	ldi	r30, 0x7F	; 127
    13a0:	f2 e0       	ldi	r31, 0x02	; 2
    13a2:	8b e4       	ldi	r24, 0x4B	; 75
    13a4:	80 a3       	std	Z+32, r24	; 0x20
    13a6:	81 a5       	ldd	r24, Z+41	; 0x29
    13a8:	81 a3       	std	Z+33, r24	; 0x21
    13aa:	82 a5       	ldd	r24, Z+42	; 0x2a
    13ac:	82 a3       	std	Z+34, r24	; 0x22
    13ae:	83 a5       	ldd	r24, Z+43	; 0x2b
    13b0:	83 a3       	std	Z+35, r24	; 0x23
    13b2:	16 a2       	std	Z+38, r1	; 0x26
    13b4:	17 a2       	std	Z+39, r1	; 0x27
    13b6:	9f c1       	rjmp	.+830    	; 0x16f6 <CAN_task+0x672>

				}
				else if(HAS_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_8)){
    13b8:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    13bc:	84 ff       	sbrs	r24, 4
    13be:	9b c1       	rjmp	.+822    	; 0x16f6 <CAN_task+0x672>
					SDO_READ_POSITIVE_RESPONSE_8;
    13c0:	ef e7       	ldi	r30, 0x7F	; 127
    13c2:	f2 e0       	ldi	r31, 0x02	; 2
    13c4:	8f e4       	ldi	r24, 0x4F	; 79
    13c6:	80 a3       	std	Z+32, r24	; 0x20
    13c8:	81 a5       	ldd	r24, Z+41	; 0x29
    13ca:	81 a3       	std	Z+33, r24	; 0x21
    13cc:	82 a5       	ldd	r24, Z+42	; 0x2a
    13ce:	82 a3       	std	Z+34, r24	; 0x22
    13d0:	83 a5       	ldd	r24, Z+43	; 0x2b
    13d2:	83 a3       	std	Z+35, r24	; 0x23
    13d4:	15 a2       	std	Z+37, r1	; 0x25
    13d6:	16 a2       	std	Z+38, r1	; 0x26
    13d8:	17 a2       	std	Z+39, r1	; 0x27
    13da:	8d c1       	rjmp	.+794    	; 0x16f6 <CAN_task+0x672>
				}
			}
			else{
				SDO_NEGATIVE_RESPONSE;
    13dc:	ef e7       	ldi	r30, 0x7F	; 127
    13de:	f2 e0       	ldi	r31, 0x02	; 2
    13e0:	80 e8       	ldi	r24, 0x80	; 128
    13e2:	80 a3       	std	Z+32, r24	; 0x20
    13e4:	81 a5       	ldd	r24, Z+41	; 0x29
    13e6:	81 a3       	std	Z+33, r24	; 0x21
    13e8:	82 a5       	ldd	r24, Z+42	; 0x2a
    13ea:	82 a3       	std	Z+34, r24	; 0x22
    13ec:	83 a5       	ldd	r24, Z+43	; 0x2b
    13ee:	83 a3       	std	Z+35, r24	; 0x23
    13f0:	14 a2       	std	Z+36, r1	; 0x24
    13f2:	15 a2       	std	Z+37, r1	; 0x25
    13f4:	16 a2       	std	Z+38, r1	; 0x26
    13f6:	17 a2       	std	Z+39, r1	; 0x27
    13f8:	7e c1       	rjmp	.+764    	; 0x16f6 <CAN_task+0x672>
			}
		}
		/*--ZAPIS--*/
		else if(SDO_RX_COMMAND & SDO_WRITE_COMMAND){//gdy komenda zapisu
    13fa:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <MOb_data+0x28>
    13fe:	83 72       	andi	r24, 0x23	; 35
    1400:	09 f4       	brne	.+2      	; 0x1404 <CAN_task+0x380>
    1402:	6b c1       	rjmp	.+726    	; 0x16da <CAN_task+0x656>
			switch (SDO_RX_INDEX){
    1404:	af e7       	ldi	r26, 0x7F	; 127
    1406:	b2 e0       	ldi	r27, 0x02	; 2
    1408:	99 96       	adiw	r26, 0x29	; 41
    140a:	ec 91       	ld	r30, X
    140c:	99 97       	sbiw	r26, 0x29	; 41
    140e:	9a 96       	adiw	r26, 0x2a	; 42
    1410:	8c 91       	ld	r24, X
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	f8 2b       	or	r31, r24
    1416:	e1 50       	subi	r30, 0x01	; 1
    1418:	f0 42       	sbci	r31, 0x20	; 32
    141a:	e7 30       	cpi	r30, 0x07	; 7
    141c:	f1 05       	cpc	r31, r1
    141e:	08 f0       	brcs	.+2      	; 0x1422 <CAN_task+0x39e>
    1420:	33 c1       	rjmp	.+614    	; 0x1688 <CAN_task+0x604>
    1422:	ea 5b       	subi	r30, 0xBA	; 186
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__tablejump2__>
				
				case 0x2001:
					switch(SDO_RX_SUBINDEX){
    142a:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    142e:	88 23       	and	r24, r24
    1430:	19 f0       	breq	.+6      	; 0x1438 <CAN_task+0x3b4>
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	61 f0       	breq	.+24     	; 0x144e <CAN_task+0x3ca>
    1436:	16 c0       	rjmp	.+44     	; 0x1464 <CAN_task+0x3e0>
						case 0x00:
							non_volatile_data.adc_board_position_max = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    1438:	ef e7       	ldi	r30, 0x7F	; 127
    143a:	f2 e0       	ldi	r31, 0x02	; 2
    143c:	84 a5       	ldd	r24, Z+44	; 0x2c
    143e:	25 a5       	ldd	r18, Z+45	; 0x2d
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	92 2b       	or	r25, r18
    1444:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <non_volatile_data+0x5>
    1448:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <non_volatile_data+0x4>
						break;
    144c:	22 c1       	rjmp	.+580    	; 0x1692 <CAN_task+0x60e>
						
						case 0x01:
							non_volatile_data.adc_board_position_min = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    144e:	ef e7       	ldi	r30, 0x7F	; 127
    1450:	f2 e0       	ldi	r31, 0x02	; 2
    1452:	84 a5       	ldd	r24, Z+44	; 0x2c
    1454:	25 a5       	ldd	r18, Z+45	; 0x2d
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	92 2b       	or	r25, r18
    145a:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <non_volatile_data+0x7>
    145e:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <non_volatile_data+0x6>
						break;
    1462:	17 c1       	rjmp	.+558    	; 0x1692 <CAN_task+0x60e>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    1464:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1468:	80 61       	ori	r24, 0x10	; 16
    146a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    146e:	11 c1       	rjmp	.+546    	; 0x1692 <CAN_task+0x60e>
					}
				break;
				
				case 0x2002:
					switch(SDO_RX_SUBINDEX){
    1470:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    1474:	88 23       	and	r24, r24
    1476:	19 f0       	breq	.+6      	; 0x147e <CAN_task+0x3fa>
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	61 f0       	breq	.+24     	; 0x1494 <CAN_task+0x410>
    147c:	16 c0       	rjmp	.+44     	; 0x14aa <CAN_task+0x426>
						case 0x00:
							non_volatile_data.adc_current_offset = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    147e:	ef e7       	ldi	r30, 0x7F	; 127
    1480:	f2 e0       	ldi	r31, 0x02	; 2
    1482:	84 a5       	ldd	r24, Z+44	; 0x2c
    1484:	25 a5       	ldd	r18, Z+45	; 0x2d
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	92 2b       	or	r25, r18
    148a:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <non_volatile_data+0x9>
    148e:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <non_volatile_data+0x8>
						break;
    1492:	ff c0       	rjmp	.+510    	; 0x1692 <CAN_task+0x60e>
					
						case 0x01:
							non_volatile_data.adc_current_scale = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    1494:	ef e7       	ldi	r30, 0x7F	; 127
    1496:	f2 e0       	ldi	r31, 0x02	; 2
    1498:	84 a5       	ldd	r24, Z+44	; 0x2c
    149a:	25 a5       	ldd	r18, Z+45	; 0x2d
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	92 2b       	or	r25, r18
    14a0:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <non_volatile_data+0xb>
    14a4:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <non_volatile_data+0xa>
						break;
    14a8:	f4 c0       	rjmp	.+488    	; 0x1692 <CAN_task+0x60e>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    14aa:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    14ae:	80 61       	ori	r24, 0x10	; 16
    14b0:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    14b4:	ee c0       	rjmp	.+476    	; 0x1692 <CAN_task+0x60e>
					}
				break;
				
				case 0x2003:
					switch(SDO_RX_SUBINDEX){
    14b6:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    14ba:	88 23       	and	r24, r24
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <CAN_task+0x440>
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	61 f0       	breq	.+24     	; 0x14da <CAN_task+0x456>
    14c2:	16 c0       	rjmp	.+44     	; 0x14f0 <CAN_task+0x46c>
						case 0x00:
							non_volatile_data.adc_voltage_offset = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    14c4:	ef e7       	ldi	r30, 0x7F	; 127
    14c6:	f2 e0       	ldi	r31, 0x02	; 2
    14c8:	84 a5       	ldd	r24, Z+44	; 0x2c
    14ca:	25 a5       	ldd	r18, Z+45	; 0x2d
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	92 2b       	or	r25, r18
    14d0:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <non_volatile_data+0xd>
    14d4:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <non_volatile_data+0xc>
						break;
    14d8:	dc c0       	rjmp	.+440    	; 0x1692 <CAN_task+0x60e>
					
						case 0x01:
							non_volatile_data.adc_voltage_scale = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    14da:	ef e7       	ldi	r30, 0x7F	; 127
    14dc:	f2 e0       	ldi	r31, 0x02	; 2
    14de:	84 a5       	ldd	r24, Z+44	; 0x2c
    14e0:	25 a5       	ldd	r18, Z+45	; 0x2d
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	92 2b       	or	r25, r18
    14e6:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <non_volatile_data+0xf>
    14ea:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <non_volatile_data+0xe>
						break;
    14ee:	d1 c0       	rjmp	.+418    	; 0x1692 <CAN_task+0x60e>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    14f0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    14f4:	80 61       	ori	r24, 0x10	; 16
    14f6:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    14fa:	cb c0       	rjmp	.+406    	; 0x1692 <CAN_task+0x60e>
					}
				break;
				
				case 0x2004:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_8);
    14fc:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1500:	80 61       	ori	r24, 0x10	; 16
    1502:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){
    1506:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    150a:	88 23       	and	r24, r24
    150c:	19 f0       	breq	.+6      	; 0x1514 <CAN_task+0x490>
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	31 f0       	breq	.+12     	; 0x151e <CAN_task+0x49a>
    1512:	0a c0       	rjmp	.+20     	; 0x1528 <CAN_task+0x4a4>
						case 0x00:
							non_volatile_data.winch_overcurrent_value = SDO_RX_DATA_1;
    1514:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <MOb_data+0x2c>
    1518:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <non_volatile_data+0x10>
						break;
    151c:	ba c0       	rjmp	.+372    	; 0x1692 <CAN_task+0x60e>
					
						case 0x01:
							non_volatile_data.board_overcurrent_value = SDO_RX_DATA_1;
    151e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <MOb_data+0x2c>
    1522:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <non_volatile_data+0x11>
						break;
    1526:	b5 c0       	rjmp	.+362    	; 0x1692 <CAN_task+0x60e>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    1528:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    152c:	80 61       	ori	r24, 0x10	; 16
    152e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    1532:	af c0       	rjmp	.+350    	; 0x1692 <CAN_task+0x60e>
					}
				break;
				
				case 0x2005:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    1534:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1538:	80 62       	ori	r24, 0x20	; 32
    153a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){
    153e:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	89 f0       	breq	.+34     	; 0x1568 <CAN_task+0x4e4>
    1546:	28 f0       	brcs	.+10     	; 0x1552 <CAN_task+0x4ce>
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	c9 f0       	breq	.+50     	; 0x157e <CAN_task+0x4fa>
    154c:	83 30       	cpi	r24, 0x03	; 3
    154e:	11 f1       	breq	.+68     	; 0x1594 <CAN_task+0x510>
    1550:	2c c0       	rjmp	.+88     	; 0x15aa <CAN_task+0x526>
						case 0x00:
							non_volatile_data.torque_init_val_winch_up = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    1552:	ef e7       	ldi	r30, 0x7F	; 127
    1554:	f2 e0       	ldi	r31, 0x02	; 2
    1556:	84 a5       	ldd	r24, Z+44	; 0x2c
    1558:	25 a5       	ldd	r18, Z+45	; 0x2d
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	92 2b       	or	r25, r18
    155e:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <non_volatile_data+0x13>
    1562:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <non_volatile_data+0x12>
						break;
    1566:	95 c0       	rjmp	.+298    	; 0x1692 <CAN_task+0x60e>
					
						case 0x01:
							non_volatile_data.torque_init_val_winch_down = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    1568:	ef e7       	ldi	r30, 0x7F	; 127
    156a:	f2 e0       	ldi	r31, 0x02	; 2
    156c:	84 a5       	ldd	r24, Z+44	; 0x2c
    156e:	25 a5       	ldd	r18, Z+45	; 0x2d
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	92 2b       	or	r25, r18
    1574:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <non_volatile_data+0x15>
    1578:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <non_volatile_data+0x14>
						break;
    157c:	8a c0       	rjmp	.+276    	; 0x1692 <CAN_task+0x60e>
						
						case 0x02:
							non_volatile_data.torque_init_val_board_up = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    157e:	ef e7       	ldi	r30, 0x7F	; 127
    1580:	f2 e0       	ldi	r31, 0x02	; 2
    1582:	84 a5       	ldd	r24, Z+44	; 0x2c
    1584:	25 a5       	ldd	r18, Z+45	; 0x2d
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	92 2b       	or	r25, r18
    158a:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <non_volatile_data+0x17>
    158e:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <non_volatile_data+0x16>
						break;
    1592:	7f c0       	rjmp	.+254    	; 0x1692 <CAN_task+0x60e>
					
						case 0x03:
							non_volatile_data.torque_init_val_board_down = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    1594:	ef e7       	ldi	r30, 0x7F	; 127
    1596:	f2 e0       	ldi	r31, 0x02	; 2
    1598:	84 a5       	ldd	r24, Z+44	; 0x2c
    159a:	25 a5       	ldd	r18, Z+45	; 0x2d
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	92 2b       	or	r25, r18
    15a0:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <non_volatile_data+0x19>
    15a4:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <non_volatile_data+0x18>
						break;
    15a8:	74 c0       	rjmp	.+232    	; 0x1692 <CAN_task+0x60e>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    15aa:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    15ae:	80 61       	ori	r24, 0x10	; 16
    15b0:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    15b4:	6e c0       	rjmp	.+220    	; 0x1692 <CAN_task+0x60e>
					}
				break;
				
				case 0x2006:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_8);
    15b6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    15ba:	80 61       	ori	r24, 0x10	; 16
    15bc:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){
    15c0:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	59 f0       	breq	.+22     	; 0x15de <CAN_task+0x55a>
    15c8:	28 f0       	brcs	.+10     	; 0x15d4 <CAN_task+0x550>
    15ca:	82 30       	cpi	r24, 0x02	; 2
    15cc:	69 f0       	breq	.+26     	; 0x15e8 <CAN_task+0x564>
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	81 f0       	breq	.+32     	; 0x15f2 <CAN_task+0x56e>
    15d2:	14 c0       	rjmp	.+40     	; 0x15fc <CAN_task+0x578>
						case 0x00:
							non_volatile_data.torque_rising_speed_period_winch_up = SDO_RX_DATA_1;
    15d4:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <MOb_data+0x2c>
    15d8:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <non_volatile_data+0x1a>
						break;
    15dc:	5a c0       	rjmp	.+180    	; 0x1692 <CAN_task+0x60e>
					
						case 0x01:
							non_volatile_data.torque_rising_speed_period_winch_down = SDO_RX_DATA_1;
    15de:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <MOb_data+0x2c>
    15e2:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <non_volatile_data+0x1b>
						break;
    15e6:	55 c0       	rjmp	.+170    	; 0x1692 <CAN_task+0x60e>
					
						case 0x02:
							non_volatile_data.torque_rising_speed_period_board_up = SDO_RX_DATA_1;
    15e8:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <MOb_data+0x2c>
    15ec:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <non_volatile_data+0x1c>
						break;
    15f0:	50 c0       	rjmp	.+160    	; 0x1692 <CAN_task+0x60e>
					
						case 0x03:
							non_volatile_data.torque_rising_speed_period_board_down = SDO_RX_DATA_1;
    15f2:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <MOb_data+0x2c>
    15f6:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <non_volatile_data+0x1d>
						break;
    15fa:	4b c0       	rjmp	.+150    	; 0x1692 <CAN_task+0x60e>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    15fc:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1600:	80 61       	ori	r24, 0x10	; 16
    1602:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    1606:	45 c0       	rjmp	.+138    	; 0x1692 <CAN_task+0x60e>
					}
				break;
				
				case 0x2007:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    1608:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    160c:	80 62       	ori	r24, 0x20	; 32
    160e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					switch(SDO_RX_SUBINDEX){
    1612:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <MOb_data+0x2b>
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	89 f0       	breq	.+34     	; 0x163c <CAN_task+0x5b8>
    161a:	28 f0       	brcs	.+10     	; 0x1626 <CAN_task+0x5a2>
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	c9 f0       	breq	.+50     	; 0x1652 <CAN_task+0x5ce>
    1620:	83 30       	cpi	r24, 0x03	; 3
    1622:	11 f1       	breq	.+68     	; 0x1668 <CAN_task+0x5e4>
    1624:	2c c0       	rjmp	.+88     	; 0x167e <CAN_task+0x5fa>
						case 0x00:
							non_volatile_data.torque_rising_speed_winch_up = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    1626:	ef e7       	ldi	r30, 0x7F	; 127
    1628:	f2 e0       	ldi	r31, 0x02	; 2
    162a:	84 a5       	ldd	r24, Z+44	; 0x2c
    162c:	25 a5       	ldd	r18, Z+45	; 0x2d
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	92 2b       	or	r25, r18
    1632:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <non_volatile_data+0x1f>
    1636:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <non_volatile_data+0x1e>
						break;
    163a:	26 c0       	rjmp	.+76     	; 0x1688 <CAN_task+0x604>
					
						case 0x01:
							non_volatile_data.torque_rising_speed_winch_down = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    163c:	ef e7       	ldi	r30, 0x7F	; 127
    163e:	f2 e0       	ldi	r31, 0x02	; 2
    1640:	84 a5       	ldd	r24, Z+44	; 0x2c
    1642:	25 a5       	ldd	r18, Z+45	; 0x2d
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	92 2b       	or	r25, r18
    1648:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <non_volatile_data+0x21>
    164c:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <non_volatile_data+0x20>
						break;
    1650:	1b c0       	rjmp	.+54     	; 0x1688 <CAN_task+0x604>
						
						case 0x02:
							non_volatile_data.torque_rising_speed_board_up = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    1652:	ef e7       	ldi	r30, 0x7F	; 127
    1654:	f2 e0       	ldi	r31, 0x02	; 2
    1656:	84 a5       	ldd	r24, Z+44	; 0x2c
    1658:	25 a5       	ldd	r18, Z+45	; 0x2d
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	92 2b       	or	r25, r18
    165e:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <non_volatile_data+0x23>
    1662:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <non_volatile_data+0x22>
						break;
    1666:	10 c0       	rjmp	.+32     	; 0x1688 <CAN_task+0x604>
					
						case 0x03:
							non_volatile_data.torque_rising_speed_board_down = SDO_RX_DATA_1 | (SDO_RX_DATA_2 << 8);
    1668:	ef e7       	ldi	r30, 0x7F	; 127
    166a:	f2 e0       	ldi	r31, 0x02	; 2
    166c:	84 a5       	ldd	r24, Z+44	; 0x2c
    166e:	25 a5       	ldd	r18, Z+45	; 0x2d
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	92 2b       	or	r25, r18
    1674:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <non_volatile_data+0x25>
    1678:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <non_volatile_data+0x24>
						break;
    167c:	05 c0       	rjmp	.+10     	; 0x1688 <CAN_task+0x604>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    167e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1682:	80 61       	ori	r24, 0x10	; 16
    1684:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
					}
				
				default:
					SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    1688:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    168c:	80 61       	ori	r24, 0x10	; 16
    168e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
			}
			
			if(!(HAS_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED))){
    1692:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1696:	84 fd       	sbrc	r24, 4
    1698:	11 c0       	rjmp	.+34     	; 0x16bc <CAN_task+0x638>
				SDO_WRITE_POSITIVE_RESPONSE;
    169a:	ef e7       	ldi	r30, 0x7F	; 127
    169c:	f2 e0       	ldi	r31, 0x02	; 2
    169e:	80 e6       	ldi	r24, 0x60	; 96
    16a0:	80 a3       	std	Z+32, r24	; 0x20
    16a2:	81 a5       	ldd	r24, Z+41	; 0x29
    16a4:	81 a3       	std	Z+33, r24	; 0x21
    16a6:	82 a5       	ldd	r24, Z+42	; 0x2a
    16a8:	82 a3       	std	Z+34, r24	; 0x22
    16aa:	83 a5       	ldd	r24, Z+43	; 0x2b
    16ac:	83 a3       	std	Z+35, r24	; 0x23
    16ae:	14 a2       	std	Z+36, r1	; 0x24
    16b0:	15 a2       	std	Z+37, r1	; 0x25
    16b2:	16 a2       	std	Z+38, r1	; 0x26
    16b4:	17 a2       	std	Z+39, r1	; 0x27
				eeprom_write();
    16b6:	0e 94 a9 02 	call	0x552	; 0x552 <eeprom_write>
    16ba:	1d c0       	rjmp	.+58     	; 0x16f6 <CAN_task+0x672>
			}
			else{
				SDO_NEGATIVE_RESPONSE;
    16bc:	ef e7       	ldi	r30, 0x7F	; 127
    16be:	f2 e0       	ldi	r31, 0x02	; 2
    16c0:	80 e8       	ldi	r24, 0x80	; 128
    16c2:	80 a3       	std	Z+32, r24	; 0x20
    16c4:	81 a5       	ldd	r24, Z+41	; 0x29
    16c6:	81 a3       	std	Z+33, r24	; 0x21
    16c8:	82 a5       	ldd	r24, Z+42	; 0x2a
    16ca:	82 a3       	std	Z+34, r24	; 0x22
    16cc:	83 a5       	ldd	r24, Z+43	; 0x2b
    16ce:	83 a3       	std	Z+35, r24	; 0x23
    16d0:	14 a2       	std	Z+36, r1	; 0x24
    16d2:	15 a2       	std	Z+37, r1	; 0x25
    16d4:	16 a2       	std	Z+38, r1	; 0x26
    16d6:	17 a2       	std	Z+39, r1	; 0x27
    16d8:	0e c0       	rjmp	.+28     	; 0x16f6 <CAN_task+0x672>
			}
			
		}
		//gdy nieprawid³owa komenda
		else{
			SDO_NEGATIVE_RESPONSE;
    16da:	ef e7       	ldi	r30, 0x7F	; 127
    16dc:	f2 e0       	ldi	r31, 0x02	; 2
    16de:	80 e8       	ldi	r24, 0x80	; 128
    16e0:	80 a3       	std	Z+32, r24	; 0x20
    16e2:	81 a5       	ldd	r24, Z+41	; 0x29
    16e4:	81 a3       	std	Z+33, r24	; 0x21
    16e6:	82 a5       	ldd	r24, Z+42	; 0x2a
    16e8:	82 a3       	std	Z+34, r24	; 0x22
    16ea:	83 a5       	ldd	r24, Z+43	; 0x2b
    16ec:	83 a3       	std	Z+35, r24	; 0x23
    16ee:	14 a2       	std	Z+36, r1	; 0x24
    16f0:	15 a2       	std	Z+37, r1	; 0x25
    16f2:	16 a2       	std	Z+38, r1	; 0x26
    16f4:	17 a2       	std	Z+39, r1	; 0x27
		}
		
		//procedura wysy³ania odpowiedzi
		CAN_send_SDO();
    16f6:	0e 94 28 08 	call	0x1050	; 0x1050 <CAN_send_SDO>
		
		CLEAR_FLAG(can_state.flags, CAN_FLAG_SDO_RECEIVED);
    16fa:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    16fe:	87 7f       	andi	r24, 0xF7	; 247
    1700:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    1704:	08 95       	ret
		 
	}
	//aktualizacja danych
	else if(HAS_FLAG(can_state.flags, CAN_FLAG_UPDATE_DATA)){//mechanizm przepisywania danych PDO - po ka¿dym sync przepisywane s¹ œwie¿e dane
    1706:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    170a:	82 ff       	sbrs	r24, 2
    170c:	52 c0       	rjmp	.+164    	; 0x17b2 <CAN_task+0x72e>
		static uint8_t frame=MOb_1;
		if(frame == MOb_1 ){ //RPDO 1
    170e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <frame.2078>
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	21 f4       	brne	.+8      	; 0x171e <CAN_task+0x69a>
			//CAN.status_word = MOb_data[frame][1]<<8 | MOb_data[frame][0];
			frame++;
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <frame.2078>
    171c:	08 95       	ret
		}
		else if(frame == MOb_2 ){ //TPDO 1 - nadaje
    171e:	82 30       	cpi	r24, 0x02	; 2
    1720:	e1 f4       	brne	.+56     	; 0x175a <CAN_task+0x6d6>
			MOb_data[frame][0] = CAN.state;
    1722:	a4 e7       	ldi	r26, 0x74	; 116
    1724:	b2 e0       	ldi	r27, 0x02	; 2
    1726:	13 96       	adiw	r26, 0x03	; 3
    1728:	8c 91       	ld	r24, X
    172a:	13 97       	sbiw	r26, 0x03	; 3
    172c:	ef e7       	ldi	r30, 0x7F	; 127
    172e:	f2 e0       	ldi	r31, 0x02	; 2
    1730:	80 8b       	std	Z+16, r24	; 0x10
			MOb_data[frame][1] = CAN.board_position;
    1732:	11 96       	adiw	r26, 0x01	; 1
    1734:	8c 91       	ld	r24, X
    1736:	11 97       	sbiw	r26, 0x01	; 1
    1738:	81 8b       	std	Z+17, r24	; 0x11
			MOb_data[frame][2] = CAN.supply_voltage;
    173a:	12 96       	adiw	r26, 0x02	; 2
    173c:	8c 91       	ld	r24, X
    173e:	12 97       	sbiw	r26, 0x02	; 2
    1740:	82 8b       	std	Z+18, r24	; 0x12
			MOb_data[frame][3] = CAN.current;
    1742:	8c 91       	ld	r24, X
    1744:	83 8b       	std	Z+19, r24	; 0x13
			MOb_data[frame][4] = CAN.function;
    1746:	14 96       	adiw	r26, 0x04	; 4
    1748:	8c 91       	ld	r24, X
    174a:	84 8b       	std	Z+20, r24	; 0x14
			MOb_data[frame][5] = 0x00;
    174c:	15 8a       	std	Z+21, r1	; 0x15
			MOb_data[frame][6] = 0x00;
    174e:	16 8a       	std	Z+22, r1	; 0x16
			MOb_data[frame][7] = 0x00;
    1750:	17 8a       	std	Z+23, r1	; 0x17
			frame++;
    1752:	83 e0       	ldi	r24, 0x03	; 3
    1754:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <frame.2078>
    1758:	08 95       	ret
		}
		else if(frame == MOb_3 ){ //TPDO 2 nadaje
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	09 f0       	breq	.+2      	; 0x1760 <CAN_task+0x6dc>
    175e:	6d c0       	rjmp	.+218    	; 0x183a <CAN_task+0x7b6>
			MOb_data[frame][0] = CAN.state;
    1760:	a4 e7       	ldi	r26, 0x74	; 116
    1762:	b2 e0       	ldi	r27, 0x02	; 2
    1764:	13 96       	adiw	r26, 0x03	; 3
    1766:	8c 91       	ld	r24, X
    1768:	13 97       	sbiw	r26, 0x03	; 3
    176a:	ef e7       	ldi	r30, 0x7F	; 127
    176c:	f2 e0       	ldi	r31, 0x02	; 2
    176e:	80 8f       	std	Z+24, r24	; 0x18
			MOb_data[frame][1] = CAN.board_position_raw;
    1770:	17 96       	adiw	r26, 0x07	; 7
    1772:	9c 91       	ld	r25, X
    1774:	17 97       	sbiw	r26, 0x07	; 7
    1776:	18 96       	adiw	r26, 0x08	; 8
    1778:	8c 91       	ld	r24, X
    177a:	18 97       	sbiw	r26, 0x08	; 8
    177c:	91 8f       	std	Z+25, r25	; 0x19
			MOb_data[frame][2] = CAN.board_position_raw >>8;
    177e:	82 8f       	std	Z+26, r24	; 0x1a
			MOb_data[frame][3] = CAN.current_raw ;
    1780:	19 96       	adiw	r26, 0x09	; 9
    1782:	9c 91       	ld	r25, X
    1784:	19 97       	sbiw	r26, 0x09	; 9
    1786:	1a 96       	adiw	r26, 0x0a	; 10
    1788:	8c 91       	ld	r24, X
    178a:	1a 97       	sbiw	r26, 0x0a	; 10
    178c:	93 8f       	std	Z+27, r25	; 0x1b
			MOb_data[frame][4] = CAN.current_raw >> 8;
    178e:	84 8f       	std	Z+28, r24	; 0x1c
			MOb_data[frame][5] = CAN.diag_1;
    1790:	15 96       	adiw	r26, 0x05	; 5
    1792:	8c 91       	ld	r24, X
    1794:	15 97       	sbiw	r26, 0x05	; 5
    1796:	85 8f       	std	Z+29, r24	; 0x1d
			MOb_data[frame][6] = CAN.diag_2;
    1798:	16 96       	adiw	r26, 0x06	; 6
    179a:	8c 91       	ld	r24, X
    179c:	86 8f       	std	Z+30, r24	; 0x1e
			MOb_data[frame][7] = 0x00;
    179e:	17 8e       	std	Z+31, r1	; 0x1f
			CLEAR_FLAG(can_state.flags, CAN_FLAG_UPDATE_DATA);
    17a0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    17a4:	8b 7f       	andi	r24, 0xFB	; 251
    17a6:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
			frame = MOb_1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <frame.2078>
    17b0:	08 95       	ret
		}						
	}
	//wysy³anie danych po syncu
	else if( HAS_FLAG(can_state.flags, CAN_FLAG_SYNC_RECEIVED) ){ //){ //Zleæ transmisjê po koleji transmisjê kolejnych paczek
    17b2:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    17b6:	81 ff       	sbrs	r24, 1
    17b8:	40 c0       	rjmp	.+128    	; 0x183a <CAN_task+0x7b6>
		static uint8_t mob=MOb_2; //pierwszy MOb odbieraj¹cy
		CANPAGE = ( mob << 4 );						// Selects Message Object 0-5
    17ba:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <mob.2079>
    17be:	82 95       	swap	r24
    17c0:	80 7f       	andi	r24, 0xF0	; 240
    17c2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if((CANEN2 & ( 1 << mob )) == 0){		//Jeœli MOb jest wolny
    17c6:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	00 90 1d 01 	lds	r0, 0x011D	; 0x80011d <mob.2079>
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <CAN_task+0x752>
    17d2:	95 95       	asr	r25
    17d4:	87 95       	ror	r24
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <CAN_task+0x74e>
    17da:	80 fd       	sbrc	r24, 0
    17dc:	19 c0       	rjmp	.+50     	; 0x1810 <CAN_task+0x78c>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
				CANMSG = MOb_data[mob][byte_nr];
    17e2:	aa ef       	ldi	r26, 0xFA	; 250
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <mob.2079>
    17ea:	fc 01       	movw	r30, r24
    17ec:	38 e0       	ldi	r19, 0x08	; 8
    17ee:	23 9f       	mul	r18, r19
    17f0:	e0 0d       	add	r30, r0
    17f2:	f1 1d       	adc	r31, r1
    17f4:	11 24       	eor	r1, r1
    17f6:	e1 58       	subi	r30, 0x81	; 129
    17f8:	fd 4f       	sbci	r31, 0xFD	; 253
    17fa:	20 81       	ld	r18, Z
    17fc:	2c 93       	st	X, r18
    17fe:	01 96       	adiw	r24, 0x01	; 1
	//wysy³anie danych po syncu
	else if( HAS_FLAG(can_state.flags, CAN_FLAG_SYNC_RECEIVED) ){ //){ //Zleæ transmisjê po koleji transmisjê kolejnych paczek
		static uint8_t mob=MOb_2; //pierwszy MOb odbieraj¹cy
		CANPAGE = ( mob << 4 );						// Selects Message Object 0-5
		if((CANEN2 & ( 1 << mob )) == 0){		//Jeœli MOb jest wolny
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
    1800:	88 30       	cpi	r24, 0x08	; 8
    1802:	91 05       	cpc	r25, r1
    1804:	81 f7       	brne	.-32     	; 0x17e6 <CAN_task+0x762>
				CANMSG = MOb_data[mob][byte_nr];
			}
			//czyszczenie rejestru statusu
			CANSTMOB = 0x00;
    1806:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			//komenda nadania
			CANCDMOB = TRANSMISSION | ( 8 << DLC0);//zleæ transmisjê 8 bajtów
    180a:	88 e4       	ldi	r24, 0x48	; 72
    180c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		}
		if(mob >= MOb_3 ){
    1810:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <mob.2079>
    1814:	83 30       	cpi	r24, 0x03	; 3
    1816:	70 f0       	brcs	.+28     	; 0x1834 <CAN_task+0x7b0>
			 mob=MOb_2;
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <mob.2079>
			 CLEAR_FLAG(can_state.flags, CAN_FLAG_SYNC_RECEIVED);
    181e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    1822:	8d 7f       	andi	r24, 0xFD	; 253
    1824:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
			 SET_FLAG(can_state.flags, CAN_FLAG_UPDATE_DATA);
    1828:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <can_state>
    182c:	84 60       	ori	r24, 0x04	; 4
    182e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <can_state>
    1832:	08 95       	ret
		}		
		else mob++;
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <mob.2079>
    183a:	08 95       	ret

0000183c <PSC_init>:


void PSC_init(){
	
	//Inicjalizacja portów na wyjœciowe i ustawienie wyjœæ na 0
	DDR(PSC0A_PORT) |= (1<<PSC0A_PIN);
    183c:	50 9a       	sbi	0x0a, 0	; 10
	PORT(PSC0A_PORT) &= ~(_BV(PSC0A_PIN));
    183e:	58 98       	cbi	0x0b, 0	; 11
	PORT(PSC0A_PORT) |= (_BV(PSC0A_PIN));
    1840:	58 9a       	sbi	0x0b, 0	; 11
	
	//rejestr konfiguracjyny
	//PULOCK - jednoczena zmiana rejestrów gdy zwoniony na 0
	//PMODE - 0 One Ramp Mode
	//POPx - 1 aktywny stan wysoki
	PCNF |= (0<<PULOCK) | (0<<PMODE) | (1<<POPB) | (1<<POPA);
    1842:	e5 eb       	ldi	r30, 0xB5	; 181
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8c 60       	ori	r24, 0x0C	; 12
    184a:	80 83       	st	Z, r24
	
	//PPRE - prescaler na wejœciu modu³o- brak preskalera
	//PCLKSEL - ¿ród³o zegara PLL
	//PRUN - start modu³u
	PCTL = (1<<PPRE1) | (0<<PPRE0) | (0<<PCLKSEL) | (0<<SWAP0) | (0<<SWAP1) | (0<<SWAP2);
    184c:	e7 eb       	ldi	r30, 0xB7	; 183
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 e8       	ldi	r24, 0x80	; 128
    1852:	80 83       	st	Z, r24
	//POVEN - zabezpieczenie przed overlapem
	//PELEV - stan wysoki powoduje b³¹d
	//PFLTE0 filtr cyforwy na wejsciu fault
	//PRFM - zatrzymaj modu³ w przypadku b³êdu
	//PMIC0 |= (0<<POVEN0) | (1<<PELEV0) | (1<<PFLTE0) | (1<<PRFM02) | (1<<PRFM01);
	PMIC0 |= (1<<POVEN0) | (0<<PELEV0) | (0<<PFLTE0) | (0<<PRFM02) | (0<<PRFM01);
    1854:	a8 eb       	ldi	r26, 0xB8	; 184
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	8c 91       	ld	r24, X
    185a:	80 68       	ori	r24, 0x80	; 128
    185c:	8c 93       	st	X, r24
	
	//Przewanie od Overcurrent
	//PIM |= (1<<PEVE0);
	
	//Ustawia TOP licznika
	POCR_RB = PSC_TOP;
    185e:	8f ef       	ldi	r24, 0xFF	; 255
    1860:	97 e0       	ldi	r25, 0x07	; 7
    1862:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1866:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	
	//W³¹cz kana³ 0A
	POC = (1<<POEN0A);
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	
	//ustawia wartoœæ pocz¹tkow¹ momentu
	PSC.torque = TORQUE_INIT_VAL;
    1870:	84 e6       	ldi	r24, 0x64	; 100
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <PSC+0x1>
    1878:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <PSC>
	POCR0RA = ((uint32_t)PSC_TOP*init_torque)/1000;
	PCTL |= (1<<PRUN);
}

inline void Disable_PSC(){
	PCTL &= ~(1<<PRUN);
    187c:	80 81       	ld	r24, Z
    187e:	8e 7f       	andi	r24, 0xFE	; 254
    1880:	80 83       	st	Z, r24
    1882:	08 95       	ret

00001884 <Enable_PSC>:
	Disable_PSC();
	
}

inline void Enable_PSC(uint16_t init_torque){
	POCR0RA = ((uint32_t)PSC_TOP*init_torque)/1000;
    1884:	9c 01       	movw	r18, r24
    1886:	af ef       	ldi	r26, 0xFF	; 255
    1888:	b7 e0       	ldi	r27, 0x07	; 7
    188a:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__umulhisi3>
    188e:	28 ee       	ldi	r18, 0xE8	; 232
    1890:	33 e0       	ldi	r19, 0x03	; 3
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__udivmodsi4>
    189a:	30 93 a3 00 	sts	0x00A3, r19	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
    189e:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	PCTL |= (1<<PRUN);
    18a2:	e7 eb       	ldi	r30, 0xB7	; 183
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	81 60       	ori	r24, 0x01	; 1
    18aa:	80 83       	st	Z, r24
    18ac:	08 95       	ret

000018ae <Disable_PSC>:
}

inline void Disable_PSC(){
	PCTL &= ~(1<<PRUN);
    18ae:	e7 eb       	ldi	r30, 0xB7	; 183
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	8e 7f       	andi	r24, 0xFE	; 254
    18b6:	80 83       	st	Z, r24
    18b8:	08 95       	ret

000018ba <PSC_Task>:

void PSC_Task(){
	static uint16_t torque_prev = 0;
	static uint16_t duty_cycle=0;
	
	if(PSC.torque != torque_prev){
    18ba:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <PSC>
    18be:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <PSC+0x1>
    18c2:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <torque_prev.1541>
    18c6:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <torque_prev.1541+0x1>
    18ca:	82 17       	cp	r24, r18
    18cc:	93 07       	cpc	r25, r19
    18ce:	49 f1       	breq	.+82     	; 0x1922 <PSC_Task+0x68>
		
		duty_cycle = PSC.torque;
			
		if(duty_cycle>1000){
    18d0:	89 3e       	cpi	r24, 0xE9	; 233
    18d2:	23 e0       	ldi	r18, 0x03	; 3
    18d4:	92 07       	cpc	r25, r18
    18d6:	28 f4       	brcc	.+10     	; 0x18e2 <PSC_Task+0x28>
	static uint16_t torque_prev = 0;
	static uint16_t duty_cycle=0;
	
	if(PSC.torque != torque_prev){
		
		duty_cycle = PSC.torque;
    18d8:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <duty_cycle.1542+0x1>
    18dc:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <duty_cycle.1542>
    18e0:	06 c0       	rjmp	.+12     	; 0x18ee <PSC_Task+0x34>
			
		if(duty_cycle>1000){
			duty_cycle=1000;
    18e2:	88 ee       	ldi	r24, 0xE8	; 232
    18e4:	93 e0       	ldi	r25, 0x03	; 3
    18e6:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <duty_cycle.1542+0x1>
    18ea:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <duty_cycle.1542>
		}
		
		POCR0RA = ((uint32_t)PSC_TOP*duty_cycle)/1000;
    18ee:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <duty_cycle.1542>
    18f2:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <duty_cycle.1542+0x1>
    18f6:	af ef       	ldi	r26, 0xFF	; 255
    18f8:	b7 e0       	ldi	r27, 0x07	; 7
    18fa:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__umulhisi3>
    18fe:	28 ee       	ldi	r18, 0xE8	; 232
    1900:	33 e0       	ldi	r19, 0x03	; 3
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__udivmodsi4>
    190a:	30 93 a3 00 	sts	0x00A3, r19	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
    190e:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
		
		torque_prev = PSC.torque;
    1912:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <PSC>
    1916:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <PSC+0x1>
    191a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <torque_prev.1541+0x1>
    191e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <torque_prev.1541>
    1922:	08 95       	ret

00001924 <__vector_5>:
	
		 
}

//przerwanie od overcurrent
SIGNAL (PSC_FAULT_vect){
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	8f 93       	push	r24
    1930:	ef 93       	push	r30
    1932:	ff 93       	push	r31
	
	PSC_CLEAR_INTERRUPT
    1934:	ec eb       	ldi	r30, 0xBC	; 188
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	82 60       	ori	r24, 0x02	; 2
    193c:	80 83       	st	Z, r24
    193e:	ff 91       	pop	r31
    1940:	ef 91       	pop	r30
    1942:	8f 91       	pop	r24
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <timer_init>:
		return (time_2 - time_1);
	}
	else{
		return (time_2+(0xFFFF-time_1));
	}
};
    194e:	84 b5       	in	r24, 0x24	; 36
    1950:	82 60       	ori	r24, 0x02	; 2
    1952:	84 bd       	out	0x24, r24	; 36
    1954:	89 ef       	ldi	r24, 0xF9	; 249
    1956:	87 bd       	out	0x27, r24	; 39
    1958:	ee e6       	ldi	r30, 0x6E	; 110
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	82 60       	ori	r24, 0x02	; 2
    1960:	80 83       	st	Z, r24
    1962:	85 b5       	in	r24, 0x25	; 37
    1964:	83 60       	ori	r24, 0x03	; 3
    1966:	85 bd       	out	0x25, r24	; 37
    1968:	e1 e8       	ldi	r30, 0x81	; 129
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	83 60       	ori	r24, 0x03	; 3
    1970:	80 83       	st	Z, r24
    1972:	08 95       	ret

00001974 <timer_get>:
    1974:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <timer>
    1978:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <timer+0x1>
    197c:	08 95       	ret

0000197e <timer_time_elapsed>:
    197e:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <timer>
    1982:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <timer+0x1>
    1986:	28 17       	cp	r18, r24
    1988:	39 07       	cpc	r19, r25
    198a:	28 f0       	brcs	.+10     	; 0x1996 <timer_time_elapsed+0x18>
    198c:	a9 01       	movw	r20, r18
    198e:	48 1b       	sub	r20, r24
    1990:	59 0b       	sbc	r21, r25
    1992:	ca 01       	movw	r24, r20
    1994:	08 95       	ret
    1996:	28 1b       	sub	r18, r24
    1998:	39 0b       	sbc	r19, r25
    199a:	c9 01       	movw	r24, r18
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	08 95       	ret

000019a0 <timer_time_elapsed_us>:
    19a0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    19a4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    19a8:	28 17       	cp	r18, r24
    19aa:	39 07       	cpc	r19, r25
    19ac:	28 f0       	brcs	.+10     	; 0x19b8 <timer_time_elapsed_us+0x18>
    19ae:	a9 01       	movw	r20, r18
    19b0:	48 1b       	sub	r20, r24
    19b2:	59 0b       	sbc	r21, r25
    19b4:	ca 01       	movw	r24, r20
    19b6:	08 95       	ret
    19b8:	28 1b       	sub	r18, r24
    19ba:	39 0b       	sbc	r19, r25
    19bc:	c9 01       	movw	r24, r18
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	08 95       	ret

000019c2 <timer_new_tick>:
    19c2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <time_stamp.1525>
    19c6:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <time_stamp.1525+0x1>
    19ca:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <timer_time_elapsed_us>
    19ce:	49 97       	sbiw	r24, 0x19	; 25
    19d0:	50 f0       	brcs	.+20     	; 0x19e6 <timer_new_tick+0x24>
    19d2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    19d6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    19da:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <time_stamp.1525+0x1>
    19de:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <time_stamp.1525>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	08 95       	ret
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	08 95       	ret

000019ea <__vector_15>:

//Przepe³nienie linika 0
SIGNAL(TIMER0_COMPA_vect) {
    19ea:	1f 92       	push	r1
    19ec:	0f 92       	push	r0
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	0f 92       	push	r0
    19f2:	11 24       	eor	r1, r1
    19f4:	8f 93       	push	r24
    19f6:	9f 93       	push	r25
	//zwiêksz TIMER
	timer++;
    19f8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <timer>
    19fc:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <timer+0x1>
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <timer+0x1>
    1a06:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <timer>
}
    1a0a:	9f 91       	pop	r25
    1a0c:	8f 91       	pop	r24
    1a0e:	0f 90       	pop	r0
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	0f 90       	pop	r0
    1a14:	1f 90       	pop	r1
    1a16:	18 95       	reti

00001a18 <__vector_14>:

//Przepe³nienie linika 1
SIGNAL(TIMER1_OVF_vect){
    1a18:	1f 92       	push	r1
    1a1a:	0f 92       	push	r0
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	0f 92       	push	r0
    1a20:	11 24       	eor	r1, r1

}
    1a22:	0f 90       	pop	r0
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	0f 90       	pop	r0
    1a28:	1f 90       	pop	r1
    1a2a:	18 95       	reti

00001a2c <__vector_12>:
//Comapare A Timer1
SIGNAL(TIMER1_COMPA_vect){
    1a2c:	1f 92       	push	r1
    1a2e:	0f 92       	push	r0
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	0f 92       	push	r0
    1a34:	11 24       	eor	r1, r1
		
}
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	0f 90       	pop	r0
    1a3c:	1f 90       	pop	r1
    1a3e:	18 95       	reti

00001a40 <__vector_13>:
//Comapare B Timer1
SIGNAL(TIMER1_COMPB_vect ){
    1a40:	1f 92       	push	r1
    1a42:	0f 92       	push	r0
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	0f 92       	push	r0
    1a48:	11 24       	eor	r1, r1
	
}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	0f 90       	pop	r0
    1a50:	1f 90       	pop	r1
    1a52:	18 95       	reti

00001a54 <__vector_20>:
{
	
    while (*s) 
      uart_putc(*s++);

}/* uart_puts */
    1a54:	1f 92       	push	r1
    1a56:	0f 92       	push	r0
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	0f 92       	push	r0
    1a5c:	11 24       	eor	r1, r1
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	ef 93       	push	r30
    1a64:	ff 93       	push	r31
    1a66:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1a6a:	80 ff       	sbrs	r24, 0
    1a6c:	1a c0       	rjmp	.+52     	; 0x1aa2 <__vector_20+0x4e>
    1a6e:	e9 ec       	ldi	r30, 0xC9	; 201
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	81 60       	ori	r24, 0x01	; 1
    1a76:	80 83       	st	Z, r24
    1a78:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
    1a7c:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <UART_RxHead>
    1a80:	ef 5f       	subi	r30, 0xFF	; 255
    1a82:	ef 71       	andi	r30, 0x1F	; 31
    1a84:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <UART_RxTail>
    1a88:	e8 17       	cp	r30, r24
    1a8a:	31 f0       	breq	.+12     	; 0x1a98 <__vector_20+0x44>
    1a8c:	e0 93 35 01 	sts	0x0135, r30	; 0x800135 <UART_RxHead>
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	e8 5c       	subi	r30, 0xC8	; 200
    1a94:	fe 4f       	sbci	r31, 0xFE	; 254
    1a96:	90 83       	st	Z, r25
    1a98:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <UART_LastRxError>
    1a9c:	82 60       	ori	r24, 0x02	; 2
    1a9e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <UART_LastRxError>
    1aa2:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1aa6:	81 ff       	sbrs	r24, 1
    1aa8:	1d c0       	rjmp	.+58     	; 0x1ae4 <__vector_20+0x90>
    1aaa:	e9 ec       	ldi	r30, 0xC9	; 201
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	82 60       	ori	r24, 0x02	; 2
    1ab2:	80 83       	st	Z, r24
    1ab4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <UART_TxHead>
    1ab8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <UART_TxTail>
    1abc:	98 17       	cp	r25, r24
    1abe:	69 f0       	breq	.+26     	; 0x1ada <__vector_20+0x86>
    1ac0:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <UART_TxTail>
    1ac4:	ef 5f       	subi	r30, 0xFF	; 255
    1ac6:	ef 77       	andi	r30, 0x7F	; 127
    1ac8:	e0 93 36 01 	sts	0x0136, r30	; 0x800136 <UART_TxTail>
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	e8 5a       	subi	r30, 0xA8	; 168
    1ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad2:	80 81       	ld	r24, Z
    1ad4:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
    1ad8:	05 c0       	rjmp	.+10     	; 0x1ae4 <__vector_20+0x90>
    1ada:	ea ec       	ldi	r30, 0xCA	; 202
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8d 7f       	andi	r24, 0xFD	; 253
    1ae2:	80 83       	st	Z, r24
    1ae4:	ff 91       	pop	r31
    1ae6:	ef 91       	pop	r30
    1ae8:	9f 91       	pop	r25
    1aea:	8f 91       	pop	r24
    1aec:	0f 90       	pop	r0
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	0f 90       	pop	r0
    1af2:	1f 90       	pop	r1
    1af4:	18 95       	reti

00001af6 <uart_init>:
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <UART_TxHead>
    1afe:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <UART_TxTail>
    1b02:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <UART_RxHead>
    1b06:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <UART_RxTail>
    1b0a:	c8 ec       	ldi	r28, 0xC8	; 200
    1b0c:	d0 e0       	ldi	r29, 0x00	; 0
    1b0e:	20 e8       	ldi	r18, 0x80	; 128
    1b10:	28 83       	st	Y, r18
    1b12:	9c 01       	movw	r18, r24
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	60 e4       	ldi	r22, 0x40	; 64
    1b1a:	72 e4       	ldi	r23, 0x42	; 66
    1b1c:	8f e0       	ldi	r24, 0x0F	; 15
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__divmodsi4>
    1b24:	da 01       	movw	r26, r20
    1b26:	c9 01       	movw	r24, r18
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	a1 09       	sbc	r26, r1
    1b2c:	b1 09       	sbc	r27, r1
    1b2e:	89 2f       	mov	r24, r25
    1b30:	9a 2f       	mov	r25, r26
    1b32:	ab 2f       	mov	r26, r27
    1b34:	bb 27       	eor	r27, r27
    1b36:	a7 fd       	sbrc	r26, 7
    1b38:	ba 95       	dec	r27
    1b3a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1b3e:	21 50       	subi	r18, 0x01	; 1
    1b40:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1b44:	80 e9       	ldi	r24, 0x90	; 144
    1b46:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1b4a:	ea ec       	ldi	r30, 0xCA	; 202
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	81 60       	ori	r24, 0x01	; 1
    1b52:	80 83       	st	Z, r24
    1b54:	88 81       	ld	r24, Y
    1b56:	8f 60       	ori	r24, 0x0F	; 15
    1b58:	88 83       	st	Y, r24
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	08 95       	ret

00001b60 <uart_getc_s>:
    1b60:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <UART_RxHead>
    1b64:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <UART_RxTail>
    1b68:	98 17       	cp	r25, r24
    1b6a:	a9 f0       	breq	.+42     	; 0x1b96 <uart_getc_s+0x36>
    1b6c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <UART_RxTail>
    1b70:	9f 5f       	subi	r25, 0xFF	; 255
    1b72:	9f 71       	andi	r25, 0x1F	; 31
    1b74:	e9 2f       	mov	r30, r25
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	e8 5c       	subi	r30, 0xC8	; 200
    1b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7c:	20 81       	ld	r18, Z
    1b7e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <UART_LastRxError>
    1b82:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <UART_RxTail>
    1b86:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <UART_LastRxError>
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	98 2f       	mov	r25, r24
    1b8e:	88 27       	eor	r24, r24
    1b90:	82 0f       	add	r24, r18
    1b92:	91 1d       	adc	r25, r1
    1b94:	08 95       	ret
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	08 95       	ret

00001b9c <uart_putc>:
    1b9c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <UART_RxHead>
    1ba0:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <UART_RxTail>
    1ba4:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <UART_TxHead>
    1ba8:	2f 5f       	subi	r18, 0xFF	; 255
    1baa:	2f 77       	andi	r18, 0x7F	; 127
    1bac:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <UART_TxTail>
    1bb0:	29 17       	cp	r18, r25
    1bb2:	e1 f3       	breq	.-8      	; 0x1bac <uart_putc+0x10>
    1bb4:	42 2f       	mov	r20, r18
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	fa 01       	movw	r30, r20
    1bba:	e8 5a       	subi	r30, 0xA8	; 168
    1bbc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bbe:	80 83       	st	Z, r24
    1bc0:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <UART_TxHead>
    1bc4:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1bc8:	84 fd       	sbrc	r24, 4
    1bca:	0d c0       	rjmp	.+26     	; 0x1be6 <uart_putc+0x4a>
    1bcc:	ea ec       	ldi	r30, 0xCA	; 202
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	82 60       	ori	r24, 0x02	; 2
    1bd4:	80 83       	st	Z, r24
    1bd6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <UART_TxTail>
    1bda:	fa 01       	movw	r30, r20
    1bdc:	e8 5a       	subi	r30, 0xA8	; 168
    1bde:	fe 4f       	sbci	r31, 0xFE	; 254
    1be0:	80 81       	ld	r24, Z
    1be2:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
    1be6:	08 95       	ret

00001be8 <uart_putc_s>:
    1be8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <UART_RxHead>
    1bec:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <UART_RxTail>
    1bf0:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <UART_TxHead>
    1bf4:	2f 5f       	subi	r18, 0xFF	; 255
    1bf6:	2f 77       	andi	r18, 0x7F	; 127
    1bf8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <UART_TxTail>
    1bfc:	29 17       	cp	r18, r25
    1bfe:	e1 f3       	breq	.-8      	; 0x1bf8 <uart_putc_s+0x10>
    1c00:	42 2f       	mov	r20, r18
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	fa 01       	movw	r30, r20
    1c06:	e8 5a       	subi	r30, 0xA8	; 168
    1c08:	fe 4f       	sbci	r31, 0xFE	; 254
    1c0a:	80 83       	st	Z, r24
    1c0c:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <UART_TxHead>
    1c10:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1c14:	84 fd       	sbrc	r24, 4
    1c16:	0d c0       	rjmp	.+26     	; 0x1c32 <uart_putc_s+0x4a>
    1c18:	ea ec       	ldi	r30, 0xCA	; 202
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	82 60       	ori	r24, 0x02	; 2
    1c20:	80 83       	st	Z, r24
    1c22:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <UART_TxTail>
    1c26:	fa 01       	movw	r30, r20
    1c28:	e8 5a       	subi	r30, 0xA8	; 168
    1c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
    1c32:	08 95       	ret

00001c34 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    register char c;
    
	
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1c38:	ec 01       	movw	r28, r24
    1c3a:	21 96       	adiw	r28, 0x01	; 1
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	84 91       	lpm	r24, Z
    1c40:	88 23       	and	r24, r24
    1c42:	39 f0       	breq	.+14     	; 0x1c52 <uart_puts_p+0x1e>
      uart_putc(c);
    1c44:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <uart_putc>
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
	
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1c48:	fe 01       	movw	r30, r28
    1c4a:	84 91       	lpm	r24, Z
    1c4c:	21 96       	adiw	r28, 0x01	; 1
    1c4e:	81 11       	cpse	r24, r1
    1c50:	f9 cf       	rjmp	.-14     	; 0x1c44 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	08 95       	ret

00001c58 <__divmodhi4>:
    1c58:	97 fb       	bst	r25, 7
    1c5a:	07 2e       	mov	r0, r23
    1c5c:	16 f4       	brtc	.+4      	; 0x1c62 <__divmodhi4+0xa>
    1c5e:	00 94       	com	r0
    1c60:	07 d0       	rcall	.+14     	; 0x1c70 <__divmodhi4_neg1>
    1c62:	77 fd       	sbrc	r23, 7
    1c64:	09 d0       	rcall	.+18     	; 0x1c78 <__divmodhi4_neg2>
    1c66:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__udivmodhi4>
    1c6a:	07 fc       	sbrc	r0, 7
    1c6c:	05 d0       	rcall	.+10     	; 0x1c78 <__divmodhi4_neg2>
    1c6e:	3e f4       	brtc	.+14     	; 0x1c7e <__divmodhi4_exit>

00001c70 <__divmodhi4_neg1>:
    1c70:	90 95       	com	r25
    1c72:	81 95       	neg	r24
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	08 95       	ret

00001c78 <__divmodhi4_neg2>:
    1c78:	70 95       	com	r23
    1c7a:	61 95       	neg	r22
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255

00001c7e <__divmodhi4_exit>:
    1c7e:	08 95       	ret

00001c80 <__udivmodsi4>:
    1c80:	a1 e2       	ldi	r26, 0x21	; 33
    1c82:	1a 2e       	mov	r1, r26
    1c84:	aa 1b       	sub	r26, r26
    1c86:	bb 1b       	sub	r27, r27
    1c88:	fd 01       	movw	r30, r26
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <__udivmodsi4_ep>

00001c8c <__udivmodsi4_loop>:
    1c8c:	aa 1f       	adc	r26, r26
    1c8e:	bb 1f       	adc	r27, r27
    1c90:	ee 1f       	adc	r30, r30
    1c92:	ff 1f       	adc	r31, r31
    1c94:	a2 17       	cp	r26, r18
    1c96:	b3 07       	cpc	r27, r19
    1c98:	e4 07       	cpc	r30, r20
    1c9a:	f5 07       	cpc	r31, r21
    1c9c:	20 f0       	brcs	.+8      	; 0x1ca6 <__udivmodsi4_ep>
    1c9e:	a2 1b       	sub	r26, r18
    1ca0:	b3 0b       	sbc	r27, r19
    1ca2:	e4 0b       	sbc	r30, r20
    1ca4:	f5 0b       	sbc	r31, r21

00001ca6 <__udivmodsi4_ep>:
    1ca6:	66 1f       	adc	r22, r22
    1ca8:	77 1f       	adc	r23, r23
    1caa:	88 1f       	adc	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	1a 94       	dec	r1
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <__udivmodsi4_loop>
    1cb2:	60 95       	com	r22
    1cb4:	70 95       	com	r23
    1cb6:	80 95       	com	r24
    1cb8:	90 95       	com	r25
    1cba:	9b 01       	movw	r18, r22
    1cbc:	ac 01       	movw	r20, r24
    1cbe:	bd 01       	movw	r22, r26
    1cc0:	cf 01       	movw	r24, r30
    1cc2:	08 95       	ret

00001cc4 <__divmodsi4>:
    1cc4:	05 2e       	mov	r0, r21
    1cc6:	97 fb       	bst	r25, 7
    1cc8:	1e f4       	brtc	.+6      	; 0x1cd0 <__divmodsi4+0xc>
    1cca:	00 94       	com	r0
    1ccc:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__negsi2>
    1cd0:	57 fd       	sbrc	r21, 7
    1cd2:	07 d0       	rcall	.+14     	; 0x1ce2 <__divmodsi4_neg2>
    1cd4:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__udivmodsi4>
    1cd8:	07 fc       	sbrc	r0, 7
    1cda:	03 d0       	rcall	.+6      	; 0x1ce2 <__divmodsi4_neg2>
    1cdc:	4e f4       	brtc	.+18     	; 0x1cf0 <__divmodsi4_exit>
    1cde:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__negsi2>

00001ce2 <__divmodsi4_neg2>:
    1ce2:	50 95       	com	r21
    1ce4:	40 95       	com	r20
    1ce6:	30 95       	com	r19
    1ce8:	21 95       	neg	r18
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	4f 4f       	sbci	r20, 0xFF	; 255
    1cee:	5f 4f       	sbci	r21, 0xFF	; 255

00001cf0 <__divmodsi4_exit>:
    1cf0:	08 95       	ret

00001cf2 <__negsi2>:
    1cf2:	90 95       	com	r25
    1cf4:	80 95       	com	r24
    1cf6:	70 95       	com	r23
    1cf8:	61 95       	neg	r22
    1cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	08 95       	ret

00001d02 <__tablejump2__>:
    1d02:	ee 0f       	add	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	05 90       	lpm	r0, Z+
    1d08:	f4 91       	lpm	r31, Z
    1d0a:	e0 2d       	mov	r30, r0
    1d0c:	09 94       	ijmp

00001d0e <__mulhisi3>:
    1d0e:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__umulhisi3>
    1d12:	33 23       	and	r19, r19
    1d14:	12 f4       	brpl	.+4      	; 0x1d1a <__mulhisi3+0xc>
    1d16:	8a 1b       	sub	r24, r26
    1d18:	9b 0b       	sbc	r25, r27
    1d1a:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__usmulhisi3_tail>

00001d1e <__umulhisi3>:
    1d1e:	a2 9f       	mul	r26, r18
    1d20:	b0 01       	movw	r22, r0
    1d22:	b3 9f       	mul	r27, r19
    1d24:	c0 01       	movw	r24, r0
    1d26:	a3 9f       	mul	r26, r19
    1d28:	70 0d       	add	r23, r0
    1d2a:	81 1d       	adc	r24, r1
    1d2c:	11 24       	eor	r1, r1
    1d2e:	91 1d       	adc	r25, r1
    1d30:	b2 9f       	mul	r27, r18
    1d32:	70 0d       	add	r23, r0
    1d34:	81 1d       	adc	r24, r1
    1d36:	11 24       	eor	r1, r1
    1d38:	91 1d       	adc	r25, r1
    1d3a:	08 95       	ret

00001d3c <__usmulhisi3>:
    1d3c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__umulhisi3>

00001d40 <__usmulhisi3_tail>:
    1d40:	b7 ff       	sbrs	r27, 7
    1d42:	08 95       	ret
    1d44:	82 1b       	sub	r24, r18
    1d46:	93 0b       	sbc	r25, r19
    1d48:	08 95       	ret

00001d4a <__udivmodhi4>:
    1d4a:	aa 1b       	sub	r26, r26
    1d4c:	bb 1b       	sub	r27, r27
    1d4e:	51 e1       	ldi	r21, 0x11	; 17
    1d50:	07 c0       	rjmp	.+14     	; 0x1d60 <__udivmodhi4_ep>

00001d52 <__udivmodhi4_loop>:
    1d52:	aa 1f       	adc	r26, r26
    1d54:	bb 1f       	adc	r27, r27
    1d56:	a6 17       	cp	r26, r22
    1d58:	b7 07       	cpc	r27, r23
    1d5a:	10 f0       	brcs	.+4      	; 0x1d60 <__udivmodhi4_ep>
    1d5c:	a6 1b       	sub	r26, r22
    1d5e:	b7 0b       	sbc	r27, r23

00001d60 <__udivmodhi4_ep>:
    1d60:	88 1f       	adc	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	5a 95       	dec	r21
    1d66:	a9 f7       	brne	.-22     	; 0x1d52 <__udivmodhi4_loop>
    1d68:	80 95       	com	r24
    1d6a:	90 95       	com	r25
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	cd 01       	movw	r24, r26
    1d70:	08 95       	ret

00001d72 <eeprom_read_block>:
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22

00001d76 <eeprom_read_blraw>:
    1d76:	fc 01       	movw	r30, r24
    1d78:	f9 99       	sbic	0x1f, 1	; 31
    1d7a:	fe cf       	rjmp	.-4      	; 0x1d78 <eeprom_read_blraw+0x2>
    1d7c:	06 c0       	rjmp	.+12     	; 0x1d8a <eeprom_read_blraw+0x14>
    1d7e:	f2 bd       	out	0x22, r31	; 34
    1d80:	e1 bd       	out	0x21, r30	; 33
    1d82:	f8 9a       	sbi	0x1f, 0	; 31
    1d84:	31 96       	adiw	r30, 0x01	; 1
    1d86:	00 b4       	in	r0, 0x20	; 32
    1d88:	0d 92       	st	X+, r0
    1d8a:	41 50       	subi	r20, 0x01	; 1
    1d8c:	50 40       	sbci	r21, 0x00	; 0
    1d8e:	b8 f7       	brcc	.-18     	; 0x1d7e <eeprom_read_blraw+0x8>
    1d90:	08 95       	ret

00001d92 <eeprom_write_block>:
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	03 c0       	rjmp	.+6      	; 0x1d9e <eeprom_write_block+0xc>
    1d98:	2d 91       	ld	r18, X+
    1d9a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <eeprom_write_r18>
    1d9e:	41 50       	subi	r20, 0x01	; 1
    1da0:	50 40       	sbci	r21, 0x00	; 0
    1da2:	d0 f7       	brcc	.-12     	; 0x1d98 <eeprom_write_block+0x6>
    1da4:	08 95       	ret

00001da6 <eeprom_write_byte>:
    1da6:	26 2f       	mov	r18, r22

00001da8 <eeprom_write_r18>:
    1da8:	f9 99       	sbic	0x1f, 1	; 31
    1daa:	fe cf       	rjmp	.-4      	; 0x1da8 <eeprom_write_r18>
    1dac:	1f ba       	out	0x1f, r1	; 31
    1dae:	92 bd       	out	0x22, r25	; 34
    1db0:	81 bd       	out	0x21, r24	; 33
    1db2:	20 bd       	out	0x20, r18	; 32
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	fa 9a       	sbi	0x1f, 2	; 31
    1dba:	f9 9a       	sbi	0x1f, 1	; 31
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	01 96       	adiw	r24, 0x01	; 1
    1dc0:	08 95       	ret

00001dc2 <_exit>:
    1dc2:	f8 94       	cli

00001dc4 <__stop_program>:
    1dc4:	ff cf       	rjmp	.-2      	; 0x1dc4 <__stop_program>
