
Winch Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000e86  00000f1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  00800102  00800102  00000f1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010b2  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000782  00000000  00000000  000021b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ee  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000470  00000000  00000000  00003228  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000603  00000000  00000000  00003698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000871  00000000  00000000  00003c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__vector_5>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__vector_12>
  34:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__vector_13>
  38:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__vector_14>
  3c:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_22>
  5c:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_23>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_27>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e8       	ldi	r30, 0x86	; 134
  90:	fe e0       	ldi	r31, 0x0E	; 14
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a0 3b       	cpi	r26, 0xB0	; 176
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <main>
  b2:	0c 94 41 07 	jmp	0xe82	; 0xe82 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <ADC_switch>:
	
	adc_ready_to_send = 0;
}

void ADC_switch(uint8_t channel){
		ADMUX = (ADMUX & 0xF0) | (channel & ADMUX_MASK);
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	90 81       	ld	r25, Z
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	98 2b       	or	r25, r24
  c6:	90 83       	st	Z, r25
  c8:	08 95       	ret

000000ca <ADC_init>:

void ADC_init(void){
	int8_t c;
	
	//Wybór Ÿród³a wyzwalania - 
	ADCSRB |= (1<<ADHSM) | (1<<AREFEN)| (0<<ADTS3) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
  ca:	eb e7       	ldi	r30, 0x7B	; 123
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 6a       	ori	r24, 0xA0	; 160
  d2:	80 83       	st	Z, r24
	// ADEN - aktywowanie ADC
	// ADATE - zewnêtrzne Ÿród³o wyzwalania
	// ADPSX - ustawienie preskalera 0 1 1 - clk/8 ->2Mhz
	// ADIE - aktywowanie przerwania
	// ADSC - start pomiaru
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (0<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8f 68       	ori	r24, 0x8F	; 143
  dc:	80 83       	st	Z, r24
			
	// REFS1	REFS0
	// 0		0	-nap odniesienia z VREF
	// 1		1	-nap odniesienia z wew referencji
	// MUX2..0  -wybór wejscia przetwornika			
	ADMUX |= (0<<REFS1) | (1<<REFS0);
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
	
	// init adc state struct
	adc_state.active_channel  = 0;
  e8:	e1 e2       	ldi	r30, 0x21	; 33
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	10 82       	st	Z, r1
	adc_state.buffor_position = 0;
  ee:	10 92 22 01 	sts	0x0122, r1
	
	//translate index to ADC channel num
	channel_idx_to_num[ADC_CHANNEL_WATER]   = ADC_CHANNEL_WATER_NUM;
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	80 93 19 01 	sts	0x0119, r24
	channel_idx_to_num[ADC_CHANNEL_VOLTAGE] = ADC_CHANNEL_VOLTAGE_NUM;
  f8:	89 e0       	ldi	r24, 0x09	; 9
  fa:	80 93 18 01 	sts	0x0118, r24
	channel_idx_to_num[ADC_CHANNEL_CURRENT] = ADC_CHANNEL_CURRENT_NUM;
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	80 93 17 01 	sts	0x0117, r24
	
	// init sum
	for( c = 0 ; c < ADC_MAX_CHANNEL ; c++ ){
		adc_state.sum[c] = 0;
 104:	10 92 7e 01 	sts	0x017E, r1
 108:	10 92 7d 01 	sts	0x017D, r1
 10c:	10 92 80 01 	sts	0x0180, r1
 110:	10 92 7f 01 	sts	0x017F, r1
 114:	10 92 82 01 	sts	0x0182, r1
 118:	10 92 81 01 	sts	0x0181, r1
	}

	// trun on first channel	
	ADC_switch(channel_idx_to_num[adc_state.active_channel]);
 11c:	e0 81       	ld	r30, Z
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	e9 5e       	subi	r30, 0xE9	; 233
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	80 81       	ld	r24, Z
 126:	0e 94 5d 00 	call	0xba	; 0xba <ADC_switch>
	
	adc_ready_to_send = 0;
 12a:	10 92 0a 01 	sts	0x010A, r1
 12e:	08 95       	ret

00000130 <ADC_start_conversion>:
void ADC_switch(uint8_t channel){
		ADMUX = (ADMUX & 0xF0) | (channel & ADMUX_MASK);
}

void ADC_start_conversion(){
	ADCSRA |= (1<<ADSC);
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <ADC_task>:
}

// ADC task function, called every loop in main_loop
void ADC_task(void){
	/* if we have new results */
	if( HAS_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED)) {
 13c:	80 91 20 01 	lds	r24, 0x0120
 140:	80 ff       	sbrs	r24, 0
 142:	2d c0       	rjmp	.+90     	; 0x19e <ADC_task+0x62>
		adc_results.current = adc_state.sum[ADC_CHANNEL_CURRENT] / ADC_SAMPELS;
 144:	80 91 7d 01 	lds	r24, 0x017D
 148:	90 91 7e 01 	lds	r25, 0x017E
 14c:	2f e0       	ldi	r18, 0x0F	; 15
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 156:	70 93 1b 01 	sts	0x011B, r23
 15a:	60 93 1a 01 	sts	0x011A, r22
		adc_results.voltage = adc_state.sum[ADC_CHANNEL_VOLTAGE] / ADC_SAMPELS;
 15e:	80 91 7f 01 	lds	r24, 0x017F
 162:	90 91 80 01 	lds	r25, 0x0180
 166:	b9 01       	movw	r22, r18
 168:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 16c:	70 93 1d 01 	sts	0x011D, r23
 170:	60 93 1c 01 	sts	0x011C, r22
		adc_results.water   = adc_state.sum[ADC_CHANNEL_WATER]   / ADC_SAMPELS;		
 174:	80 91 81 01 	lds	r24, 0x0181
 178:	90 91 82 01 	lds	r25, 0x0182
 17c:	b9 01       	movw	r22, r18
 17e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 182:	70 93 1f 01 	sts	0x011F, r23
 186:	60 93 1e 01 	sts	0x011E, r22
		adc_ready_to_send++;
 18a:	80 91 0a 01 	lds	r24, 0x010A
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 0a 01 	sts	0x010A, r24
		/* clearing flag for conversion resulsts */
		CLEAR_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED);
 194:	e0 e2       	ldi	r30, 0x20	; 32
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	80 81       	ld	r24, Z
 19a:	8e 7f       	andi	r24, 0xFE	; 254
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <__vector_27>:
	}
};

// ADC conversion completed signal
SIGNAL(ADC_vect){
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	/* save result */
	
	/* removing old result from the sum */
	if( HAS_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF) ) {
 1c6:	80 91 20 01 	lds	r24, 0x0120
 1ca:	81 ff       	sbrs	r24, 1
 1cc:	1f c0       	rjmp	.+62     	; 0x20c <__vector_27+0x6c>
		adc_state.sum[adc_state.active_channel] -= adc_state.buffor[adc_state.active_channel][adc_state.buffor_position];
 1ce:	a1 e2       	ldi	r26, 0x21	; 33
 1d0:	b1 e0       	ldi	r27, 0x01	; 1
 1d2:	ec 91       	ld	r30, X
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	e3 58       	subi	r30, 0x83	; 131
 1dc:	fe 4f       	sbci	r31, 0xFE	; 254
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01
 1e2:	ac 91       	ld	r26, X
 1e4:	20 91 22 01 	lds	r18, 0x0122
 1e8:	3f e0       	ldi	r19, 0x0F	; 15
 1ea:	a3 9f       	mul	r26, r19
 1ec:	d0 01       	movw	r26, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	a2 0f       	add	r26, r18
 1f2:	b1 1d       	adc	r27, r1
 1f4:	aa 0f       	add	r26, r26
 1f6:	bb 1f       	adc	r27, r27
 1f8:	a0 5e       	subi	r26, 0xE0	; 224
 1fa:	be 4f       	sbci	r27, 0xFE	; 254
 1fc:	13 96       	adiw	r26, 0x03	; 3
 1fe:	2d 91       	ld	r18, X+
 200:	3c 91       	ld	r19, X
 202:	14 97       	sbiw	r26, 0x04	; 4
 204:	82 1b       	sub	r24, r18
 206:	93 0b       	sbc	r25, r19
 208:	91 83       	std	Z+1, r25	; 0x01
 20a:	80 83       	st	Z, r24
	}
	/* putting new result to the buffor */
	adc_state.buffor[adc_state.active_channel][adc_state.buffor_position] = ADC;
 20c:	e1 e2       	ldi	r30, 0x21	; 33
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	a0 81       	ld	r26, Z
 212:	c2 e2       	ldi	r28, 0x22	; 34
 214:	d1 e0       	ldi	r29, 0x01	; 1
 216:	28 81       	ld	r18, Y
 218:	80 91 78 00 	lds	r24, 0x0078
 21c:	90 91 79 00 	lds	r25, 0x0079
 220:	4f e0       	ldi	r20, 0x0F	; 15
 222:	4a 9f       	mul	r20, r26
 224:	d0 01       	movw	r26, r0
 226:	11 24       	eor	r1, r1
 228:	a2 0f       	add	r26, r18
 22a:	b1 1d       	adc	r27, r1
 22c:	aa 0f       	add	r26, r26
 22e:	bb 1f       	adc	r27, r27
 230:	a0 5e       	subi	r26, 0xE0	; 224
 232:	be 4f       	sbci	r27, 0xFE	; 254
 234:	14 96       	adiw	r26, 0x04	; 4
 236:	9c 93       	st	X, r25
 238:	8e 93       	st	-X, r24
 23a:	13 97       	sbiw	r26, 0x03	; 3
	/* adding new result to sum */
	adc_state.sum[adc_state.active_channel] += adc_state.buffor[adc_state.active_channel][adc_state.buffor_position];
 23c:	a0 81       	ld	r26, Z
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	aa 0f       	add	r26, r26
 242:	bb 1f       	adc	r27, r27
 244:	a3 58       	subi	r26, 0x83	; 131
 246:	be 4f       	sbci	r27, 0xFE	; 254
 248:	2d 91       	ld	r18, X+
 24a:	3c 91       	ld	r19, X
 24c:	11 97       	sbiw	r26, 0x01	; 1
 24e:	90 81       	ld	r25, Z
 250:	88 81       	ld	r24, Y
 252:	49 9f       	mul	r20, r25
 254:	e0 01       	movw	r28, r0
 256:	11 24       	eor	r1, r1
 258:	c8 0f       	add	r28, r24
 25a:	d1 1d       	adc	r29, r1
 25c:	cc 0f       	add	r28, r28
 25e:	dd 1f       	adc	r29, r29
 260:	c0 5e       	subi	r28, 0xE0	; 224
 262:	de 4f       	sbci	r29, 0xFE	; 254
 264:	8b 81       	ldd	r24, Y+3	; 0x03
 266:	9c 81       	ldd	r25, Y+4	; 0x04
 268:	82 0f       	add	r24, r18
 26a:	93 1f       	adc	r25, r19
 26c:	11 96       	adiw	r26, 0x01	; 1
 26e:	9c 93       	st	X, r25
 270:	8e 93       	st	-X, r24
	
	/* inc channel position counters */
	if( ++adc_state.active_channel == ADC_MAX_CHANNEL) {
 272:	80 81       	ld	r24, Z
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	80 83       	st	Z, r24
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	c9 f4       	brne	.+50     	; 0x2ae <__vector_27+0x10e>
		/* we checked all channels, starting from the begging */
		adc_state.active_channel = 0;
 27c:	10 92 21 01 	sts	0x0121, r1
		/* reseting buffer position */
		if( ++adc_state.buffor_position == ADC_SAMPELS ){
 280:	e2 e2       	ldi	r30, 0x22	; 34
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	80 81       	ld	r24, Z
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	80 83       	st	Z, r24
 28a:	8f 30       	cpi	r24, 0x0F	; 15
 28c:	39 f4       	brne	.+14     	; 0x29c <__vector_27+0xfc>
			/* we filled whole buffor, starting from the begging */
			adc_state.buffor_position = 0;
 28e:	10 92 22 01 	sts	0x0122, r1
			// setting flag that buffor is full (you can read results)
			SET_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF);
 292:	e0 e2       	ldi	r30, 0x20	; 32
 294:	f1 e0       	ldi	r31, 0x01	; 1
 296:	80 81       	ld	r24, Z
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	80 83       	st	Z, r24
		}
		/* setting flag that there is new result ready */
		if( HAS_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF) ) {
 29c:	80 91 20 01 	lds	r24, 0x0120
 2a0:	81 ff       	sbrs	r24, 1
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <__vector_27+0x10e>
			SET_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED);
 2a4:	e0 e2       	ldi	r30, 0x20	; 32
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	80 81       	ld	r24, Z
 2aa:	81 60       	ori	r24, 0x01	; 1
 2ac:	80 83       	st	Z, r24
		}
	}
	/* switching active channel */
	ADC_switch(channel_idx_to_num[adc_state.active_channel]);
 2ae:	e0 91 21 01 	lds	r30, 0x0121
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	e9 5e       	subi	r30, 0xE9	; 233
 2b6:	fe 4f       	sbci	r31, 0xFE	; 254
 2b8:	80 81       	ld	r24, Z
 2ba:	0e 94 5d 00 	call	0xba	; 0xba <ADC_switch>
	/* starting conversion */
	ADC_start_conversion();	
 2be:	0e 94 98 00 	call	0x130	; 0x130 <ADC_start_conversion>
};
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <main_loop>:
void main_loop() {
	uint16_t current = 0;
	uint16_t water = 0;
	uint16_t supply_voltage = 0;
	
	ADC_task();
 2e8:	0e 94 9e 00 	call	0x13c	; 0x13c <ADC_task>
	PSC_Task();
 2ec:	0e 94 14 06 	call	0xc28	; 0xc28 <PSC_Task>
			
	CAN.state = winch_status;
 2f0:	80 91 08 01 	lds	r24, 0x0108
 2f4:	80 93 87 01 	sts	0x0187, r24
	CAN.diag_1 = WINCH_SET;
 2f8:	83 b1       	in	r24, 0x03	; 3
 2fa:	80 72       	andi	r24, 0x20	; 32
 2fc:	80 93 88 01 	sts	0x0188, r24
	CAN.current = current;
 300:	10 92 84 01 	sts	0x0184, r1
	CAN.water = water;
 304:	10 92 85 01 	sts	0x0185, r1
	CAN.supply_voltage = supply_voltage;
 308:	10 92 86 01 	sts	0x0186, r1
	CAN.water_raw = adc_results.water;
 30c:	80 91 1e 01 	lds	r24, 0x011E
 310:	90 91 1f 01 	lds	r25, 0x011F
 314:	90 93 8b 01 	sts	0x018B, r25
 318:	80 93 8a 01 	sts	0x018A, r24
	CAN.current_raw = adc_results.current;
 31c:	80 91 1a 01 	lds	r24, 0x011A
 320:	90 91 1b 01 	lds	r25, 0x011B
 324:	90 93 8d 01 	sts	0x018D, r25
 328:	80 93 8c 01 	sts	0x018C, r24
			
	CAN_Task();
 32c:	0e 94 07 05 	call	0xa0e	; 0xa0e <CAN_Task>
			
	//gdy brak aktywnoœci przez okreœlony czas - wy³¹cz siê
	if(timer_time_elapsed(life_timer) > TIME_TO_LIVE){
 330:	80 91 04 01 	lds	r24, 0x0104
 334:	90 91 05 01 	lds	r25, 0x0105
 338:	0e 94 76 06 	call	0xcec	; 0xcec <timer_time_elapsed>
 33c:	81 35       	cpi	r24, 0x51	; 81
 33e:	93 4c       	sbci	r25, 0xC3	; 195
 340:	98 f0       	brcs	.+38     	; 0x368 <main_loop+0x80>
		LED_0_OFF;
 342:	5a 98       	cbi	0x0b, 2	; 11
		PWR_OFF;
 344:	2b 98       	cbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	93 ed       	ldi	r25, 0xD3	; 211
 34a:	20 e3       	ldi	r18, 0x30	; 48
 34c:	81 50       	subi	r24, 0x01	; 1
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	20 40       	sbci	r18, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main_loop+0x64>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main_loop+0x6e>
 356:	00 00       	nop
		_delay_ms(1000);
		life_timer=timer_get();
 358:	0e 94 71 06 	call	0xce2	; 0xce2 <timer_get>
 35c:	90 93 05 01 	sts	0x0105, r25
 360:	80 93 04 01 	sts	0x0104, r24
		PWR_ON;
 364:	2b 9a       	sbi	0x05, 3	; 5
		LED_0_ON;
 366:	5a 9a       	sbi	0x0b, 2	; 11
	}
			
			//wskazywanie stanu wyci¹garki
			if(winch_state == UP || winch_state == DOWN){
 368:	80 91 09 01 	lds	r24, 0x0109
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	21 f0       	breq	.+8      	; 0x378 <main_loop+0x90>
 370:	80 91 09 01 	lds	r24, 0x0109
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	31 f4       	brne	.+12     	; 0x384 <main_loop+0x9c>
				//LED_0_ON;
				if( BOARD_IS_ACTIVE ) {
 378:	1d 99       	sbic	0x03, 5	; 3
 37a:	02 c0       	rjmp	.+4      	; 0x380 <main_loop+0x98>
					LED_1_ON;
 37c:	5b 9a       	sbi	0x0b, 3	; 11
 37e:	09 c0       	rjmp	.+18     	; 0x392 <main_loop+0xaa>
					} else {
					LED_1_OFF;
 380:	5b 98       	cbi	0x0b, 3	; 11
 382:	07 c0       	rjmp	.+14     	; 0x392 <main_loop+0xaa>
				}
			}
			else if(winch_state == OVERLOAD){
 384:	80 91 09 01 	lds	r24, 0x0109
 388:	83 30       	cpi	r24, 0x03	; 3
 38a:	11 f4       	brne	.+4      	; 0x390 <main_loop+0xa8>
				//LED_0_OFF;
				LED_1_ON;
 38c:	5b 9a       	sbi	0x0b, 3	; 11
 38e:	01 c0       	rjmp	.+2      	; 0x392 <main_loop+0xaa>
			}
			else{
				//LED_0_OFF;
				LED_1_OFF;
 390:	5b 98       	cbi	0x0b, 3	; 11
				} else {
				water = 0;
			}
			
			//przeliczanie pr¹du
			if(((adc_results.current + I_OFFSET) < 1024) && ((I_OFFSET + adc_results.current) > 0)){
 392:	a0 91 1a 01 	lds	r26, 0x011A
 396:	b0 91 1b 01 	lds	r27, 0x011B
 39a:	cd 01       	movw	r24, r26
 39c:	92 50       	subi	r25, 0x02	; 2
 39e:	8f 3f       	cpi	r24, 0xFF	; 255
 3a0:	93 40       	sbci	r25, 0x03	; 3
 3a2:	a0 f4       	brcc	.+40     	; 0x3cc <main_loop+0xe4>
				current=((((uint32_t)adc_results.current + I_OFFSET))*I_SCALE) / 1024; //przeliczanie ADU na pr¹d (ADU*I_SCALE)/1024 i wyliczanie œredniej z poprzednim pomiarem
 3a4:	20 e2       	ldi	r18, 0x20	; 32
 3a6:	33 e0       	ldi	r19, 0x03	; 3
 3a8:	0e 94 26 07 	call	0xe4c	; 0xe4c <__usmulhisi3>
 3ac:	dc 01       	movw	r26, r24
 3ae:	cb 01       	movw	r24, r22
 3b0:	80 5e       	subi	r24, 0xE0	; 224
 3b2:	9c 43       	sbci	r25, 0x3C	; 60
 3b4:	a6 40       	sbci	r26, 0x06	; 6
 3b6:	b1 09       	sbc	r27, r1
 3b8:	07 2e       	mov	r0, r23
 3ba:	7a e0       	ldi	r23, 0x0A	; 10
 3bc:	b6 95       	lsr	r27
 3be:	a7 95       	ror	r26
 3c0:	97 95       	ror	r25
 3c2:	87 95       	ror	r24
 3c4:	7a 95       	dec	r23
 3c6:	d1 f7       	brne	.-12     	; 0x3bc <main_loop+0xd4>
 3c8:	70 2d       	mov	r23, r0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <main_loop+0xe8>
				} else {
				current = 0;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
			}
			
			if(winch_state == OVERLOAD){
 3d0:	20 91 09 01 	lds	r18, 0x0109
 3d4:	23 30       	cpi	r18, 0x03	; 3
 3d6:	09 f4       	brne	.+2      	; 0x3da <main_loop+0xf2>
 3d8:	d0 c0       	rjmp	.+416    	; 0x57a <main_loop+0x292>
				//BUZZER_ON;
				
			}
			else if(winch_state == OFF){
 3da:	20 91 09 01 	lds	r18, 0x0109
 3de:	22 23       	and	r18, r18
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <main_loop+0xfc>
 3e2:	cb c0       	rjmp	.+406    	; 0x57a <main_loop+0x292>
				//BUZZER_OFF;
			}
			//gdy wyci¹garka aktywna
			else if(winch_state == UP || winch_state == DOWN){
 3e4:	20 91 09 01 	lds	r18, 0x0109
 3e8:	22 30       	cpi	r18, 0x02	; 2
 3ea:	29 f0       	breq	.+10     	; 0x3f6 <main_loop+0x10e>
 3ec:	20 91 09 01 	lds	r18, 0x0109
 3f0:	21 30       	cpi	r18, 0x01	; 1
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <main_loop+0x10e>
 3f4:	c2 c0       	rjmp	.+388    	; 0x57a <main_loop+0x292>
				
				if(((WINCH_IS_ACTIVE && current >= MAX_CURRENT_WINCH) || (BOARD_IS_ACTIVE && current >= MAX_CURRENT_BOARD)) && timer_time_elapsed(winch_timer) >= CURRENT_BLIND_TIME){ //zabezpiecznie nadpr¹dowe
 3f6:	1d 9b       	sbis	0x03, 5	; 3
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <main_loop+0x118>
 3fa:	88 36       	cpi	r24, 0x68	; 104
 3fc:	91 05       	cpc	r25, r1
 3fe:	20 f4       	brcc	.+8      	; 0x408 <main_loop+0x120>
 400:	1d 99       	sbic	0x03, 5	; 3
 402:	10 c0       	rjmp	.+32     	; 0x424 <main_loop+0x13c>
 404:	c2 97       	sbiw	r24, 0x32	; 50
 406:	70 f0       	brcs	.+28     	; 0x424 <main_loop+0x13c>
 408:	80 91 06 01 	lds	r24, 0x0106
 40c:	90 91 07 01 	lds	r25, 0x0107
 410:	0e 94 76 06 	call	0xcec	; 0xcec <timer_time_elapsed>
 414:	8b 34       	cpi	r24, 0x4B	; 75
 416:	91 05       	cpc	r25, r1
 418:	28 f0       	brcs	.+10     	; 0x424 <main_loop+0x13c>
					winch_state=OVERLOAD;
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	80 93 09 01 	sts	0x0109, r24
					Disable_PSC();
 420:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Disable_PSC>
					
				}
				
				life_timer = timer_get();//pobijanie timer-a od samowy³¹czenia
 424:	0e 94 71 06 	call	0xce2	; 0xce2 <timer_get>
 428:	90 93 05 01 	sts	0x0105, r25
 42c:	80 93 04 01 	sts	0x0104, r24
				
				if(winch_status == INIT){
 430:	80 91 08 01 	lds	r24, 0x0108
 434:	81 11       	cpse	r24, r1
 436:	10 c0       	rjmp	.+32     	; 0x458 <main_loop+0x170>
					time_stamp = timer_get();
 438:	0e 94 71 06 	call	0xce2	; 0xce2 <timer_get>
 43c:	90 93 03 01 	sts	0x0103, r25
 440:	80 93 02 01 	sts	0x0102, r24
					winch_timer = timer_get();
 444:	0e 94 71 06 	call	0xce2	; 0xce2 <timer_get>
 448:	90 93 07 01 	sts	0x0107, r25
 44c:	80 93 06 01 	sts	0x0106, r24
					winch_status = INIT_DELAY;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	80 93 08 01 	sts	0x0108, r24
 456:	08 95       	ret
				}
				else if( winch_status == INIT_DELAY){ //poczatkowe opóŸnienie a¿ siê zamkn¹ styczniki
 458:	80 91 08 01 	lds	r24, 0x0108
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	91 f5       	brne	.+100    	; 0x4c4 <main_loop+0x1dc>
					if(timer_time_elapsed(time_stamp) >= INITIAL_DELAY){
 460:	80 91 02 01 	lds	r24, 0x0102
 464:	90 91 03 01 	lds	r25, 0x0103
 468:	0e 94 76 06 	call	0xcec	; 0xcec <timer_time_elapsed>
 46c:	0f 97       	sbiw	r24, 0x0f	; 15
 46e:	08 f4       	brcc	.+2      	; 0x472 <main_loop+0x18a>
 470:	84 c0       	rjmp	.+264    	; 0x57a <main_loop+0x292>
						PSC.torque = GET_TORQUE_INIT_VAL;
 472:	80 91 09 01 	lds	r24, 0x0109
 476:	82 30       	cpi	r24, 0x02	; 2
 478:	29 f4       	brne	.+10     	; 0x484 <main_loop+0x19c>
 47a:	1d 9b       	sbis	0x03, 5	; 3
 47c:	08 c0       	rjmp	.+16     	; 0x48e <main_loop+0x1a6>
 47e:	88 e5       	ldi	r24, 0x58	; 88
 480:	92 e0       	ldi	r25, 0x02	; 2
 482:	0a c0       	rjmp	.+20     	; 0x498 <main_loop+0x1b0>
 484:	1d 9b       	sbis	0x03, 5	; 3
 486:	06 c0       	rjmp	.+12     	; 0x494 <main_loop+0x1ac>
 488:	88 ec       	ldi	r24, 0xC8	; 200
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	05 c0       	rjmp	.+10     	; 0x498 <main_loop+0x1b0>
 48e:	82 ec       	ldi	r24, 0xC2	; 194
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	02 c0       	rjmp	.+4      	; 0x498 <main_loop+0x1b0>
 494:	82 ec       	ldi	r24, 0xC2	; 194
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	90 93 af 01 	sts	0x01AF, r25
 49c:	80 93 ae 01 	sts	0x01AE, r24
						winch_status = TORQUE_INCREASING;
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	80 93 08 01 	sts	0x0108, r24
						time_stamp = timer_get();
 4a6:	0e 94 71 06 	call	0xce2	; 0xce2 <timer_get>
 4aa:	90 93 03 01 	sts	0x0103, r25
 4ae:	80 93 02 01 	sts	0x0102, r24
						winch_timer = timer_get();
 4b2:	0e 94 71 06 	call	0xce2	; 0xce2 <timer_get>
 4b6:	90 93 07 01 	sts	0x0107, r25
 4ba:	80 93 06 01 	sts	0x0106, r24
						Enable_PSC();
 4be:	0e 94 02 06 	call	0xc04	; 0xc04 <Enable_PSC>
 4c2:	08 95       	ret
					}
				}
				else if( winch_status == TORQUE_INCREASING){
 4c4:	80 91 08 01 	lds	r24, 0x0108
 4c8:	82 30       	cpi	r24, 0x02	; 2
 4ca:	09 f0       	breq	.+2      	; 0x4ce <main_loop+0x1e6>
 4cc:	54 c0       	rjmp	.+168    	; 0x576 <main_loop+0x28e>
					if(timer_time_elapsed(time_stamp) >= GET_TORQUE_RISING_SPEED_PERIOD){
 4ce:	80 91 02 01 	lds	r24, 0x0102
 4d2:	90 91 03 01 	lds	r25, 0x0103
 4d6:	0e 94 76 06 	call	0xcec	; 0xcec <timer_time_elapsed>
 4da:	20 91 09 01 	lds	r18, 0x0109
 4de:	22 30       	cpi	r18, 0x02	; 2
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <main_loop+0x1fe>
 4e2:	23 b1       	in	r18, 0x03	; 3
 4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <main_loop+0x200>
 4e6:	23 b1       	in	r18, 0x03	; 3
 4e8:	49 97       	sbiw	r24, 0x19	; 25
 4ea:	08 f4       	brcc	.+2      	; 0x4ee <main_loop+0x206>
 4ec:	46 c0       	rjmp	.+140    	; 0x57a <main_loop+0x292>
						time_stamp=timer_get();
 4ee:	0e 94 71 06 	call	0xce2	; 0xce2 <timer_get>
 4f2:	90 93 03 01 	sts	0x0103, r25
 4f6:	80 93 02 01 	sts	0x0102, r24
						if(PSC.torque <= (1000-GET_TORQUE_RISING_SPEED)){
 4fa:	80 91 ae 01 	lds	r24, 0x01AE
 4fe:	90 91 af 01 	lds	r25, 0x01AF
 502:	20 91 09 01 	lds	r18, 0x0109
 506:	22 30       	cpi	r18, 0x02	; 2
 508:	29 f4       	brne	.+10     	; 0x514 <main_loop+0x22c>
 50a:	1d 9b       	sbis	0x03, 5	; 3
 50c:	08 c0       	rjmp	.+16     	; 0x51e <main_loop+0x236>
 50e:	24 ee       	ldi	r18, 0xE4	; 228
 510:	33 e0       	ldi	r19, 0x03	; 3
 512:	0a c0       	rjmp	.+20     	; 0x528 <main_loop+0x240>
 514:	1d 9b       	sbis	0x03, 5	; 3
 516:	06 c0       	rjmp	.+12     	; 0x524 <main_loop+0x23c>
 518:	24 ee       	ldi	r18, 0xE4	; 228
 51a:	33 e0       	ldi	r19, 0x03	; 3
 51c:	05 c0       	rjmp	.+10     	; 0x528 <main_loop+0x240>
 51e:	20 ee       	ldi	r18, 0xE0	; 224
 520:	33 e0       	ldi	r19, 0x03	; 3
 522:	02 c0       	rjmp	.+4      	; 0x528 <main_loop+0x240>
 524:	20 ee       	ldi	r18, 0xE0	; 224
 526:	33 e0       	ldi	r19, 0x03	; 3
 528:	28 17       	cp	r18, r24
 52a:	39 07       	cpc	r19, r25
 52c:	d0 f0       	brcs	.+52     	; 0x562 <main_loop+0x27a>
							PSC.torque += GET_TORQUE_RISING_SPEED;
 52e:	20 91 09 01 	lds	r18, 0x0109
 532:	22 30       	cpi	r18, 0x02	; 2
 534:	29 f4       	brne	.+10     	; 0x540 <main_loop+0x258>
 536:	1d 9b       	sbis	0x03, 5	; 3
 538:	08 c0       	rjmp	.+16     	; 0x54a <main_loop+0x262>
 53a:	24 e0       	ldi	r18, 0x04	; 4
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	0a c0       	rjmp	.+20     	; 0x554 <main_loop+0x26c>
 540:	1d 9b       	sbis	0x03, 5	; 3
 542:	06 c0       	rjmp	.+12     	; 0x550 <main_loop+0x268>
 544:	24 e0       	ldi	r18, 0x04	; 4
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	05 c0       	rjmp	.+10     	; 0x554 <main_loop+0x26c>
 54a:	28 e0       	ldi	r18, 0x08	; 8
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <main_loop+0x26c>
 550:	28 e0       	ldi	r18, 0x08	; 8
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	82 0f       	add	r24, r18
 556:	93 1f       	adc	r25, r19
 558:	90 93 af 01 	sts	0x01AF, r25
 55c:	80 93 ae 01 	sts	0x01AE, r24
 560:	08 95       	ret
						}
						else{
							PSC.torque = 1000; //FULL POWER
 562:	88 ee       	ldi	r24, 0xE8	; 232
 564:	93 e0       	ldi	r25, 0x03	; 3
 566:	90 93 af 01 	sts	0x01AF, r25
 56a:	80 93 ae 01 	sts	0x01AE, r24
							winch_status = FULL_POWER;
 56e:	83 e0       	ldi	r24, 0x03	; 3
 570:	80 93 08 01 	sts	0x0108, r24
 574:	08 95       	ret
						}
					}
				}
				else if(winch_status == FULL_POWER){//pe³na moc
 576:	80 91 08 01 	lds	r24, 0x0108
 57a:	08 95       	ret

0000057c <Init_HAL>:
};

void Init_HAL(void){
	
	//w³¹czenie PLL na 64MHz
	PLLCSR |= (1<PLLF) | (1<<PLLE);
 57c:	89 b5       	in	r24, 0x29	; 41
 57e:	83 60       	ori	r24, 0x03	; 3
 580:	89 bd       	out	0x29, r24	; 41
	
	//ustawienie porty na wyjœciowe dla LED-ow
	DDR(LED_0_PORT) |= (1<<LED_0);
 582:	52 9a       	sbi	0x0a, 2	; 10
	DDR(LED_1_PORT) |= (1<<LED_1);
 584:	53 9a       	sbi	0x0a, 3	; 10
	
	//LED_0_ON;
	LED_1_ON;
 586:	5b 9a       	sbi	0x0b, 3	; 11
	
	//podtrzymanie zasilania
	DDR(PWR_PORT) |= (1<<PWR);
 588:	23 9a       	sbi	0x04, 3	; 4
	
	//Inicjalizacja DIP Switchy
	DDR(SW_1_PORT) &= ~(1<<SW_1);
 58a:	57 98       	cbi	0x0a, 7	; 10
	DDR(SW_2_PORT) &= ~(1<<SW_2);
 58c:	56 98       	cbi	0x0a, 6	; 10
	DDR(SW_3_PORT) &= ~(1<<SW_3);
 58e:	55 98       	cbi	0x0a, 5	; 10
	DDR(SW_4_PORT) &= ~(1<<SW_4);
 590:	21 98       	cbi	0x04, 1	; 4
	DDR(SW_5_PORT) &= ~(1<<SW_5);
 592:	20 98       	cbi	0x04, 0	; 4
	DDR(SW_6_PORT) &= ~(1<<SW_6);
 594:	39 98       	cbi	0x07, 1	; 7
	DDR(SW_7_PORT) &= ~(1<<SW_7);
 596:	51 98       	cbi	0x0a, 1	; 10
	DDR(SW_8_PORT) &= ~(1<<SW_8);
 598:	38 98       	cbi	0x07, 0	; 7
	
	//w³aczenie pull-up-ów
	PORT(SW_1_PORT) |= 1<<SW_1;
 59a:	5f 9a       	sbi	0x0b, 7	; 11
	PORT(SW_2_PORT) |= 1<<SW_2;
 59c:	5e 9a       	sbi	0x0b, 6	; 11
	PORT(SW_3_PORT) |= 1<<SW_3;
 59e:	5d 9a       	sbi	0x0b, 5	; 11
	PORT(SW_4_PORT) |= 1<<SW_4;
 5a0:	29 9a       	sbi	0x05, 1	; 5
	PORT(SW_5_PORT) |= 1<<SW_5;
 5a2:	28 9a       	sbi	0x05, 0	; 5
	PORT(SW_6_PORT) |= 1<<SW_6;
 5a4:	41 9a       	sbi	0x08, 1	; 8
	PORT(SW_7_PORT) |= 1<<SW_7;
 5a6:	59 9a       	sbi	0x0b, 1	; 11
	PORT(SW_8_PORT) |= 1<<SW_8;
 5a8:	40 9a       	sbi	0x08, 0	; 8
	
	//Inicjalizacja wejœæ UP i DOWN
	DDR(WINCH_UP_PORT) &= ~(1<<WINCH_UP);
 5aa:	22 98       	cbi	0x04, 2	; 4
	DDR(WINCH_DOWN_PORT) &= ~(1<<WINCH_DOWN);
 5ac:	3c 98       	cbi	0x07, 4	; 7
	DDR(AIN_2_PORT) &= ~(1<<AIN_2);
 5ae:	25 98       	cbi	0x04, 5	; 4
	
	//aktywacja przerwañ
	PCICR |= (1<<PCIE0) | (1<<PCIE1);
 5b0:	e8 e6       	ldi	r30, 0x68	; 104
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	83 60       	ori	r24, 0x03	; 3
 5b8:	80 83       	st	Z, r24
	
	PCMSK0 |= (1<<PCINT2);
 5ba:	ea e6       	ldi	r30, 0x6A	; 106
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	84 60       	ori	r24, 0x04	; 4
 5c2:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12);
 5c4:	eb e6       	ldi	r30, 0x6B	; 107
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	80 61       	ori	r24, 0x10	; 16
 5cc:	80 83       	st	Z, r24
 5ce:	08 95       	ret

000005d0 <Get_DIP_sw_word>:
	
};

uint8_t Get_DIP_sw_word(void){
	uint8_t result=0;
	if(SW_1_SET)
 5d0:	89 b1       	in	r24, 0x09	; 9
 5d2:	88 1f       	adc	r24, r24
 5d4:	88 27       	eor	r24, r24
 5d6:	88 1f       	adc	r24, r24
		result |= 1<<0;
	if(SW_2_SET)
 5d8:	4e 99       	sbic	0x09, 6	; 9
		result |= 1<<1;
 5da:	82 60       	ori	r24, 0x02	; 2
	if(SW_3_SET)
 5dc:	4d 99       	sbic	0x09, 5	; 9
		result |= 1<<2;
 5de:	84 60       	ori	r24, 0x04	; 4
	if(SW_4_SET)
 5e0:	19 99       	sbic	0x03, 1	; 3
		result |= 1<<3;
 5e2:	88 60       	ori	r24, 0x08	; 8
	if(SW_5_SET)
 5e4:	18 99       	sbic	0x03, 0	; 3
		result |= 1<<4;
 5e6:	80 61       	ori	r24, 0x10	; 16
	if(SW_6_SET)
 5e8:	31 99       	sbic	0x06, 1	; 6
		result |= 1<<5;
 5ea:	80 62       	ori	r24, 0x20	; 32
	if(SW_7_SET)
 5ec:	49 99       	sbic	0x09, 1	; 9
		result |= 1<<6;
 5ee:	80 64       	ori	r24, 0x40	; 64
	if(SW_8_SET)
 5f0:	30 99       	sbic	0x06, 0	; 6
		result |= 1<<7;
 5f2:	80 68       	ori	r24, 0x80	; 128
	return result; 
	
};
 5f4:	08 95       	ret

000005f6 <main>:

volatile uint8_t adc_ready_to_send = 0;


int main(void) {
	Init_HAL();
 5f6:	0e 94 be 02 	call	0x57c	; 0x57c <Init_HAL>
	timer_init();
 5fa:	0e 94 5e 06 	call	0xcbc	; 0xcbc <timer_init>
	Init_CAN(Get_DIP_sw_word());
 5fe:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Get_DIP_sw_word>
 602:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Init_CAN>
	ADC_init();
 606:	0e 94 65 00 	call	0xca	; 0xca <ADC_init>
	Init_PSC();
 60a:	0e 94 de 05 	call	0xbbc	; 0xbbc <Init_PSC>
	
	sei();
 60e:	78 94       	sei
	
	if( WINCH_UP_SET && WINCH_DOWN_SET ){
 610:	1a 9b       	sbis	0x03, 2	; 3
 612:	06 c0       	rjmp	.+12     	; 0x620 <main+0x2a>
 614:	34 9b       	sbis	0x06, 4	; 6
 616:	04 c0       	rjmp	.+8      	; 0x620 <main+0x2a>
		power_up_source = SWITCH_ON;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 93 00 01 	sts	0x0100, r24
 61e:	15 c0       	rjmp	.+42     	; 0x64a <main+0x54>
	}
	else if(WINCH_UP_SET){
 620:	1a 9b       	sbis	0x03, 2	; 3
 622:	07 c0       	rjmp	.+14     	; 0x632 <main+0x3c>
		PWR_ON;
 624:	2b 9a       	sbi	0x05, 3	; 5
		power_up_source = WINCH_ON;
 626:	10 92 00 01 	sts	0x0100, r1
		winch_state = UP;
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	80 93 09 01 	sts	0x0109, r24
 630:	0c c0       	rjmp	.+24     	; 0x64a <main+0x54>
	}
	else if(WINCH_DOWN_SET){
 632:	34 9b       	sbis	0x06, 4	; 6
 634:	07 c0       	rjmp	.+14     	; 0x644 <main+0x4e>
		PWR_ON;
 636:	2b 9a       	sbi	0x05, 3	; 5
		power_up_source = WINCH_ON;
 638:	10 92 00 01 	sts	0x0100, r1
		winch_state = DOWN;
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	80 93 09 01 	sts	0x0109, r24
 642:	03 c0       	rjmp	.+6      	; 0x64a <main+0x54>
	}
	else{
		power_up_source = SWITCH_ON;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 00 01 	sts	0x0100, r24
	}
	
	PWR_ON;
 64a:	2b 9a       	sbi	0x05, 3	; 5
	LED_0_ON;
 64c:	5a 9a       	sbi	0x0b, 2	; 11
	
	ADC_start_conversion();
 64e:	0e 94 98 00 	call	0x130	; 0x130 <ADC_start_conversion>
	
	time_stamp=timer_get();
 652:	0e 94 71 06 	call	0xce2	; 0xce2 <timer_get>
 656:	90 93 03 01 	sts	0x0103, r25
 65a:	80 93 02 01 	sts	0x0102, r24
	life_timer=timer_get();
 65e:	0e 94 71 06 	call	0xce2	; 0xce2 <timer_get>
 662:	90 93 05 01 	sts	0x0105, r25
 666:	80 93 04 01 	sts	0x0104, r24
	
    while(1) {
		if( timer_new_tick() ){
 66a:	0e 94 98 06 	call	0xd30	; 0xd30 <timer_new_tick>
 66e:	88 23       	and	r24, r24
 670:	e1 f3       	breq	.-8      	; 0x66a <main+0x74>
			main_loop();
 672:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main_loop>
 676:	f9 cf       	rjmp	.-14     	; 0x66a <main+0x74>

00000678 <__vector_22>:
		result |= 1<<7;
	return result; 
	
};

SIGNAL (PCINT0_vect){ //przerwanie od WINCH_UP
 678:	1f 92       	push	r1
 67a:	0f 92       	push	r0
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	0f 92       	push	r0
 680:	11 24       	eor	r1, r1
 682:	2f 93       	push	r18
 684:	3f 93       	push	r19
 686:	4f 93       	push	r20
 688:	5f 93       	push	r21
 68a:	6f 93       	push	r22
 68c:	7f 93       	push	r23
 68e:	8f 93       	push	r24
 690:	9f 93       	push	r25
 692:	af 93       	push	r26
 694:	bf 93       	push	r27
 696:	ef 93       	push	r30
 698:	ff 93       	push	r31
	if(WINCH_UP_SET && winch_state == OFF){
 69a:	1a 9b       	sbis	0x03, 2	; 3
 69c:	1b c0       	rjmp	.+54     	; 0x6d4 <__vector_22+0x5c>
 69e:	80 91 09 01 	lds	r24, 0x0109
 6a2:	81 11       	cpse	r24, r1
 6a4:	17 c0       	rjmp	.+46     	; 0x6d4 <__vector_22+0x5c>
		winch_state = UP;
 6a6:	82 e0       	ldi	r24, 0x02	; 2
 6a8:	80 93 09 01 	sts	0x0109, r24
		PSC.torque = TORQUE_INIT_VAL;
 6ac:	84 e6       	ldi	r24, 0x64	; 100
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	90 93 af 01 	sts	0x01AF, r25
 6b4:	80 93 ae 01 	sts	0x01AE, r24
		winch_timer=timer_get();
 6b8:	0e 94 71 06 	call	0xce2	; 0xce2 <timer_get>
 6bc:	90 93 07 01 	sts	0x0107, r25
 6c0:	80 93 06 01 	sts	0x0106, r24
		//Enable_PSC();
		if(power_up_source == SWITCH_ON){
 6c4:	80 91 00 01 	lds	r24, 0x0100
 6c8:	81 30       	cpi	r24, 0x01	; 1
 6ca:	81 f4       	brne	.+32     	; 0x6ec <__vector_22+0x74>
			power_up_source = WINCH_ON;
 6cc:	10 92 00 01 	sts	0x0100, r1
			PWR_ON;
 6d0:	2b 9a       	sbi	0x05, 3	; 5
 6d2:	0c c0       	rjmp	.+24     	; 0x6ec <__vector_22+0x74>
		}
	}
	else if(WINCH_UP_CLEAR && winch_state != OFF){
 6d4:	1a 99       	sbic	0x03, 2	; 3
 6d6:	0a c0       	rjmp	.+20     	; 0x6ec <__vector_22+0x74>
 6d8:	80 91 09 01 	lds	r24, 0x0109
 6dc:	88 23       	and	r24, r24
 6de:	31 f0       	breq	.+12     	; 0x6ec <__vector_22+0x74>
		winch_state = OFF;
 6e0:	10 92 09 01 	sts	0x0109, r1
		Disable_PSC();
 6e4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Disable_PSC>
		winch_status = INIT;
 6e8:	10 92 08 01 	sts	0x0108, r1
	}
};
 6ec:	ff 91       	pop	r31
 6ee:	ef 91       	pop	r30
 6f0:	bf 91       	pop	r27
 6f2:	af 91       	pop	r26
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	7f 91       	pop	r23
 6fa:	6f 91       	pop	r22
 6fc:	5f 91       	pop	r21
 6fe:	4f 91       	pop	r20
 700:	3f 91       	pop	r19
 702:	2f 91       	pop	r18
 704:	0f 90       	pop	r0
 706:	0f be       	out	0x3f, r0	; 63
 708:	0f 90       	pop	r0
 70a:	1f 90       	pop	r1
 70c:	18 95       	reti

0000070e <__vector_23>:

SIGNAL (PCINT1_vect){ //przerwanie od WINCH_DOWN
 70e:	1f 92       	push	r1
 710:	0f 92       	push	r0
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	0f 92       	push	r0
 716:	11 24       	eor	r1, r1
 718:	2f 93       	push	r18
 71a:	3f 93       	push	r19
 71c:	4f 93       	push	r20
 71e:	5f 93       	push	r21
 720:	6f 93       	push	r22
 722:	7f 93       	push	r23
 724:	8f 93       	push	r24
 726:	9f 93       	push	r25
 728:	af 93       	push	r26
 72a:	bf 93       	push	r27
 72c:	ef 93       	push	r30
 72e:	ff 93       	push	r31
	if(WINCH_DOWN_SET && winch_state == OFF){
 730:	34 9b       	sbis	0x06, 4	; 6
 732:	1b c0       	rjmp	.+54     	; 0x76a <__vector_23+0x5c>
 734:	80 91 09 01 	lds	r24, 0x0109
 738:	81 11       	cpse	r24, r1
 73a:	17 c0       	rjmp	.+46     	; 0x76a <__vector_23+0x5c>
		winch_state = DOWN;
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	80 93 09 01 	sts	0x0109, r24
		PSC.torque = TORQUE_INIT_VAL;
 742:	84 e6       	ldi	r24, 0x64	; 100
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	90 93 af 01 	sts	0x01AF, r25
 74a:	80 93 ae 01 	sts	0x01AE, r24
		winch_timer=timer_get();
 74e:	0e 94 71 06 	call	0xce2	; 0xce2 <timer_get>
 752:	90 93 07 01 	sts	0x0107, r25
 756:	80 93 06 01 	sts	0x0106, r24
		//Enable_PSC();
		if(power_up_source == SWITCH_ON){
 75a:	80 91 00 01 	lds	r24, 0x0100
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	81 f4       	brne	.+32     	; 0x782 <__vector_23+0x74>
			power_up_source = WINCH_ON;
 762:	10 92 00 01 	sts	0x0100, r1
			PWR_ON;
 766:	2b 9a       	sbi	0x05, 3	; 5
 768:	0c c0       	rjmp	.+24     	; 0x782 <__vector_23+0x74>
		}
	}
	else if(WINCH_DOWN_CLEAR && winch_state != OFF){
 76a:	34 99       	sbic	0x06, 4	; 6
 76c:	0a c0       	rjmp	.+20     	; 0x782 <__vector_23+0x74>
 76e:	80 91 09 01 	lds	r24, 0x0109
 772:	88 23       	and	r24, r24
 774:	31 f0       	breq	.+12     	; 0x782 <__vector_23+0x74>
		winch_state = OFF;
 776:	10 92 09 01 	sts	0x0109, r1
		Disable_PSC();
 77a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Disable_PSC>
		winch_status = INIT;
 77e:	10 92 08 01 	sts	0x0108, r1
	}
};
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	bf 91       	pop	r27
 788:	af 91       	pop	r26
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	7f 91       	pop	r23
 790:	6f 91       	pop	r22
 792:	5f 91       	pop	r21
 794:	4f 91       	pop	r20
 796:	3f 91       	pop	r19
 798:	2f 91       	pop	r18
 79a:	0f 90       	pop	r0
 79c:	0f be       	out	0x3f, r0	; 63
 79e:	0f 90       	pop	r0
 7a0:	1f 90       	pop	r1
 7a2:	18 95       	reti

000007a4 <Init_CAN>:

struct CAN_str CAN;


//Inicjalizacja CAN
void Init_CAN(uint8_t dip_sw){
 7a4:	2f 92       	push	r2
 7a6:	3f 92       	push	r3
 7a8:	5f 92       	push	r5
 7aa:	6f 92       	push	r6
 7ac:	7f 92       	push	r7
 7ae:	8f 92       	push	r8
 7b0:	9f 92       	push	r9
 7b2:	af 92       	push	r10
 7b4:	bf 92       	push	r11
 7b6:	cf 92       	push	r12
 7b8:	df 92       	push	r13
 7ba:	ef 92       	push	r14
 7bc:	ff 92       	push	r15
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
	uint16_t mob_1_id = 0x200 + BASE_ID; //odbiera
	uint16_t mob_2_id = 0x180 + BASE_ID; //nadaje
	uint16_t mob_3_id = 0x280 + BASE_ID; //nadaje
	
	if(dip_sw & 0x01){
 7c6:	80 fd       	sbrc	r24, 0
 7c8:	0c c0       	rjmp	.+24     	; 0x7e2 <Init_CAN+0x3e>


//Inicjalizacja CAN
void Init_CAN(uint8_t dip_sw){
	uint16_t mob_1_id = 0x200 + BASE_ID; //odbiera
	uint16_t mob_2_id = 0x180 + BASE_ID; //nadaje
 7ca:	0f 2e       	mov	r0, r31
 7cc:	f0 e9       	ldi	r31, 0x90	; 144
 7ce:	8f 2e       	mov	r8, r31
 7d0:	99 24       	eor	r9, r9
 7d2:	93 94       	inc	r9
 7d4:	f0 2d       	mov	r31, r0
struct CAN_str CAN;


//Inicjalizacja CAN
void Init_CAN(uint8_t dip_sw){
	uint16_t mob_1_id = 0x200 + BASE_ID; //odbiera
 7d6:	68 94       	set
 7d8:	66 24       	eor	r6, r6
 7da:	64 f8       	bld	r6, 4
 7dc:	77 24       	eor	r7, r7
 7de:	71 f8       	bld	r7, 1
 7e0:	0c c0       	rjmp	.+24     	; 0x7fa <Init_CAN+0x56>
	uint16_t mob_2_id = 0x180 + BASE_ID; //nadaje
	uint16_t mob_3_id = 0x280 + BASE_ID; //nadaje
	
	if(dip_sw & 0x01){
		mob_1_id += 1;
		mob_2_id += 1;
 7e2:	0f 2e       	mov	r0, r31
 7e4:	f1 e9       	ldi	r31, 0x91	; 145
 7e6:	8f 2e       	mov	r8, r31
 7e8:	99 24       	eor	r9, r9
 7ea:	93 94       	inc	r9
 7ec:	f0 2d       	mov	r31, r0
	uint16_t mob_1_id = 0x200 + BASE_ID; //odbiera
	uint16_t mob_2_id = 0x180 + BASE_ID; //nadaje
	uint16_t mob_3_id = 0x280 + BASE_ID; //nadaje
	
	if(dip_sw & 0x01){
		mob_1_id += 1;
 7ee:	0f 2e       	mov	r0, r31
 7f0:	f1 e1       	ldi	r31, 0x11	; 17
 7f2:	6f 2e       	mov	r6, r31
 7f4:	f2 e0       	ldi	r31, 0x02	; 2
 7f6:	7f 2e       	mov	r7, r31
 7f8:	f0 2d       	mov	r31, r0
		mob_2_id += 1;
	}
	if(dip_sw & 0x02){
 7fa:	81 ff       	sbrs	r24, 1
 7fc:	06 c0       	rjmp	.+12     	; 0x80a <Init_CAN+0x66>
		mob_1_id += 2;
 7fe:	92 e0       	ldi	r25, 0x02	; 2
 800:	69 0e       	add	r6, r25
 802:	71 1c       	adc	r7, r1
		mob_2_id += 2;
 804:	a2 e0       	ldi	r26, 0x02	; 2
 806:	8a 0e       	add	r8, r26
 808:	91 1c       	adc	r9, r1
	}
	if(dip_sw & 0x04){
 80a:	82 ff       	sbrs	r24, 2
 80c:	06 c0       	rjmp	.+12     	; 0x81a <Init_CAN+0x76>
		mob_1_id += 4;
 80e:	b4 e0       	ldi	r27, 0x04	; 4
 810:	6b 0e       	add	r6, r27
 812:	71 1c       	adc	r7, r1
		mob_2_id += 4;
 814:	c4 e0       	ldi	r28, 0x04	; 4
 816:	8c 0e       	add	r8, r28
 818:	91 1c       	adc	r9, r1
	}
	
	CANGCON = ( 1 << SWRES );   // Software reset
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	80 93 d8 00 	sts	0x00D8, r24
	CANTCON = 0x00;         // CAN timing prescaler set to 0
 820:	10 92 e5 00 	sts	0x00E5, r1
	
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
 824:	e2 ee       	ldi	r30, 0xE2	; 226
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	8e 60       	ori	r24, 0x0E	; 14
 82c:	80 83       	st	Z, r24
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
 82e:	e3 ee       	ldi	r30, 0xE3	; 227
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	8c 60       	ori	r24, 0x0C	; 12
 836:	80 83       	st	Z, r24
	CANBT3	|= 0x37; //CAN Baud set 125kbit
 838:	e4 ee       	ldi	r30, 0xE4	; 228
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	87 63       	ori	r24, 0x37	; 55
 840:	80 83       	st	Z, r24
	
	for ( int8_t mob=0; mob<6; mob++ ) {
 842:	80 e0       	ldi	r24, 0x00	; 0
		CANPAGE = ( mob << 4 );        // Selects Message Object 0-5
 844:	cd ee       	ldi	r28, 0xED	; 237
 846:	d0 e0       	ldi	r29, 0x00	; 0
		CANCDMOB = 0x00;             // Disable mob
 848:	af ee       	ldi	r26, 0xEF	; 239
 84a:	b0 e0       	ldi	r27, 0x00	; 0
		CANSTMOB = 0x00;           // Clear mob status register;
 84c:	ee ee       	ldi	r30, 0xEE	; 238
 84e:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
	CANBT3	|= 0x37; //CAN Baud set 125kbit
	
	for ( int8_t mob=0; mob<6; mob++ ) {
		CANPAGE = ( mob << 4 );        // Selects Message Object 0-5
 850:	98 2f       	mov	r25, r24
 852:	92 95       	swap	r25
 854:	90 7f       	andi	r25, 0xF0	; 240
 856:	98 83       	st	Y, r25
		CANCDMOB = 0x00;             // Disable mob
 858:	1c 92       	st	X, r1
		CANSTMOB = 0x00;           // Clear mob status register;
 85a:	10 82       	st	Z, r1
	
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
	CANBT3	|= 0x37; //CAN Baud set 125kbit
	
	for ( int8_t mob=0; mob<6; mob++ ) {
 85c:	8f 5f       	subi	r24, 0xFF	; 255
 85e:	86 30       	cpi	r24, 0x06	; 6
 860:	b9 f7       	brne	.-18     	; 0x850 <Init_CAN+0xac>
		CANPAGE = ( mob << 4 );        // Selects Message Object 0-5
		CANCDMOB = 0x00;             // Disable mob
		CANSTMOB = 0x00;           // Clear mob status register;
	}
			
	CANGIE	|= ( 1 << ENIT ) | (1<<ENRX); //Enable Receive Interrupt
 862:	eb ed       	ldi	r30, 0xDB	; 219
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	80 6a       	ori	r24, 0xA0	; 160
 86a:	80 83       	st	Z, r24
	
	//MOb 0 configuration SYNC
	CANPAGE	 = (MOb_0<<4);
 86c:	0f 2e       	mov	r0, r31
 86e:	fd ee       	ldi	r31, 0xED	; 237
 870:	cf 2e       	mov	r12, r31
 872:	d1 2c       	mov	r13, r1
 874:	f0 2d       	mov	r31, r0
 876:	f6 01       	movw	r30, r12
 878:	10 82       	st	Z, r1
	
	CANIDM4 = 0x00; //full mask setting
 87a:	0f 2e       	mov	r0, r31
 87c:	f4 ef       	ldi	r31, 0xF4	; 244
 87e:	ef 2e       	mov	r14, r31
 880:	f1 2c       	mov	r15, r1
 882:	f0 2d       	mov	r31, r0
 884:	d7 01       	movw	r26, r14
 886:	1c 92       	st	X, r1
	CANIDM3 = 0x00; //full mask setting
 888:	05 ef       	ldi	r16, 0xF5	; 245
 88a:	10 e0       	ldi	r17, 0x00	; 0
 88c:	e8 01       	movw	r28, r16
 88e:	18 82       	st	Y, r1
	//CANIDM2 = 0x00; //full mask setting
	//CANIDM1 = 0x00; //full mask setting
	CANIDM2 = 0xFF; //full mask setting
 890:	66 ef       	ldi	r22, 0xF6	; 246
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	99 24       	eor	r9, r9
 896:	9a 94       	dec	r9
 898:	fb 01       	movw	r30, r22
 89a:	90 82       	st	Z, r9
	CANIDM1 = 0xFF; //full mask setting
 89c:	47 ef       	ldi	r20, 0xF7	; 247
 89e:	50 e0       	ldi	r21, 0x00	; 0
 8a0:	da 01       	movw	r26, r20
 8a2:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
 8a4:	af ee       	ldi	r26, 0xEF	; 239
 8a6:	b0 e0       	ldi	r27, 0x00	; 0
 8a8:	1c 92       	st	X, r1
	CANCDMOB |= RECEPTION;
 8aa:	8c 91       	ld	r24, X
 8ac:	80 68       	ori	r24, 0x80	; 128
 8ae:	8c 93       	st	X, r24
	CANIDT4 = 0x00;
 8b0:	20 ef       	ldi	r18, 0xF0	; 240
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	e9 01       	movw	r28, r18
 8b6:	18 82       	st	Y, r1
	CANIDT3 = 0x00;
 8b8:	0f 2e       	mov	r0, r31
 8ba:	f1 ef       	ldi	r31, 0xF1	; 241
 8bc:	2f 2e       	mov	r2, r31
 8be:	31 2c       	mov	r3, r1
 8c0:	f0 2d       	mov	r31, r0
 8c2:	f1 01       	movw	r30, r2
 8c4:	10 82       	st	Z, r1
	CANIDT2 = ((SYNC_ID & 0x07) << 5);
 8c6:	c2 ef       	ldi	r28, 0xF2	; 242
 8c8:	d0 e0       	ldi	r29, 0x00	; 0
 8ca:	18 82       	st	Y, r1
	CANIDT1 = (SYNC_ID >> 3);
 8cc:	0f 2e       	mov	r0, r31
 8ce:	f3 ef       	ldi	r31, 0xF3	; 243
 8d0:	af 2e       	mov	r10, r31
 8d2:	b1 2c       	mov	r11, r1
 8d4:	f0 2d       	mov	r31, r0
 8d6:	68 94       	set
 8d8:	77 24       	eor	r7, r7
 8da:	74 f8       	bld	r7, 4
 8dc:	f5 01       	movw	r30, r10
 8de:	70 82       	st	Z, r7
	CANIE2	|= (1<<IEMOB0); //Enable Interrupt MOb 0
 8e0:	ee ed       	ldi	r30, 0xDE	; 222
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	50 80       	ld	r5, Z
 8e6:	85 2d       	mov	r24, r5
 8e8:	81 60       	ori	r24, 0x01	; 1
 8ea:	80 83       	st	Z, r24
	
	//MOb 1 configuration control message
	CANPAGE	 = (MOb_1<<4);
 8ec:	e6 01       	movw	r28, r12
 8ee:	78 82       	st	Y, r7
	
	CANIDM4 = 0x00; //full mask setting
 8f0:	e7 01       	movw	r28, r14
 8f2:	18 82       	st	Y, r1
	CANIDM3 = 0x00; //full mask setting
 8f4:	e8 01       	movw	r28, r16
 8f6:	18 82       	st	Y, r1
	CANIDM2 = 0xFF; //full mask setting
 8f8:	eb 01       	movw	r28, r22
 8fa:	98 82       	st	Y, r9
	CANIDM1 = 0xFF; //full mask setting
 8fc:	ea 01       	movw	r28, r20
 8fe:	98 82       	st	Y, r9
	CANCDMOB = 0x00;
 900:	1c 92       	st	X, r1
	CANCDMOB |= RECEPTION | ( 8 << DLC0);
 902:	7c 90       	ld	r7, X
 904:	d7 2d       	mov	r29, r7
 906:	d8 68       	ori	r29, 0x88	; 136
 908:	dc 93       	st	X, r29
	CANIDT4 = 0x00;
 90a:	e9 01       	movw	r28, r18
 90c:	18 82       	st	Y, r1
	CANIDT3 = 0x00;
 90e:	e1 01       	movw	r28, r2
 910:	18 82       	st	Y, r1
	CANIDT2 = ((mob_1_id & 0x07) << 5);
 912:	66 0c       	add	r6, r6
 914:	66 0c       	add	r6, r6
 916:	66 0c       	add	r6, r6
 918:	66 0c       	add	r6, r6
 91a:	66 0c       	add	r6, r6
 91c:	c2 ef       	ldi	r28, 0xF2	; 242
 91e:	d0 e0       	ldi	r29, 0x00	; 0
 920:	68 82       	st	Y, r6
	CANIDT1 = (mob_1_id >> 3);
 922:	0f 2e       	mov	r0, r31
 924:	f2 e4       	ldi	r31, 0x42	; 66
 926:	7f 2e       	mov	r7, r31
 928:	f0 2d       	mov	r31, r0
 92a:	e5 01       	movw	r28, r10
 92c:	78 82       	st	Y, r7
	CANIE2	|= (1<<IEMOB1); //Enable Interrupt MOb 1
 92e:	70 80       	ld	r7, Z
 930:	d7 2d       	mov	r29, r7
 932:	d2 60       	ori	r29, 0x02	; 2
 934:	d0 83       	st	Z, r29
	CANIDT1 = (MOb_2_ID >> 3);
	CANIE2	|= (1<<IEMOB2); //Enable Interrupt MOb 2
	*/
	
	//MOb 3 configuration
	CANPAGE	 = (MOb_3<<4);
 936:	0f 2e       	mov	r0, r31
 938:	f0 e3       	ldi	r31, 0x30	; 48
 93a:	7f 2e       	mov	r7, r31
 93c:	f0 2d       	mov	r31, r0
 93e:	e6 01       	movw	r28, r12
 940:	78 82       	st	Y, r7
	
	CANIDM4 = 0x00; //full mask setting
 942:	e7 01       	movw	r28, r14
 944:	18 82       	st	Y, r1
	CANIDM3 = 0x00; //full mask setting
 946:	e8 01       	movw	r28, r16
 948:	18 82       	st	Y, r1
	CANIDM2 = (0x07 <<5); //full mask setting
 94a:	0f 2e       	mov	r0, r31
 94c:	f0 ee       	ldi	r31, 0xE0	; 224
 94e:	7f 2e       	mov	r7, r31
 950:	f0 2d       	mov	r31, r0
 952:	eb 01       	movw	r28, r22
 954:	78 82       	st	Y, r7
	CANIDM1 = 0xFF; //full mask setting
 956:	ea 01       	movw	r28, r20
 958:	98 82       	st	Y, r9
	CANCDMOB = 0x00;
 95a:	1c 92       	st	X, r1
	//CANCDMOB |= TRANSMISSION;
	CANIDT4 = 0x00;
 95c:	e9 01       	movw	r28, r18
 95e:	18 82       	st	Y, r1
	CANIDT3 = 0x00;
 960:	e1 01       	movw	r28, r2
 962:	18 82       	st	Y, r1
	CANIDT2 = ((mob_3_id & 0x07) << 5);
 964:	c2 ef       	ldi	r28, 0xF2	; 242
 966:	d0 e0       	ldi	r29, 0x00	; 0
 968:	18 82       	st	Y, r1
	CANIDT1 = (mob_3_id >> 3);
 96a:	0f 2e       	mov	r0, r31
 96c:	f2 e5       	ldi	r31, 0x52	; 82
 96e:	6f 2e       	mov	r6, r31
 970:	f0 2d       	mov	r31, r0
 972:	e5 01       	movw	r28, r10
 974:	68 82       	st	Y, r6
	CANIE2	|= (1<<IEMOB3); //Enable Interrupt MOb 3
 976:	60 80       	ld	r6, Z
 978:	d6 2d       	mov	r29, r6
 97a:	d8 60       	ori	r29, 0x08	; 8
 97c:	d0 83       	st	Z, r29
	
	//MOb 4 configuration
	CANPAGE	 = (MOb_2<<4);
 97e:	68 94       	set
 980:	66 24       	eor	r6, r6
 982:	65 f8       	bld	r6, 5
 984:	e6 01       	movw	r28, r12
 986:	68 82       	st	Y, r6
	
	CANIDM4 = 0x00; //full mask setting
 988:	e7 01       	movw	r28, r14
 98a:	18 82       	st	Y, r1
	CANIDM3 = 0x00; //full mask setting
 98c:	e8 01       	movw	r28, r16
 98e:	18 82       	st	Y, r1
	CANIDM2 = (0x07 <<5); //full mask setting
 990:	eb 01       	movw	r28, r22
 992:	78 82       	st	Y, r7
	CANIDM1 = 0xFF; //full mask setting
 994:	ea 01       	movw	r28, r20
 996:	98 82       	st	Y, r9
	CANCDMOB = 0x00;
 998:	1c 92       	st	X, r1
	//CANCDMOB |= TRANSMISSION;
	CANIDT4 = 0x00;
 99a:	d9 01       	movw	r26, r18
 99c:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
 99e:	e1 01       	movw	r28, r2
 9a0:	18 82       	st	Y, r1
	CANIDT2 = ((mob_2_id & 0x07) << 5);
 9a2:	88 0c       	add	r8, r8
 9a4:	88 0c       	add	r8, r8
 9a6:	88 0c       	add	r8, r8
 9a8:	88 0c       	add	r8, r8
 9aa:	88 0c       	add	r8, r8
 9ac:	a2 ef       	ldi	r26, 0xF2	; 242
 9ae:	b0 e0       	ldi	r27, 0x00	; 0
 9b0:	8c 92       	st	X, r8
	CANIDT1 = (mob_2_id >> 3);
 9b2:	82 e3       	ldi	r24, 0x32	; 50
 9b4:	e5 01       	movw	r28, r10
 9b6:	88 83       	st	Y, r24
	CANIE2	|= (1<<IEMOB2); //Enable Interrupt MOb 4
 9b8:	80 81       	ld	r24, Z
 9ba:	84 60       	ori	r24, 0x04	; 4
 9bc:	80 83       	st	Z, r24
	CANIDT2 = ((MOb_5_ID & 0x07) << 5);
	CANIDT1 = (MOb_5_ID >> 3);
	CANIE2	|= (1<<IEMOB5); //Enable Interrupt MOb 5
	*/
	
	CLEAR_CAN_interrupt_flag
 9be:	10 92 0e 01 	sts	0x010E, r1
	
	CANGCON |= (1<<ENASTB); //Enable controller
 9c2:	e8 ed       	ldi	r30, 0xD8	; 216
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	82 60       	ori	r24, 0x02	; 2
 9ca:	80 83       	st	Z, r24
}
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	1f 91       	pop	r17
 9d2:	0f 91       	pop	r16
 9d4:	ff 90       	pop	r15
 9d6:	ef 90       	pop	r14
 9d8:	df 90       	pop	r13
 9da:	cf 90       	pop	r12
 9dc:	bf 90       	pop	r11
 9de:	af 90       	pop	r10
 9e0:	9f 90       	pop	r9
 9e2:	8f 90       	pop	r8
 9e4:	7f 90       	pop	r7
 9e6:	6f 90       	pop	r6
 9e8:	5f 90       	pop	r5
 9ea:	3f 90       	pop	r3
 9ec:	2f 90       	pop	r2
 9ee:	08 95       	ret

000009f0 <__vector_18>:

//Obs³uga przerwania
SIGNAL ( CAN_INT_vect ){              // use interrupts
 9f0:	1f 92       	push	r1
 9f2:	0f 92       	push	r0
 9f4:	0f b6       	in	r0, 0x3f	; 63
 9f6:	0f 92       	push	r0
 9f8:	11 24       	eor	r1, r1
 9fa:	8f 93       	push	r24
	
	SET_CAN_interrupt_flag
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	80 93 0e 01 	sts	0x010E, r24

} 
 a02:	8f 91       	pop	r24
 a04:	0f 90       	pop	r0
 a06:	0f be       	out	0x3f, r0	; 63
 a08:	0f 90       	pop	r0
 a0a:	1f 90       	pop	r1
 a0c:	18 95       	reti

00000a0e <CAN_Task>:
		
		SET_SYNC_flag;
		adc_ready_to_send = 0;
	}*/
	
	if(CAN_interrupt_flag !=0){	//Jeœli zg³oszone przerwanie
 a0e:	80 91 0e 01 	lds	r24, 0x010E
 a12:	88 23       	and	r24, r24
 a14:	79 f1       	breq	.+94     	; 0xa74 <CAN_Task+0x66>
		CLEAR_CAN_interrupt_flag
 a16:	10 92 0e 01 	sts	0x010E, r1
		CANPAGE = CANHPMOB & 0xF0;      // Selects MOB with highest priority interrupt 
 a1a:	80 91 ec 00 	lds	r24, 0x00EC
 a1e:	80 7f       	andi	r24, 0xF0	; 240
 a20:	ed ee       	ldi	r30, 0xED	; 237
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 83       	st	Z, r24
		
		
		if((CANPAGE>>4) == MOb_0){ //sync - odbiera
 a26:	80 81       	ld	r24, Z
 a28:	82 95       	swap	r24
 a2a:	8f 70       	andi	r24, 0x0F	; 15
 a2c:	81 f4       	brne	.+32     	; 0xa4e <CAN_Task+0x40>
			if(CANSTMOB & ( 1 << RXOK)){	//obiór SYNC-a
 a2e:	80 91 ee 00 	lds	r24, 0x00EE
 a32:	85 ff       	sbrs	r24, 5
 a34:	03 c0       	rjmp	.+6      	; 0xa3c <CAN_Task+0x2e>
				SET_SYNC_flag				//ustaw flagê ob³sugi synca
 a36:	81 e0       	ldi	r24, 0x01	; 1
 a38:	80 93 0d 01 	sts	0x010D, r24
			}
			CANSTMOB=0x00;
 a3c:	10 92 ee 00 	sts	0x00EE, r1
			CANCDMOB = 0x00;			//restart MOB-a
 a40:	ef ee       	ldi	r30, 0xEF	; 239
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	10 82       	st	Z, r1
			CANCDMOB |= RECEPTION;		
 a46:	80 81       	ld	r24, Z
 a48:	80 68       	ori	r24, 0x80	; 128
 a4a:	80 83       	st	Z, r24
 a4c:	08 95       	ret
			}
			CANSTMOB=0x00;
			CANCDMOB = 0x00;			//restart MOB-a
			CANCDMOB |= RECEPTION | ( 8 << DLC0) ;
		}*/
		else if((CANPAGE>>4) == MOb_3){//paczka steruj¹ca falownikiem - nadaje
 a4e:	80 91 ed 00 	lds	r24, 0x00ED
 a52:	82 95       	swap	r24
 a54:	8f 70       	andi	r24, 0x0F	; 15
 a56:	83 30       	cpi	r24, 0x03	; 3
 a58:	19 f4       	brne	.+6      	; 0xa60 <CAN_Task+0x52>
			CANSTMOB=0x00;
 a5a:	10 92 ee 00 	sts	0x00EE, r1
 a5e:	08 95       	ret
		}
		else if((CANPAGE>>4) == MOb_2){//paczka debuguj¹ca - nadaje
 a60:	80 91 ed 00 	lds	r24, 0x00ED
 a64:	82 95       	swap	r24
 a66:	8f 70       	andi	r24, 0x0F	; 15
 a68:	82 30       	cpi	r24, 0x02	; 2
 a6a:	09 f0       	breq	.+2      	; 0xa6e <CAN_Task+0x60>
 a6c:	a6 c0       	rjmp	.+332    	; 0xbba <CAN_Task+0x1ac>
			CANSTMOB=0x00;
 a6e:	10 92 ee 00 	sts	0x00EE, r1
 a72:	08 95       	ret
		/*
		else if((CANPAGE>>4) == MOb_5){//NMT - nadaje
			CANSTMOB=0x00;
		}*/
	}
	else if(Update_data_flag){
 a74:	80 91 0c 01 	lds	r24, 0x010C
 a78:	88 23       	and	r24, r24
 a7a:	09 f4       	brne	.+2      	; 0xa7e <CAN_Task+0x70>
 a7c:	5a c0       	rjmp	.+180    	; 0xb32 <CAN_Task+0x124>
		static uint8_t frame=0;
		if(frame == 0 ){ //paczka zwrotne z falownika - odbiera
 a7e:	80 91 0b 01 	lds	r24, 0x010B
 a82:	81 11       	cpse	r24, r1
 a84:	04 c0       	rjmp	.+8      	; 0xa8e <CAN_Task+0x80>
			//CAN.status_word = MOb_data[frame][1]<<8 | MOb_data[frame][0];
			//CAN.torque = MOb_data[frame][5]<<8 | MOb_data[frame][4];
			//CAN.speed = MOb_data[frame][7]<<8 | MOb_data[frame][6];
			frame++;
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	80 93 0b 01 	sts	0x010B, r24
 a8c:	08 95       	ret
		}
		else if(frame == 1 ){ //paczka wysy³ana - nadaje
 a8e:	81 30       	cpi	r24, 0x01	; 1
 a90:	01 f5       	brne	.+64     	; 0xad2 <CAN_Task+0xc4>
			MOb_data[frame][0] = CAN.state;
 a92:	80 91 87 01 	lds	r24, 0x0187
 a96:	80 93 96 01 	sts	0x0196, r24
			MOb_data[frame][1] = CAN.water;
 a9a:	80 91 85 01 	lds	r24, 0x0185
 a9e:	80 93 97 01 	sts	0x0197, r24
			MOb_data[frame][2] = CAN.supply_voltage;
 aa2:	80 91 86 01 	lds	r24, 0x0186
 aa6:	80 93 98 01 	sts	0x0198, r24
			MOb_data[frame][3] = CAN.current;
 aaa:	80 91 84 01 	lds	r24, 0x0184
 aae:	80 93 99 01 	sts	0x0199, r24
			MOb_data[frame][4] = CAN.diag_1;
 ab2:	80 91 88 01 	lds	r24, 0x0188
 ab6:	80 93 9a 01 	sts	0x019A, r24
			MOb_data[frame][5] = CAN.diag_2;
 aba:	80 91 89 01 	lds	r24, 0x0189
 abe:	80 93 9b 01 	sts	0x019B, r24
			MOb_data[frame][6] = 0x00;
 ac2:	10 92 9c 01 	sts	0x019C, r1
			MOb_data[frame][7] = 0x00;
 ac6:	10 92 9d 01 	sts	0x019D, r1
			frame++;
 aca:	82 e0       	ldi	r24, 0x02	; 2
 acc:	80 93 0b 01 	sts	0x010B, r24
 ad0:	08 95       	ret
		}
		else if(frame == 2 ){ //paczka debuguj¹ca - nadaje
 ad2:	82 30       	cpi	r24, 0x02	; 2
 ad4:	09 f5       	brne	.+66     	; 0xb18 <CAN_Task+0x10a>
			MOb_data[frame][0] = CAN.state;
 ad6:	80 91 87 01 	lds	r24, 0x0187
 ada:	80 93 9e 01 	sts	0x019E, r24
			MOb_data[frame][1] = CAN.water;
 ade:	80 91 85 01 	lds	r24, 0x0185
 ae2:	80 93 9f 01 	sts	0x019F, r24
			MOb_data[frame][2] = CAN.water >>8;
 ae6:	99 27       	eor	r25, r25
 ae8:	87 fd       	sbrc	r24, 7
 aea:	90 95       	com	r25
 aec:	90 93 a0 01 	sts	0x01A0, r25
			MOb_data[frame][3] = CAN.current_raw ;
 af0:	ec e8       	ldi	r30, 0x8C	; 140
 af2:	f1 e0       	ldi	r31, 0x01	; 1
 af4:	90 81       	ld	r25, Z
 af6:	81 81       	ldd	r24, Z+1	; 0x01
 af8:	90 93 a1 01 	sts	0x01A1, r25
			MOb_data[frame][4] = CAN.current_raw >> 8;
 afc:	80 93 a2 01 	sts	0x01A2, r24
			MOb_data[frame][5] = CAN.current ;
 b00:	80 91 84 01 	lds	r24, 0x0184
 b04:	80 93 a3 01 	sts	0x01A3, r24
			MOb_data[frame][6] = CAN.current >> 8;
 b08:	10 92 a4 01 	sts	0x01A4, r1
			MOb_data[frame][7] = 0x00 | (uint8_t)(CAN.current > 256);
 b0c:	10 92 a5 01 	sts	0x01A5, r1
			frame++;
 b10:	83 e0       	ldi	r24, 0x03	; 3
 b12:	80 93 0b 01 	sts	0x010B, r24
 b16:	08 95       	ret
		}
		else if(frame == 3 ){ //NMT - nadaje
 b18:	83 30       	cpi	r24, 0x03	; 3
 b1a:	09 f0       	breq	.+2      	; 0xb1e <CAN_Task+0x110>
 b1c:	4e c0       	rjmp	.+156    	; 0xbba <CAN_Task+0x1ac>
			MOb_data[frame][0] = 0x01;
 b1e:	81 e0       	ldi	r24, 0x01	; 1
 b20:	80 93 a6 01 	sts	0x01A6, r24
			MOb_data[frame][1] = 0;
 b24:	10 92 a7 01 	sts	0x01A7, r1
			CLEAR_update_data_flag
 b28:	10 92 0c 01 	sts	0x010C, r1
			frame = 0;
 b2c:	10 92 0b 01 	sts	0x010B, r1
 b30:	08 95       	ret
		}										
	}
	else if( CAN_SYNC_flag  ){ //){ //Zleæ transmisjê po koleji transmisjê kolejnych paczek
 b32:	80 91 0d 01 	lds	r24, 0x010D
 b36:	88 23       	and	r24, r24
 b38:	09 f4       	brne	.+2      	; 0xb3c <CAN_Task+0x12e>
 b3a:	3f c0       	rjmp	.+126    	; 0xbba <CAN_Task+0x1ac>
		static uint8_t mob=2;
		CANPAGE = ( mob << 4 );						// Selects Message Object 0-5
 b3c:	80 91 01 01 	lds	r24, 0x0101
 b40:	82 95       	swap	r24
 b42:	80 7f       	andi	r24, 0xF0	; 240
 b44:	80 93 ed 00 	sts	0x00ED, r24
		if((CANEN2 & ( 1 << mob )) == 0){		//Jeœli MOb jest wolny
 b48:	80 91 dc 00 	lds	r24, 0x00DC
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	00 90 01 01 	lds	r0, 0x0101
 b52:	02 c0       	rjmp	.+4      	; 0xb58 <CAN_Task+0x14a>
 b54:	95 95       	asr	r25
 b56:	87 95       	ror	r24
 b58:	0a 94       	dec	r0
 b5a:	e2 f7       	brpl	.-8      	; 0xb54 <CAN_Task+0x146>
 b5c:	80 fd       	sbrc	r24, 0
 b5e:	1d c0       	rjmp	.+58     	; 0xb9a <CAN_Task+0x18c>
 b60:	80 e0       	ldi	r24, 0x00	; 0
 b62:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
				CANMSG = MOb_data[mob-1][byte_nr];
 b64:	aa ef       	ldi	r26, 0xFA	; 250
 b66:	b0 e0       	ldi	r27, 0x00	; 0
 b68:	e0 91 01 01 	lds	r30, 0x0101
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	31 97       	sbiw	r30, 0x01	; 1
 b70:	ee 0f       	add	r30, r30
 b72:	ff 1f       	adc	r31, r31
 b74:	ee 0f       	add	r30, r30
 b76:	ff 1f       	adc	r31, r31
 b78:	ee 0f       	add	r30, r30
 b7a:	ff 1f       	adc	r31, r31
 b7c:	e8 0f       	add	r30, r24
 b7e:	f9 1f       	adc	r31, r25
 b80:	e2 57       	subi	r30, 0x72	; 114
 b82:	fe 4f       	sbci	r31, 0xFE	; 254
 b84:	20 81       	ld	r18, Z
 b86:	2c 93       	st	X, r18
 b88:	01 96       	adiw	r24, 0x01	; 1
	}
	else if( CAN_SYNC_flag  ){ //){ //Zleæ transmisjê po koleji transmisjê kolejnych paczek
		static uint8_t mob=2;
		CANPAGE = ( mob << 4 );						// Selects Message Object 0-5
		if((CANEN2 & ( 1 << mob )) == 0){		//Jeœli MOb jest wolny
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
 b8a:	88 30       	cpi	r24, 0x08	; 8
 b8c:	91 05       	cpc	r25, r1
 b8e:	61 f7       	brne	.-40     	; 0xb68 <CAN_Task+0x15a>
				CANMSG = MOb_data[mob-1][byte_nr];
			}
			CANSTMOB = 0x00;
 b90:	10 92 ee 00 	sts	0x00EE, r1
			CANCDMOB = TRANSMISSION | ( 8 << DLC0);//zleæ transmisjê 8 bajtów
 b94:	88 e4       	ldi	r24, 0x48	; 72
 b96:	80 93 ef 00 	sts	0x00EF, r24
		}
		if(mob >= 3 ){
 b9a:	80 91 01 01 	lds	r24, 0x0101
 b9e:	83 30       	cpi	r24, 0x03	; 3
 ba0:	48 f0       	brcs	.+18     	; 0xbb4 <CAN_Task+0x1a6>
			 mob=2;
 ba2:	82 e0       	ldi	r24, 0x02	; 2
 ba4:	80 93 01 01 	sts	0x0101, r24
			 CLEAR_SYNC_flag
 ba8:	10 92 0d 01 	sts	0x010D, r1
			 SET_update_data_flag
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	80 93 0c 01 	sts	0x010C, r24
 bb2:	08 95       	ret
		}		
		else mob++;
 bb4:	8f 5f       	subi	r24, 0xFF	; 255
 bb6:	80 93 01 01 	sts	0x0101, r24
 bba:	08 95       	ret

00000bbc <Init_PSC>:


void Init_PSC(){
	
	//Inicjalizacja portów na wyjœciowe i ustawienie wyjœæ na 0
	DDR(PSC0A_PORT) |= (1<<PSC0A_PIN);
 bbc:	50 9a       	sbi	0x0a, 0	; 10
	PORT(PSC0A_PORT) &= ~(_BV(PSC0A_PIN));
 bbe:	58 98       	cbi	0x0b, 0	; 11
	PORT(PSC0A_PORT) |= (_BV(PSC0A_PIN));
 bc0:	58 9a       	sbi	0x0b, 0	; 11
	
	//rejestr konfiguracjyny
	//PULOCK - jednoczena zmiana rejestrów gdy zwoniony na 0
	//PMODE - 0 One Ramp Mode
	//POPx - 1 aktywny stan wysoki
	PCNF |= (0<<PULOCK) | (0<<PMODE) | (1<<POPB) | (1<<POPA);
 bc2:	e5 eb       	ldi	r30, 0xB5	; 181
 bc4:	f0 e0       	ldi	r31, 0x00	; 0
 bc6:	80 81       	ld	r24, Z
 bc8:	8c 60       	ori	r24, 0x0C	; 12
 bca:	80 83       	st	Z, r24
	
	//PPRE - prescaler na wejœciu modu³o- brak preskalera
	//PCLKSEL - ¿ród³o zegara PLL
	//PRUN - start modu³u
	PCTL = (1<<PPRE1) | (0<<PPRE0) | (0<<PCLKSEL) | (0<<SWAP0) | (0<<SWAP1) | (0<<SWAP2);
 bcc:	e7 eb       	ldi	r30, 0xB7	; 183
 bce:	f0 e0       	ldi	r31, 0x00	; 0
 bd0:	80 e8       	ldi	r24, 0x80	; 128
 bd2:	80 83       	st	Z, r24
	//POVEN - zabezpieczenie przed overlapem
	//PELEV - stan wysoki powoduje b³¹d
	//PFLTE0 filtr cyforwy na wejsciu fault
	//PRFM - zatrzymaj modu³ w przypadku b³êdu
	//PMIC0 |= (0<<POVEN0) | (1<<PELEV0) | (1<<PFLTE0) | (1<<PRFM02) | (1<<PRFM01);
	PMIC0 |= (1<<POVEN0) | (0<<PELEV0) | (0<<PFLTE0) | (0<<PRFM02) | (0<<PRFM01);
 bd4:	a8 eb       	ldi	r26, 0xB8	; 184
 bd6:	b0 e0       	ldi	r27, 0x00	; 0
 bd8:	8c 91       	ld	r24, X
 bda:	80 68       	ori	r24, 0x80	; 128
 bdc:	8c 93       	st	X, r24
	
	//Przewanie od Overcurrent
	//PIM |= (1<<PEVE0);
	
	//Ustawia TOP licznika
	POCR_RB = PSC_TOP;
 bde:	8f ef       	ldi	r24, 0xFF	; 255
 be0:	97 e0       	ldi	r25, 0x07	; 7
 be2:	90 93 b3 00 	sts	0x00B3, r25
 be6:	80 93 b2 00 	sts	0x00B2, r24
	
	//W³¹cz kana³ 0A
	POC = (1<<POEN0A);
 bea:	81 e0       	ldi	r24, 0x01	; 1
 bec:	80 93 b6 00 	sts	0x00B6, r24
	
	//ustawia wartoœæ pocz¹tkow¹ momentu
	PSC.torque = TORQUE_INIT_VAL;
 bf0:	84 e6       	ldi	r24, 0x64	; 100
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	90 93 af 01 	sts	0x01AF, r25
 bf8:	80 93 ae 01 	sts	0x01AE, r24
	POCR0RA = ((uint32_t)PSC_TOP*TORQUE_INIT_VAL)/1000;
	PCTL |= (1<<PRUN);
}

inline void Disable_PSC(){
	PCTL &= ~(1<<PRUN);
 bfc:	80 81       	ld	r24, Z
 bfe:	8e 7f       	andi	r24, 0xFE	; 254
 c00:	80 83       	st	Z, r24
 c02:	08 95       	ret

00000c04 <Enable_PSC>:
	Disable_PSC();
	
}

inline void Enable_PSC(){
	POCR0RA = ((uint32_t)PSC_TOP*TORQUE_INIT_VAL)/1000;
 c04:	8c ec       	ldi	r24, 0xCC	; 204
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	90 93 a3 00 	sts	0x00A3, r25
 c0c:	80 93 a2 00 	sts	0x00A2, r24
	PCTL |= (1<<PRUN);
 c10:	e7 eb       	ldi	r30, 0xB7	; 183
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	80 81       	ld	r24, Z
 c16:	81 60       	ori	r24, 0x01	; 1
 c18:	80 83       	st	Z, r24
 c1a:	08 95       	ret

00000c1c <Disable_PSC>:
}

inline void Disable_PSC(){
	PCTL &= ~(1<<PRUN);
 c1c:	e7 eb       	ldi	r30, 0xB7	; 183
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	80 81       	ld	r24, Z
 c22:	8e 7f       	andi	r24, 0xFE	; 254
 c24:	80 83       	st	Z, r24
 c26:	08 95       	ret

00000c28 <PSC_Task>:

void PSC_Task(){
	static uint16_t torque_prev = 0;
	static uint16_t duty_cycle=0;
	
	if(PSC.torque != torque_prev){
 c28:	80 91 ae 01 	lds	r24, 0x01AE
 c2c:	90 91 af 01 	lds	r25, 0x01AF
 c30:	20 91 11 01 	lds	r18, 0x0111
 c34:	30 91 12 01 	lds	r19, 0x0112
 c38:	82 17       	cp	r24, r18
 c3a:	93 07       	cpc	r25, r19
 c3c:	49 f1       	breq	.+82     	; 0xc90 <PSC_Task+0x68>
		
		duty_cycle = PSC.torque;
			
		if(duty_cycle>1000){
 c3e:	89 3e       	cpi	r24, 0xE9	; 233
 c40:	23 e0       	ldi	r18, 0x03	; 3
 c42:	92 07       	cpc	r25, r18
 c44:	28 f4       	brcc	.+10     	; 0xc50 <PSC_Task+0x28>
	static uint16_t torque_prev = 0;
	static uint16_t duty_cycle=0;
	
	if(PSC.torque != torque_prev){
		
		duty_cycle = PSC.torque;
 c46:	90 93 10 01 	sts	0x0110, r25
 c4a:	80 93 0f 01 	sts	0x010F, r24
 c4e:	06 c0       	rjmp	.+12     	; 0xc5c <PSC_Task+0x34>
			
		if(duty_cycle>1000){
			duty_cycle=1000;
 c50:	88 ee       	ldi	r24, 0xE8	; 232
 c52:	93 e0       	ldi	r25, 0x03	; 3
 c54:	90 93 10 01 	sts	0x0110, r25
 c58:	80 93 0f 01 	sts	0x010F, r24
		}
		
		POCR0RA = ((uint32_t)PSC_TOP*duty_cycle)/1000;
 c5c:	20 91 0f 01 	lds	r18, 0x010F
 c60:	30 91 10 01 	lds	r19, 0x0110
 c64:	af ef       	ldi	r26, 0xFF	; 255
 c66:	b7 e0       	ldi	r27, 0x07	; 7
 c68:	0e 94 17 07 	call	0xe2e	; 0xe2e <__umulhisi3>
 c6c:	28 ee       	ldi	r18, 0xE8	; 232
 c6e:	33 e0       	ldi	r19, 0x03	; 3
 c70:	40 e0       	ldi	r20, 0x00	; 0
 c72:	50 e0       	ldi	r21, 0x00	; 0
 c74:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodsi4>
 c78:	30 93 a3 00 	sts	0x00A3, r19
 c7c:	20 93 a2 00 	sts	0x00A2, r18
		
		torque_prev = PSC.torque;
 c80:	80 91 ae 01 	lds	r24, 0x01AE
 c84:	90 91 af 01 	lds	r25, 0x01AF
 c88:	90 93 12 01 	sts	0x0112, r25
 c8c:	80 93 11 01 	sts	0x0111, r24
 c90:	08 95       	ret

00000c92 <__vector_5>:
	
		 
}

//przerwanie od overcurrent
SIGNAL (PSC_FAULT_vect){
 c92:	1f 92       	push	r1
 c94:	0f 92       	push	r0
 c96:	0f b6       	in	r0, 0x3f	; 63
 c98:	0f 92       	push	r0
 c9a:	11 24       	eor	r1, r1
 c9c:	8f 93       	push	r24
 c9e:	ef 93       	push	r30
 ca0:	ff 93       	push	r31
	
	PSC_CLEAR_INTERRUPT
 ca2:	ec eb       	ldi	r30, 0xBC	; 188
 ca4:	f0 e0       	ldi	r31, 0x00	; 0
 ca6:	80 81       	ld	r24, Z
 ca8:	82 60       	ori	r24, 0x02	; 2
 caa:	80 83       	st	Z, r24
 cac:	ff 91       	pop	r31
 cae:	ef 91       	pop	r30
 cb0:	8f 91       	pop	r24
 cb2:	0f 90       	pop	r0
 cb4:	0f be       	out	0x3f, r0	; 63
 cb6:	0f 90       	pop	r0
 cb8:	1f 90       	pop	r1
 cba:	18 95       	reti

00000cbc <timer_init>:

void timer_init(void){ //real time clock

	//Timer0
	//CTC Mode
	TCCR0A |= (1<<WGM01);
 cbc:	84 b5       	in	r24, 0x24	; 36
 cbe:	82 60       	ori	r24, 0x02	; 2
 cc0:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;
 cc2:	89 ef       	ldi	r24, 0xF9	; 249
 cc4:	87 bd       	out	0x27, r24	; 39
	//w³aczenie zg³aszania przerwania przy przepe³nieniu
    TIMSK0 |= (1<<OCIE0A);
 cc6:	ee e6       	ldi	r30, 0x6E	; 110
 cc8:	f0 e0       	ldi	r31, 0x00	; 0
 cca:	80 81       	ld	r24, Z
 ccc:	82 60       	ori	r24, 0x02	; 2
 cce:	80 83       	st	Z, r24
	//Prescaler 64
	TCCR0B |= (0<<CS12)|(1<<CS11)|(1<<CS10);
 cd0:	85 b5       	in	r24, 0x25	; 37
 cd2:	83 60       	ori	r24, 0x03	; 3
 cd4:	85 bd       	out	0x25, r24	; 37
	
	//Timer1
	//w³¹czenie przerwania
	//TIMSK1 |= (1<<TOIE1);
	//Prescaler 64
	TCCR1B |= (0<<CS12)|(1<<CS11)|(1<<CS10);
 cd6:	e1 e8       	ldi	r30, 0x81	; 129
 cd8:	f0 e0       	ldi	r31, 0x00	; 0
 cda:	80 81       	ld	r24, Z
 cdc:	83 60       	ori	r24, 0x03	; 3
 cde:	80 83       	st	Z, r24
 ce0:	08 95       	ret

00000ce2 <timer_get>:
	return 1;	
};

//funkcja zwraca akutaln¹ wartoœc timera RTC
inline uint16_t timer_get(){
	return timer;
 ce2:	80 91 15 01 	lds	r24, 0x0115
 ce6:	90 91 16 01 	lds	r25, 0x0116
}
 cea:	08 95       	ret

00000cec <timer_time_elapsed>:
	return 1;	
};

//funkcja zwraca akutaln¹ wartoœc timera RTC
inline uint16_t timer_get(){
	return timer;
 cec:	20 91 15 01 	lds	r18, 0x0115
 cf0:	30 91 16 01 	lds	r19, 0x0116
//zwraca czas w ms jaki czas up³yn¹³ od wartoœci podanej jako argument (argument czas timera)
//Mierzy czas do 1 minuty!! potem siê przewija licznik!!
uint16_t timer_time_elapsed(uint16_t time_stamp){
	uint16_t current_timer=timer_get();
	
	if( current_timer >= time_stamp){
 cf4:	28 17       	cp	r18, r24
 cf6:	39 07       	cpc	r19, r25
 cf8:	28 f0       	brcs	.+10     	; 0xd04 <timer_time_elapsed+0x18>
		return (current_timer-time_stamp);
 cfa:	a9 01       	movw	r20, r18
 cfc:	48 1b       	sub	r20, r24
 cfe:	59 0b       	sbc	r21, r25
 d00:	ca 01       	movw	r24, r20
 d02:	08 95       	ret
	}
	else{
		return (current_timer+(0xFFFF-time_stamp));
 d04:	28 1b       	sub	r18, r24
 d06:	39 0b       	sbc	r19, r25
 d08:	c9 01       	movw	r24, r18
 d0a:	01 97       	sbiw	r24, 0x01	; 1
	}
};
 d0c:	08 95       	ret

00000d0e <timer_time_elapsed_us>:
}

//zwraca czas licznika liczy w 4us jednostkach
uint16_t timer_get_us(){
	//return (TCNT1H<<8 | TCNT1L);
	return TCNT1;
 d0e:	20 91 84 00 	lds	r18, 0x0084
 d12:	30 91 85 00 	lds	r19, 0x0085
//zwraca czas w 4us jaki czas up³yn¹³ od wartoœci podanej jako argument (argument czas timera)
//Mierzy czas do 262ms!! potem siê przewija licznik!!
uint16_t timer_time_elapsed_us(uint16_t time_stamp){
	uint16_t current_timer=timer_get_us();
	
	if( current_timer >= time_stamp){
 d16:	28 17       	cp	r18, r24
 d18:	39 07       	cpc	r19, r25
 d1a:	28 f0       	brcs	.+10     	; 0xd26 <timer_time_elapsed_us+0x18>
		return (current_timer-time_stamp);
 d1c:	a9 01       	movw	r20, r18
 d1e:	48 1b       	sub	r20, r24
 d20:	59 0b       	sbc	r21, r25
 d22:	ca 01       	movw	r24, r20
 d24:	08 95       	ret
	}
	else{
		return (current_timer+(0xFFFF-time_stamp));
 d26:	28 1b       	sub	r18, r24
 d28:	39 0b       	sbc	r19, r25
 d2a:	c9 01       	movw	r24, r18
 d2c:	01 97       	sbiw	r24, 0x01	; 1
	}
};
 d2e:	08 95       	ret

00000d30 <timer_new_tick>:
  
//funckje zwraca TRUE jeœli od jej ostatniego wywo³ania up³yne³o 7,8125ms
uint8_t timer_new_tick(void){
	static uint16_t time_stamp=0;

	if(timer_time_elapsed_us(time_stamp) < MAIN_LOOP_PERIOD){
 d30:	80 91 13 01 	lds	r24, 0x0113
 d34:	90 91 14 01 	lds	r25, 0x0114
 d38:	0e 94 87 06 	call	0xd0e	; 0xd0e <timer_time_elapsed_us>
 d3c:	49 97       	sbiw	r24, 0x19	; 25
 d3e:	50 f0       	brcs	.+20     	; 0xd54 <timer_new_tick+0x24>
}

//zwraca czas licznika liczy w 4us jednostkach
uint16_t timer_get_us(){
	//return (TCNT1H<<8 | TCNT1L);
	return TCNT1;
 d40:	80 91 84 00 	lds	r24, 0x0084
 d44:	90 91 85 00 	lds	r25, 0x0085

	if(timer_time_elapsed_us(time_stamp) < MAIN_LOOP_PERIOD){
		return 0;
	}
	
	time_stamp = timer_get_us();
 d48:	90 93 14 01 	sts	0x0114, r25
 d4c:	80 93 13 01 	sts	0x0113, r24
	return 1;	
 d50:	81 e0       	ldi	r24, 0x01	; 1
 d52:	08 95       	ret
//funckje zwraca TRUE jeœli od jej ostatniego wywo³ania up³yne³o 7,8125ms
uint8_t timer_new_tick(void){
	static uint16_t time_stamp=0;

	if(timer_time_elapsed_us(time_stamp) < MAIN_LOOP_PERIOD){
		return 0;
 d54:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	time_stamp = timer_get_us();
	return 1;	
};
 d56:	08 95       	ret

00000d58 <__vector_15>:
		return (time_2+(0xFFFF-time_1));
	}
};

//Przepe³nienie linika 0
SIGNAL(TIMER0_COMPA_vect) {
 d58:	1f 92       	push	r1
 d5a:	0f 92       	push	r0
 d5c:	0f b6       	in	r0, 0x3f	; 63
 d5e:	0f 92       	push	r0
 d60:	11 24       	eor	r1, r1
 d62:	8f 93       	push	r24
 d64:	9f 93       	push	r25
	//zwiêksz TIMER
	timer++;
 d66:	80 91 15 01 	lds	r24, 0x0115
 d6a:	90 91 16 01 	lds	r25, 0x0116
 d6e:	01 96       	adiw	r24, 0x01	; 1
 d70:	90 93 16 01 	sts	0x0116, r25
 d74:	80 93 15 01 	sts	0x0115, r24
}
 d78:	9f 91       	pop	r25
 d7a:	8f 91       	pop	r24
 d7c:	0f 90       	pop	r0
 d7e:	0f be       	out	0x3f, r0	; 63
 d80:	0f 90       	pop	r0
 d82:	1f 90       	pop	r1
 d84:	18 95       	reti

00000d86 <__vector_14>:

//Przepe³nienie linika 1
SIGNAL(TIMER1_OVF_vect){
 d86:	1f 92       	push	r1
 d88:	0f 92       	push	r0
 d8a:	0f b6       	in	r0, 0x3f	; 63
 d8c:	0f 92       	push	r0
 d8e:	11 24       	eor	r1, r1

}
 d90:	0f 90       	pop	r0
 d92:	0f be       	out	0x3f, r0	; 63
 d94:	0f 90       	pop	r0
 d96:	1f 90       	pop	r1
 d98:	18 95       	reti

00000d9a <__vector_12>:
//Comapare A Timer1
SIGNAL(TIMER1_COMPA_vect){
 d9a:	1f 92       	push	r1
 d9c:	0f 92       	push	r0
 d9e:	0f b6       	in	r0, 0x3f	; 63
 da0:	0f 92       	push	r0
 da2:	11 24       	eor	r1, r1
		
}
 da4:	0f 90       	pop	r0
 da6:	0f be       	out	0x3f, r0	; 63
 da8:	0f 90       	pop	r0
 daa:	1f 90       	pop	r1
 dac:	18 95       	reti

00000dae <__vector_13>:
//Comapare B Timer1
SIGNAL(TIMER1_COMPB_vect ){
 dae:	1f 92       	push	r1
 db0:	0f 92       	push	r0
 db2:	0f b6       	in	r0, 0x3f	; 63
 db4:	0f 92       	push	r0
 db6:	11 24       	eor	r1, r1
	
}
 db8:	0f 90       	pop	r0
 dba:	0f be       	out	0x3f, r0	; 63
 dbc:	0f 90       	pop	r0
 dbe:	1f 90       	pop	r1
 dc0:	18 95       	reti

00000dc2 <__divmodhi4>:
 dc2:	97 fb       	bst	r25, 7
 dc4:	07 2e       	mov	r0, r23
 dc6:	16 f4       	brtc	.+4      	; 0xdcc <__divmodhi4+0xa>
 dc8:	00 94       	com	r0
 dca:	07 d0       	rcall	.+14     	; 0xdda <__divmodhi4_neg1>
 dcc:	77 fd       	sbrc	r23, 7
 dce:	09 d0       	rcall	.+18     	; 0xde2 <__divmodhi4_neg2>
 dd0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__udivmodhi4>
 dd4:	07 fc       	sbrc	r0, 7
 dd6:	05 d0       	rcall	.+10     	; 0xde2 <__divmodhi4_neg2>
 dd8:	3e f4       	brtc	.+14     	; 0xde8 <__divmodhi4_exit>

00000dda <__divmodhi4_neg1>:
 dda:	90 95       	com	r25
 ddc:	81 95       	neg	r24
 dde:	9f 4f       	sbci	r25, 0xFF	; 255
 de0:	08 95       	ret

00000de2 <__divmodhi4_neg2>:
 de2:	70 95       	com	r23
 de4:	61 95       	neg	r22
 de6:	7f 4f       	sbci	r23, 0xFF	; 255

00000de8 <__divmodhi4_exit>:
 de8:	08 95       	ret

00000dea <__udivmodsi4>:
 dea:	a1 e2       	ldi	r26, 0x21	; 33
 dec:	1a 2e       	mov	r1, r26
 dee:	aa 1b       	sub	r26, r26
 df0:	bb 1b       	sub	r27, r27
 df2:	fd 01       	movw	r30, r26
 df4:	0d c0       	rjmp	.+26     	; 0xe10 <__udivmodsi4_ep>

00000df6 <__udivmodsi4_loop>:
 df6:	aa 1f       	adc	r26, r26
 df8:	bb 1f       	adc	r27, r27
 dfa:	ee 1f       	adc	r30, r30
 dfc:	ff 1f       	adc	r31, r31
 dfe:	a2 17       	cp	r26, r18
 e00:	b3 07       	cpc	r27, r19
 e02:	e4 07       	cpc	r30, r20
 e04:	f5 07       	cpc	r31, r21
 e06:	20 f0       	brcs	.+8      	; 0xe10 <__udivmodsi4_ep>
 e08:	a2 1b       	sub	r26, r18
 e0a:	b3 0b       	sbc	r27, r19
 e0c:	e4 0b       	sbc	r30, r20
 e0e:	f5 0b       	sbc	r31, r21

00000e10 <__udivmodsi4_ep>:
 e10:	66 1f       	adc	r22, r22
 e12:	77 1f       	adc	r23, r23
 e14:	88 1f       	adc	r24, r24
 e16:	99 1f       	adc	r25, r25
 e18:	1a 94       	dec	r1
 e1a:	69 f7       	brne	.-38     	; 0xdf6 <__udivmodsi4_loop>
 e1c:	60 95       	com	r22
 e1e:	70 95       	com	r23
 e20:	80 95       	com	r24
 e22:	90 95       	com	r25
 e24:	9b 01       	movw	r18, r22
 e26:	ac 01       	movw	r20, r24
 e28:	bd 01       	movw	r22, r26
 e2a:	cf 01       	movw	r24, r30
 e2c:	08 95       	ret

00000e2e <__umulhisi3>:
 e2e:	a2 9f       	mul	r26, r18
 e30:	b0 01       	movw	r22, r0
 e32:	b3 9f       	mul	r27, r19
 e34:	c0 01       	movw	r24, r0
 e36:	a3 9f       	mul	r26, r19
 e38:	70 0d       	add	r23, r0
 e3a:	81 1d       	adc	r24, r1
 e3c:	11 24       	eor	r1, r1
 e3e:	91 1d       	adc	r25, r1
 e40:	b2 9f       	mul	r27, r18
 e42:	70 0d       	add	r23, r0
 e44:	81 1d       	adc	r24, r1
 e46:	11 24       	eor	r1, r1
 e48:	91 1d       	adc	r25, r1
 e4a:	08 95       	ret

00000e4c <__usmulhisi3>:
 e4c:	0e 94 17 07 	call	0xe2e	; 0xe2e <__umulhisi3>

00000e50 <__usmulhisi3_tail>:
 e50:	b7 ff       	sbrs	r27, 7
 e52:	08 95       	ret
 e54:	82 1b       	sub	r24, r18
 e56:	93 0b       	sbc	r25, r19
 e58:	08 95       	ret

00000e5a <__udivmodhi4>:
 e5a:	aa 1b       	sub	r26, r26
 e5c:	bb 1b       	sub	r27, r27
 e5e:	51 e1       	ldi	r21, 0x11	; 17
 e60:	07 c0       	rjmp	.+14     	; 0xe70 <__udivmodhi4_ep>

00000e62 <__udivmodhi4_loop>:
 e62:	aa 1f       	adc	r26, r26
 e64:	bb 1f       	adc	r27, r27
 e66:	a6 17       	cp	r26, r22
 e68:	b7 07       	cpc	r27, r23
 e6a:	10 f0       	brcs	.+4      	; 0xe70 <__udivmodhi4_ep>
 e6c:	a6 1b       	sub	r26, r22
 e6e:	b7 0b       	sbc	r27, r23

00000e70 <__udivmodhi4_ep>:
 e70:	88 1f       	adc	r24, r24
 e72:	99 1f       	adc	r25, r25
 e74:	5a 95       	dec	r21
 e76:	a9 f7       	brne	.-22     	; 0xe62 <__udivmodhi4_loop>
 e78:	80 95       	com	r24
 e7a:	90 95       	com	r25
 e7c:	bc 01       	movw	r22, r24
 e7e:	cd 01       	movw	r24, r26
 e80:	08 95       	ret

00000e82 <_exit>:
 e82:	f8 94       	cli

00000e84 <__stop_program>:
 e84:	ff cf       	rjmp	.-2      	; 0xe84 <__stop_program>
