
Winch Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001ddc  00001e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ddc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000192  00800120  00800120  00001eb0  2**0
                  ALLOC
  3 .eeprom       00000024  00810000  00810000  00001eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f04  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000208  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000020ce  00000000  00000000  0000214c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ac8  00000000  00000000  0000421a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001c1a  00000000  00000000  00004ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000598  00000000  00000000  000068fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000099d  00000000  00000000  00006e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001054  00000000  00000000  00007831  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b0  00000000  00000000  00008885  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_5>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_12>
      34:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__vector_13>
      38:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__vector_14>
      3c:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__vector_15>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_18>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__vector_20>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_22>
      5c:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__vector_23>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_27>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	85 08       	sbc	r8, r5
      7e:	b3 08       	sbc	r11, r3
      80:	d7 08       	sbc	r13, r7
      82:	fb 08       	sbc	r15, r11
      84:	1f 09       	sbc	r17, r15
      86:	3b 09       	sbc	r19, r11
      88:	74 09       	sbc	r23, r4
      8a:	9d 09       	sbc	r25, r13
      8c:	25 0a       	sbc	r2, r21
      8e:	48 0a       	sbc	r4, r24
      90:	6b 0a       	sbc	r6, r27
      92:	8e 0a       	sbc	r8, r30
      94:	aa 0a       	sbc	r10, r26
      96:	eb 0a       	sbc	r14, r27
      98:	14 0b       	sbc	r17, r20

0000009a <__trampolines_end>:
      9a:	45 45       	sbci	r20, 0x55	; 85
      9c:	50 52       	subi	r21, 0x20	; 32
      9e:	4f 4d       	sbci	r20, 0xDF	; 223
      a0:	20 77       	andi	r18, 0x70	; 112
      a2:	72 69       	ori	r23, 0x92	; 146
      a4:	74 65       	ori	r23, 0x54	; 84
      a6:	20 66       	ori	r18, 0x60	; 96
      a8:	61 69       	ori	r22, 0x91	; 145
      aa:	6c 65       	ori	r22, 0x5C	; 92
      ac:	64 0a       	sbc	r6, r20
	...

000000af <__c.2056>:
      af:	45 45 50 52 4f 4d 20 77 72 69 74 65 20 43 52 43     EEPROM write CRC
      bf:	20 6d 69 73 73 6d 61 74 63 68 20 2d 20 72 65 74      missmatch - ret
      cf:	72 69 6e 67 0a 00                                   ring..

000000d5 <__c.2054>:
      d5:	45 45 50 52 4f 4d 20 77 72 69 74 65 20 6f 6b 0a     EEPROM write ok.
	...

000000e6 <__c.2037>:
      e6:	45 45 50 52 4f 4d 20 72 65 61 64 20 66 61 69 6c     EEPROM read fail
      f6:	65 64 0a 00                                         ed..

000000fa <__c.2032>:
      fa:	45 45 50 52 4f 4d 20 72 65 61 64 20 43 52 43 20     EEPROM read CRC 
     10a:	6d 69 73 73 6d 61 74 63 68 20 2d 20 72 65 74 72     missmatch - retr
     11a:	69 6e 67 0a 00                                      ing..

0000011f <__c.2030>:
     11f:	45 45 50 52 4f 4d 20 72 65 61 64 20 6f 6b 0a 00     EEPROM read ok..

0000012f <__c.2350>:
     12f:	4c 6f 61 64 69 6e 67 20 64 65 66 61 75 6c 74 20     Loading default 
     13f:	76 61 6c 75 65 73 00                                values.

00000146 <__c.2348>:
     146:	0a 00                                               ..

00000148 <__c.2346>:
     148:	46 65 62 20 31 39 20 32 30 31 37 00                 Feb 19 2017.

00000154 <__c.2344>:
     154:	57 69 6e 63 68 20 43 6f 6e 74 72 6f 6c 6c 65 72     Winch Controller
     164:	0a 43 6f 6d 70 69 6c 61 74 69 6f 6e 20 64 61 74     .Compilation dat
     174:	65 20 00 00                                         e ..

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d8 e0       	ldi	r29, 0x08	; 8
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	ec ed       	ldi	r30, 0xDC	; 220
     18c:	fd e1       	ldi	r31, 0x1D	; 29
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a0 32       	cpi	r26, 0x20	; 32
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	22 e0       	ldi	r18, 0x02	; 2
     19c:	a0 e2       	ldi	r26, 0x20	; 32
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a2 3b       	cpi	r26, 0xB2	; 178
     1a6:	b2 07       	cpc	r27, r18
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 22 05 	call	0xa44	; 0xa44 <main>
     1ae:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <ADC_switch>:
	
	adc_ready_to_send = 0;
}

void ADC_switch(uint8_t channel){
		ADMUX = (ADMUX & 0xF0) | (channel & ADMUX_MASK);
     1b6:	ec e7       	ldi	r30, 0x7C	; 124
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	90 81       	ld	r25, Z
     1bc:	8f 70       	andi	r24, 0x0F	; 15
     1be:	90 7f       	andi	r25, 0xF0	; 240
     1c0:	89 2b       	or	r24, r25
     1c2:	80 83       	st	Z, r24
     1c4:	08 95       	ret

000001c6 <ADC_init>:

void ADC_init(void){
	int8_t c;
	
	//Wybór Ÿród³a wyzwalania - 
	ADCSRB |= (1<<ADHSM) | (1<<AREFEN)| (0<<ADTS3) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
     1c6:	eb e7       	ldi	r30, 0x7B	; 123
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	80 6a       	ori	r24, 0xA0	; 160
     1ce:	80 83       	st	Z, r24
	// ADEN - aktywowanie ADC
	// ADATE - zewnêtrzne Ÿród³o wyzwalania
	// ADPSX - ustawienie preskalera 0 1 1 - clk/8 ->2Mhz
	// ADIE - aktywowanie przerwania
	// ADSC - start pomiaru
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (0<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1d0:	ea e7       	ldi	r30, 0x7A	; 122
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	8f 68       	ori	r24, 0x8F	; 143
     1d8:	80 83       	st	Z, r24
			
	// REFS1	REFS0
	// 0		0	-nap odniesienia z VREF
	// 1		1	-nap odniesienia z wew referencji
	// MUX2..0  -wybór wejscia przetwornika			
	ADMUX |= (0<<REFS1) | (1<<REFS0);
     1da:	ec e7       	ldi	r30, 0x7C	; 124
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	80 64       	ori	r24, 0x40	; 64
     1e2:	80 83       	st	Z, r24
	
	// init adc state struct
	adc_state.active_channel  = 0;
     1e4:	e7 ee       	ldi	r30, 0xE7	; 231
     1e6:	f1 e0       	ldi	r31, 0x01	; 1
     1e8:	11 82       	std	Z+1, r1	; 0x01
	adc_state.buffor_position = 0;
     1ea:	12 82       	std	Z+2, r1	; 0x02
	
	//translate index to ADC channel num
	channel_idx_to_num[ADC_CHANNEL_BOARD_POSITION]   = ADC_CHANNEL_BOARD_POSITION_NUM;
     1ec:	a8 ed       	ldi	r26, 0xD8	; 216
     1ee:	b1 e0       	ldi	r27, 0x01	; 1
     1f0:	84 e0       	ldi	r24, 0x04	; 4
     1f2:	12 96       	adiw	r26, 0x02	; 2
     1f4:	8c 93       	st	X, r24
     1f6:	12 97       	sbiw	r26, 0x02	; 2
	channel_idx_to_num[ADC_CHANNEL_VOLTAGE] = ADC_CHANNEL_VOLTAGE_NUM;
     1f8:	89 e0       	ldi	r24, 0x09	; 9
     1fa:	11 96       	adiw	r26, 0x01	; 1
     1fc:	8c 93       	st	X, r24
     1fe:	11 97       	sbiw	r26, 0x01	; 1
	channel_idx_to_num[ADC_CHANNEL_CURRENT] = ADC_CHANNEL_CURRENT_NUM;
     200:	8a e0       	ldi	r24, 0x0A	; 10
     202:	8c 93       	st	X, r24
	
	// init sum
	for( c = 0 ; c < ADC_MAX_CHANNEL ; c++ ){
		adc_state.sum[c] = 0;
     204:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <adc_state+0x5e>
     208:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <adc_state+0x5d>
     20c:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <adc_state+0x60>
     210:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <adc_state+0x5f>
     214:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <adc_state+0x62>
     218:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <adc_state+0x61>
	}

	// trun on first channel	
	ADC_switch(channel_idx_to_num[adc_state.active_channel]);
     21c:	e1 81       	ldd	r30, Z+1	; 0x01
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	e8 52       	subi	r30, 0x28	; 40
     222:	fe 4f       	sbci	r31, 0xFE	; 254
     224:	80 81       	ld	r24, Z
     226:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ADC_switch>
	
	adc_ready_to_send = 0;
     22a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <adc_ready_to_send>
     22e:	08 95       	ret

00000230 <ADC_start_conversion>:
void ADC_switch(uint8_t channel){
		ADMUX = (ADMUX & 0xF0) | (channel & ADMUX_MASK);
}

void ADC_start_conversion(){
	ADCSRA |= (1<<ADSC);
     230:	ea e7       	ldi	r30, 0x7A	; 122
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	80 64       	ori	r24, 0x40	; 64
     238:	80 83       	st	Z, r24
     23a:	08 95       	ret

0000023c <ADC_task>:
}

// ADC task function, called every loop in main_loop
void ADC_task(void){
     23c:	ef 92       	push	r14
     23e:	ff 92       	push	r15
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
	/* if we have new results */
	if( HAS_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED)) {
     248:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <adc_state>
     24c:	80 ff       	sbrs	r24, 0
     24e:	d3 c0       	rjmp	.+422    	; 0x3f6 <ADC_task+0x1ba>
		adc_results.raw_current = adc_state.sum[ADC_CHANNEL_CURRENT] / ADC_SAMPELS;
     250:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <adc_state+0x5d>
     254:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <adc_state+0x5e>
     258:	cf e0       	ldi	r28, 0x0F	; 15
     25a:	d0 e0       	ldi	r29, 0x00	; 0
     25c:	be 01       	movw	r22, r28
     25e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__divmodhi4>
     262:	fb 01       	movw	r30, r22
     264:	0f 2e       	mov	r0, r31
     266:	fb ed       	ldi	r31, 0xDB	; 219
     268:	ef 2e       	mov	r14, r31
     26a:	f1 e0       	ldi	r31, 0x01	; 1
     26c:	ff 2e       	mov	r15, r31
     26e:	f0 2d       	mov	r31, r0
     270:	d7 01       	movw	r26, r14
     272:	6d 93       	st	X+, r22
     274:	7c 93       	st	X, r23
		adc_results.raw_voltage = adc_state.sum[ADC_CHANNEL_VOLTAGE] / ADC_SAMPELS;
     276:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <adc_state+0x5f>
     27a:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <adc_state+0x60>
     27e:	be 01       	movw	r22, r28
     280:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__divmodhi4>
     284:	9b 01       	movw	r18, r22
     286:	d7 01       	movw	r26, r14
     288:	13 96       	adiw	r26, 0x03	; 3
     28a:	7c 93       	st	X, r23
     28c:	6e 93       	st	-X, r22
     28e:	12 97       	sbiw	r26, 0x02	; 2
		adc_results.raw_board_position   = adc_state.sum[ADC_CHANNEL_BOARD_POSITION]   / ADC_SAMPELS;		
     290:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <adc_state+0x61>
     294:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <adc_state+0x62>
     298:	be 01       	movw	r22, r28
     29a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__divmodhi4>
     29e:	8b 01       	movw	r16, r22
     2a0:	eb 01       	movw	r28, r22
     2a2:	d7 01       	movw	r26, r14
     2a4:	15 96       	adiw	r26, 0x05	; 5
     2a6:	7c 93       	st	X, r23
     2a8:	6e 93       	st	-X, r22
     2aa:	14 97       	sbiw	r26, 0x04	; 4
		
		/* voltage result */
		if((adc_results.raw_voltage + non_volatile_data.adc_voltage_offset) < 1024 && (non_volatile_data.adc_voltage_offset + adc_results.raw_voltage) > 0){
     2ac:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <non_volatile_data+0x8>
     2b0:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <non_volatile_data+0x9>
     2b4:	a9 01       	movw	r20, r18
     2b6:	48 0f       	add	r20, r24
     2b8:	59 1f       	adc	r21, r25
     2ba:	41 50       	subi	r20, 0x01	; 1
     2bc:	51 09       	sbc	r21, r1
     2be:	4f 3f       	cpi	r20, 0xFF	; 255
     2c0:	53 40       	sbci	r21, 0x03	; 3
     2c2:	20 f5       	brcc	.+72     	; 0x30c <ADC_task+0xd0>
			adc_results.voltage = ((((uint32_t)adc_results.raw_voltage + non_volatile_data.adc_voltage_offset))*non_volatile_data.adc_voltage_scale) / 1024;
     2c4:	a9 01       	movw	r20, r18
     2c6:	33 0f       	add	r19, r19
     2c8:	66 0b       	sbc	r22, r22
     2ca:	77 0b       	sbc	r23, r23
     2cc:	09 2e       	mov	r0, r25
     2ce:	00 0c       	add	r0, r0
     2d0:	aa 0b       	sbc	r26, r26
     2d2:	bb 0b       	sbc	r27, r27
     2d4:	9a 01       	movw	r18, r20
     2d6:	ab 01       	movw	r20, r22
     2d8:	28 0f       	add	r18, r24
     2da:	39 1f       	adc	r19, r25
     2dc:	4a 1f       	adc	r20, r26
     2de:	5b 1f       	adc	r21, r27
     2e0:	a0 91 54 02 	lds	r26, 0x0254	; 0x800254 <non_volatile_data+0xa>
     2e4:	b0 91 55 02 	lds	r27, 0x0255	; 0x800255 <non_volatile_data+0xb>
     2e8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__muluhisi3>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	07 2e       	mov	r0, r23
     2f2:	7a e0       	ldi	r23, 0x0A	; 10
     2f4:	b6 95       	lsr	r27
     2f6:	a7 95       	ror	r26
     2f8:	97 95       	ror	r25
     2fa:	87 95       	ror	r24
     2fc:	7a 95       	dec	r23
     2fe:	d1 f7       	brne	.-12     	; 0x2f4 <ADC_task+0xb8>
     300:	70 2d       	mov	r23, r0
     302:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <adc_results+0x9>
     306:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <adc_results+0x8>
     30a:	04 c0       	rjmp	.+8      	; 0x314 <ADC_task+0xd8>
		}
		else {
			adc_results.voltage = 0;
     30c:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <adc_results+0x9>
     310:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <adc_results+0x8>
		}
		
		/* current result */
		if(((adc_results.raw_current + non_volatile_data.adc_current_offset) < 1024) && ((non_volatile_data.adc_current_offset + adc_results.raw_current) > 0)){
     314:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <non_volatile_data+0x4>
     318:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <non_volatile_data+0x5>
     31c:	9f 01       	movw	r18, r30
     31e:	28 0f       	add	r18, r24
     320:	39 1f       	adc	r19, r25
     322:	21 50       	subi	r18, 0x01	; 1
     324:	31 09       	sbc	r19, r1
     326:	2f 3f       	cpi	r18, 0xFF	; 255
     328:	33 40       	sbci	r19, 0x03	; 3
     32a:	20 f5       	brcc	.+72     	; 0x374 <ADC_task+0x138>
			adc_results.current=((((uint32_t)adc_results.raw_current + non_volatile_data.adc_current_offset))*non_volatile_data.adc_current_scale) / 1024; //przeliczanie ADU na pr¹d (ADU*I_SCALE)/1024 i wyliczanie œredniej z poprzednim pomiarem
     32c:	af 01       	movw	r20, r30
     32e:	ff 0f       	add	r31, r31
     330:	66 0b       	sbc	r22, r22
     332:	77 0b       	sbc	r23, r23
     334:	09 2e       	mov	r0, r25
     336:	00 0c       	add	r0, r0
     338:	aa 0b       	sbc	r26, r26
     33a:	bb 0b       	sbc	r27, r27
     33c:	9a 01       	movw	r18, r20
     33e:	ab 01       	movw	r20, r22
     340:	28 0f       	add	r18, r24
     342:	39 1f       	adc	r19, r25
     344:	4a 1f       	adc	r20, r26
     346:	5b 1f       	adc	r21, r27
     348:	a0 91 50 02 	lds	r26, 0x0250	; 0x800250 <non_volatile_data+0x6>
     34c:	b0 91 51 02 	lds	r27, 0x0251	; 0x800251 <non_volatile_data+0x7>
     350:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__muluhisi3>
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	07 2e       	mov	r0, r23
     35a:	7a e0       	ldi	r23, 0x0A	; 10
     35c:	b6 95       	lsr	r27
     35e:	a7 95       	ror	r26
     360:	97 95       	ror	r25
     362:	87 95       	ror	r24
     364:	7a 95       	dec	r23
     366:	d1 f7       	brne	.-12     	; 0x35c <ADC_task+0x120>
     368:	70 2d       	mov	r23, r0
     36a:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <adc_results+0x7>
     36e:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <adc_results+0x6>
     372:	04 c0       	rjmp	.+8      	; 0x37c <ADC_task+0x140>
		} else {
			adc_results.current = 0;
     374:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <adc_results+0x7>
     378:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <adc_results+0x6>
		}
		
		/* board position result */
		if( adc_results.raw_board_position <= non_volatile_data.adc_board_position_min) {
     37c:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <non_volatile_data+0x2>
     380:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <non_volatile_data+0x3>
     384:	ec 17       	cp	r30, r28
     386:	fd 07       	cpc	r31, r29
     388:	28 f0       	brcs	.+10     	; 0x394 <ADC_task+0x158>
			adc_results.board_position = 0;
     38a:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <adc_results+0xb>
     38e:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <adc_results+0xa>
     392:	27 c0       	rjmp	.+78     	; 0x3e2 <ADC_task+0x1a6>
		} else if( adc_results.raw_board_position >= non_volatile_data.adc_board_position_max ) {
     394:	c0 91 4a 02 	lds	r28, 0x024A	; 0x80024a <non_volatile_data>
     398:	d0 91 4b 02 	lds	r29, 0x024B	; 0x80024b <non_volatile_data+0x1>
     39c:	0c 17       	cp	r16, r28
     39e:	1d 07       	cpc	r17, r29
     3a0:	38 f0       	brcs	.+14     	; 0x3b0 <ADC_task+0x174>
			adc_results.board_position = 100;
     3a2:	84 e6       	ldi	r24, 0x64	; 100
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <adc_results+0xb>
     3aa:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <adc_results+0xa>
     3ae:	19 c0       	rjmp	.+50     	; 0x3e2 <ADC_task+0x1a6>
		} else {
			adc_results.board_position = (((uint32_t)adc_results.raw_board_position - non_volatile_data.adc_board_position_min) * 100) / (non_volatile_data.adc_board_position_max - non_volatile_data.adc_board_position_min);
     3b0:	c8 01       	movw	r24, r16
     3b2:	11 0f       	add	r17, r17
     3b4:	aa 0b       	sbc	r26, r26
     3b6:	bb 0b       	sbc	r27, r27
     3b8:	9c 01       	movw	r18, r24
     3ba:	ad 01       	movw	r20, r26
     3bc:	2e 1b       	sub	r18, r30
     3be:	3f 0b       	sbc	r19, r31
     3c0:	41 09       	sbc	r20, r1
     3c2:	51 09       	sbc	r21, r1
     3c4:	a4 e6       	ldi	r26, 0x64	; 100
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__muluhisi3>
     3cc:	ce 1b       	sub	r28, r30
     3ce:	df 0b       	sbc	r29, r31
     3d0:	9e 01       	movw	r18, r28
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__udivmodsi4>
     3da:	30 93 e6 01 	sts	0x01E6, r19	; 0x8001e6 <adc_results+0xb>
     3de:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <adc_results+0xa>
		}
		
		adc_ready_to_send++;
     3e2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <adc_ready_to_send>
     3e6:	8f 5f       	subi	r24, 0xFF	; 255
     3e8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <adc_ready_to_send>
		/* clearing flag for conversion resulsts */
		CLEAR_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED);
     3ec:	e7 ee       	ldi	r30, 0xE7	; 231
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	80 81       	ld	r24, Z
     3f2:	8e 7f       	andi	r24, 0xFE	; 254
     3f4:	80 83       	st	Z, r24
	}
};
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	08 95       	ret

00000404 <__vector_27>:

// ADC conversion completed signal
SIGNAL(ADC_vect){
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	2f 93       	push	r18
     410:	3f 93       	push	r19
     412:	4f 93       	push	r20
     414:	5f 93       	push	r21
     416:	6f 93       	push	r22
     418:	7f 93       	push	r23
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	af 93       	push	r26
     420:	bf 93       	push	r27
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
	/* save result */
	
	/* removing old result from the sum */
	if( HAS_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF) ) {
     426:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <adc_state>
     42a:	81 ff       	sbrs	r24, 1
     42c:	21 c0       	rjmp	.+66     	; 0x470 <__vector_27+0x6c>
		adc_state.sum[adc_state.active_channel] -= adc_state.buffor[adc_state.active_channel][adc_state.buffor_position];
     42e:	a7 ee       	ldi	r26, 0xE7	; 231
     430:	b1 e0       	ldi	r27, 0x01	; 1
     432:	11 96       	adiw	r26, 0x01	; 1
     434:	ec 91       	ld	r30, X
     436:	11 97       	sbiw	r26, 0x01	; 1
     438:	12 96       	adiw	r26, 0x02	; 2
     43a:	8c 91       	ld	r24, X
     43c:	12 97       	sbiw	r26, 0x02	; 2
     43e:	9f e0       	ldi	r25, 0x0F	; 15
     440:	e9 9f       	mul	r30, r25
     442:	f0 01       	movw	r30, r0
     444:	11 24       	eor	r1, r1
     446:	e8 0f       	add	r30, r24
     448:	f1 1d       	adc	r31, r1
     44a:	ee 0f       	add	r30, r30
     44c:	ff 1f       	adc	r31, r31
     44e:	e9 51       	subi	r30, 0x19	; 25
     450:	fe 4f       	sbci	r31, 0xFE	; 254
     452:	23 81       	ldd	r18, Z+3	; 0x03
     454:	34 81       	ldd	r19, Z+4	; 0x04
     456:	11 96       	adiw	r26, 0x01	; 1
     458:	ec 91       	ld	r30, X
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	ec 5b       	subi	r30, 0xBC	; 188
     462:	fd 4f       	sbci	r31, 0xFD	; 253
     464:	80 81       	ld	r24, Z
     466:	91 81       	ldd	r25, Z+1	; 0x01
     468:	82 1b       	sub	r24, r18
     46a:	93 0b       	sbc	r25, r19
     46c:	91 83       	std	Z+1, r25	; 0x01
     46e:	80 83       	st	Z, r24
	}
	/* putting new result to the buffor */
	adc_state.buffor[adc_state.active_channel][adc_state.buffor_position] = ADC;
     470:	a7 ee       	ldi	r26, 0xE7	; 231
     472:	b1 e0       	ldi	r27, 0x01	; 1
     474:	11 96       	adiw	r26, 0x01	; 1
     476:	ec 91       	ld	r30, X
     478:	11 97       	sbiw	r26, 0x01	; 1
     47a:	12 96       	adiw	r26, 0x02	; 2
     47c:	9c 91       	ld	r25, X
     47e:	12 97       	sbiw	r26, 0x02	; 2
     480:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     484:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     488:	8f e0       	ldi	r24, 0x0F	; 15
     48a:	8e 9f       	mul	r24, r30
     48c:	f0 01       	movw	r30, r0
     48e:	11 24       	eor	r1, r1
     490:	e9 0f       	add	r30, r25
     492:	f1 1d       	adc	r31, r1
     494:	ee 0f       	add	r30, r30
     496:	ff 1f       	adc	r31, r31
     498:	e9 51       	subi	r30, 0x19	; 25
     49a:	fe 4f       	sbci	r31, 0xFE	; 254
     49c:	34 83       	std	Z+4, r19	; 0x04
     49e:	23 83       	std	Z+3, r18	; 0x03
	/* adding new result to sum */
	adc_state.sum[adc_state.active_channel] += adc_state.buffor[adc_state.active_channel][adc_state.buffor_position];
     4a0:	11 96       	adiw	r26, 0x01	; 1
     4a2:	ec 91       	ld	r30, X
     4a4:	11 97       	sbiw	r26, 0x01	; 1
     4a6:	12 96       	adiw	r26, 0x02	; 2
     4a8:	9c 91       	ld	r25, X
     4aa:	12 97       	sbiw	r26, 0x02	; 2
     4ac:	8e 9f       	mul	r24, r30
     4ae:	f0 01       	movw	r30, r0
     4b0:	11 24       	eor	r1, r1
     4b2:	e9 0f       	add	r30, r25
     4b4:	f1 1d       	adc	r31, r1
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	e9 51       	subi	r30, 0x19	; 25
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	83 81       	ldd	r24, Z+3	; 0x03
     4c0:	94 81       	ldd	r25, Z+4	; 0x04
     4c2:	11 96       	adiw	r26, 0x01	; 1
     4c4:	ec 91       	ld	r30, X
     4c6:	11 97       	sbiw	r26, 0x01	; 1
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	ec 5b       	subi	r30, 0xBC	; 188
     4d0:	fd 4f       	sbci	r31, 0xFD	; 253
     4d2:	20 81       	ld	r18, Z
     4d4:	31 81       	ldd	r19, Z+1	; 0x01
     4d6:	82 0f       	add	r24, r18
     4d8:	93 1f       	adc	r25, r19
     4da:	91 83       	std	Z+1, r25	; 0x01
     4dc:	80 83       	st	Z, r24
	
	/* inc channel position counters */
	if( ++adc_state.active_channel == ADC_MAX_CHANNEL) {
     4de:	11 96       	adiw	r26, 0x01	; 1
     4e0:	8c 91       	ld	r24, X
     4e2:	11 97       	sbiw	r26, 0x01	; 1
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	11 96       	adiw	r26, 0x01	; 1
     4e8:	8c 93       	st	X, r24
     4ea:	11 97       	sbiw	r26, 0x01	; 1
     4ec:	83 30       	cpi	r24, 0x03	; 3
     4ee:	a1 f4       	brne	.+40     	; 0x518 <__vector_27+0x114>
		/* we checked all channels, starting from the begging */
		adc_state.active_channel = 0;
     4f0:	fd 01       	movw	r30, r26
     4f2:	11 82       	std	Z+1, r1	; 0x01
		/* reseting buffer position */
		if( ++adc_state.buffor_position == ADC_SAMPELS ){
     4f4:	82 81       	ldd	r24, Z+2	; 0x02
     4f6:	8f 5f       	subi	r24, 0xFF	; 255
     4f8:	82 83       	std	Z+2, r24	; 0x02
     4fa:	8f 30       	cpi	r24, 0x0F	; 15
     4fc:	21 f4       	brne	.+8      	; 0x506 <__vector_27+0x102>
			/* we filled whole buffor, starting from the begging */
			adc_state.buffor_position = 0;
     4fe:	12 82       	std	Z+2, r1	; 0x02
			// setting flag that buffor is full (you can read results)
			SET_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF);
     500:	80 81       	ld	r24, Z
     502:	82 60       	ori	r24, 0x02	; 2
     504:	80 83       	st	Z, r24
		}
		/* setting flag that there is new result ready */
		if( HAS_FLAG(adc_state.flags, ADC_FLAG_HAS_FULL_BUFF) ) {
     506:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <adc_state>
     50a:	81 ff       	sbrs	r24, 1
     50c:	05 c0       	rjmp	.+10     	; 0x518 <__vector_27+0x114>
			SET_FLAG(adc_state.flags, ADC_FLAG_CONV_COMPLETED);
     50e:	e7 ee       	ldi	r30, 0xE7	; 231
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	80 81       	ld	r24, Z
     514:	81 60       	ori	r24, 0x01	; 1
     516:	80 83       	st	Z, r24
		}
	}
	/* switching active channel */
	ADC_switch(channel_idx_to_num[adc_state.active_channel]);
     518:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <adc_state+0x1>
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	e8 52       	subi	r30, 0x28	; 40
     520:	fe 4f       	sbci	r31, 0xFE	; 254
     522:	80 81       	ld	r24, Z
     524:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ADC_switch>
	/* starting conversion */
	ADC_start_conversion();	
     528:	0e 94 18 01 	call	0x230	; 0x230 <ADC_start_conversion>
};
     52c:	ff 91       	pop	r31
     52e:	ef 91       	pop	r30
     530:	bf 91       	pop	r27
     532:	af 91       	pop	r26
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	7f 91       	pop	r23
     53a:	6f 91       	pop	r22
     53c:	5f 91       	pop	r21
     53e:	4f 91       	pop	r20
     540:	3f 91       	pop	r19
     542:	2f 91       	pop	r18
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <eeprom_read>:

struct eeprom_struct EEMEM eeprom_data;
struct eeprom_struct non_volatile_data;

uint8_t eeprom_read(void)
{
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
	uint16_t crc = 0xFFFF;
	uint8_t *ptr = (uint8_t *) &non_volatile_data; //wskaŸnik na struktur¹ rzutujemy na zmienn¹ jednobajtow¹ ¿eby móc siê przesuwaæ co bajt przy liczeniu CRC
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     556:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     558:	f8 94       	cli
		eeprom_read_block(&non_volatile_data, &eeprom_data, sizeof(struct eeprom_struct));
     55a:	44 e2       	ldi	r20, 0x24	; 36
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	8a e4       	ldi	r24, 0x4A	; 74
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <eeprom_read_block>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     56a:	cf bf       	out	0x3f, r28	; 63
struct eeprom_struct non_volatile_data;

uint8_t eeprom_read(void)
{
	uint16_t crc = 0xFFFF;
	uint8_t *ptr = (uint8_t *) &non_volatile_data; //wskaŸnik na struktur¹ rzutujemy na zmienn¹ jednobajtow¹ ¿eby móc siê przesuwaæ co bajt przy liczeniu CRC
     56c:	0a e4       	ldi	r16, 0x4A	; 74
     56e:	12 e0       	ldi	r17, 0x02	; 2
struct eeprom_struct EEMEM eeprom_data;
struct eeprom_struct non_volatile_data;

uint8_t eeprom_read(void)
{
	uint16_t crc = 0xFFFF;
     570:	cf ef       	ldi	r28, 0xFF	; 255
     572:	df ef       	ldi	r29, 0xFF	; 255
     574:	2b c0       	rjmp	.+86     	; 0x5cc <eeprom_read+0x7e>
		eeprom_read_block(&non_volatile_data, &eeprom_data, sizeof(struct eeprom_struct));
	}
	for(uint8_t i=0; i < EEPROM_READ_RETRIES ; i++){
		//liczymy crc z ca³ej struktury razem z crc które by³o zapisane, jeœli siê zgadza to wyliczone crc wyjdzie 0!
		for(uint8_t i=0; i < sizeof(non_volatile_data); i++){
			crc = _crc16_update(crc, *ptr++ );
     576:	81 91       	ld	r24, Z+
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     578:	c8 27       	eor	r28, r24
     57a:	8c 2f       	mov	r24, r28
     57c:	82 95       	swap	r24
     57e:	8c 27       	eor	r24, r28
     580:	08 2e       	mov	r0, r24
     582:	86 95       	lsr	r24
     584:	86 95       	lsr	r24
     586:	80 25       	eor	r24, r0
     588:	08 2e       	mov	r0, r24
     58a:	86 95       	lsr	r24
     58c:	80 25       	eor	r24, r0
     58e:	87 70       	andi	r24, 0x07	; 7
     590:	0c 2e       	mov	r0, r28
     592:	cd 2f       	mov	r28, r29
     594:	86 95       	lsr	r24
     596:	07 94       	ror	r0
     598:	87 95       	ror	r24
     59a:	d0 2d       	mov	r29, r0
     59c:	c8 27       	eor	r28, r24
     59e:	06 94       	lsr	r0
     5a0:	87 95       	ror	r24
     5a2:	d0 25       	eor	r29, r0
     5a4:	c8 27       	eor	r28, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		eeprom_read_block(&non_volatile_data, &eeprom_data, sizeof(struct eeprom_struct));
	}
	for(uint8_t i=0; i < EEPROM_READ_RETRIES ; i++){
		//liczymy crc z ca³ej struktury razem z crc które by³o zapisane, jeœli siê zgadza to wyliczone crc wyjdzie 0!
		for(uint8_t i=0; i < sizeof(non_volatile_data); i++){
     5a6:	e2 17       	cp	r30, r18
     5a8:	f3 07       	cpc	r31, r19
     5aa:	29 f7       	brne	.-54     	; 0x576 <eeprom_read+0x28>
			crc = _crc16_update(crc, *ptr++ );
		}
		//jeœli crc 0 to odczyt ok
		if(crc == 0){
     5ac:	20 97       	sbiw	r28, 0x00	; 0
     5ae:	31 f4       	brne	.+12     	; 0x5bc <eeprom_read+0x6e>
			uart_puts_P("EEPROM read ok\n");
     5b0:	8f e1       	ldi	r24, 0x1F	; 31
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <uart_puts_p>
			return EEPROM_OK;
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	12 c0       	rjmp	.+36     	; 0x5e0 <eeprom_read+0x92>
		}
		uart_puts_P("EEPROM read CRC missmatch - retring\n");
     5bc:	8a ef       	ldi	r24, 0xFA	; 250
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <uart_puts_p>
	uint8_t *ptr = (uint8_t *) &non_volatile_data; //wskaŸnik na struktur¹ rzutujemy na zmienn¹ jednobajtow¹ ¿eby móc siê przesuwaæ co bajt przy liczeniu CRC
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		eeprom_read_block(&non_volatile_data, &eeprom_data, sizeof(struct eeprom_struct));
	}
	for(uint8_t i=0; i < EEPROM_READ_RETRIES ; i++){
     5c4:	82 e0       	ldi	r24, 0x02	; 2
     5c6:	06 3b       	cpi	r16, 0xB6	; 182
     5c8:	18 07       	cpc	r17, r24
     5ca:	29 f0       	breq	.+10     	; 0x5d6 <eeprom_read+0x88>
     5cc:	f8 01       	movw	r30, r16
     5ce:	0c 5d       	subi	r16, 0xDC	; 220
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	98 01       	movw	r18, r16
     5d4:	d0 cf       	rjmp	.-96     	; 0x576 <eeprom_read+0x28>
			uart_puts_P("EEPROM read ok\n");
			return EEPROM_OK;
		}
		uart_puts_P("EEPROM read CRC missmatch - retring\n");
	}
	uart_puts_P("EEPROM read failed\n");
     5d6:	86 ee       	ldi	r24, 0xE6	; 230
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <uart_puts_p>
	return EEPROM_ERROR;
     5de:	81 e0       	ldi	r24, 0x01	; 1
}
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	08 95       	ret

000005ea <eeprom_write>:

uint8_t eeprom_write(void)
{
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	ea e4       	ldi	r30, 0x4A	; 74
     5f0:	f2 e0       	ldi	r31, 0x02	; 2
     5f2:	4c e6       	ldi	r20, 0x6C	; 108
     5f4:	52 e0       	ldi	r21, 0x02	; 2
	uint16_t crc = 0xFFFF;
     5f6:	2f ef       	ldi	r18, 0xFF	; 255
     5f8:	3f ef       	ldi	r19, 0xFF	; 255
	uint8_t *ptr = (uint8_t *) &non_volatile_data; //wskaŸnik na struktur¹ rzutujemy na zmienn¹ jednobajtow¹ ¿eby móc siê przesuwaæ co bajt przy liczeniu CRC
	
	//liczymy crc z ca³ej struktury bez dwóch ostatnich bajtów którymi jest suma crc
	for(uint8_t i=0; i < (sizeof(non_volatile_data)-2); i++){
		crc = _crc16_update(crc, *ptr++ );
     5fa:	81 91       	ld	r24, Z+
     5fc:	28 27       	eor	r18, r24
     5fe:	82 2f       	mov	r24, r18
     600:	82 95       	swap	r24
     602:	82 27       	eor	r24, r18
     604:	08 2e       	mov	r0, r24
     606:	86 95       	lsr	r24
     608:	86 95       	lsr	r24
     60a:	80 25       	eor	r24, r0
     60c:	08 2e       	mov	r0, r24
     60e:	86 95       	lsr	r24
     610:	80 25       	eor	r24, r0
     612:	87 70       	andi	r24, 0x07	; 7
     614:	02 2e       	mov	r0, r18
     616:	23 2f       	mov	r18, r19
     618:	86 95       	lsr	r24
     61a:	07 94       	ror	r0
     61c:	87 95       	ror	r24
     61e:	30 2d       	mov	r19, r0
     620:	28 27       	eor	r18, r24
     622:	06 94       	lsr	r0
     624:	87 95       	ror	r24
     626:	30 25       	eor	r19, r0
     628:	28 27       	eor	r18, r24
{
	uint16_t crc = 0xFFFF;
	uint8_t *ptr = (uint8_t *) &non_volatile_data; //wskaŸnik na struktur¹ rzutujemy na zmienn¹ jednobajtow¹ ¿eby móc siê przesuwaæ co bajt przy liczeniu CRC
	
	//liczymy crc z ca³ej struktury bez dwóch ostatnich bajtów którymi jest suma crc
	for(uint8_t i=0; i < (sizeof(non_volatile_data)-2); i++){
     62a:	e4 17       	cp	r30, r20
     62c:	f5 07       	cpc	r31, r21
     62e:	29 f7       	brne	.-54     	; 0x5fa <eeprom_write+0x10>
		crc = _crc16_update(crc, *ptr++ );
	}
	//wpisujemy crc na ostatni¹ pozycjê
	non_volatile_data.crc = crc;
     630:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <non_volatile_data+0x23>
     634:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <non_volatile_data+0x22>
     638:	c2 e0       	ldi	r28, 0x02	; 2
	
	for(uint8_t i=0; i < EEPROM_WRITE_RETRIES ; i++){
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     63a:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     63c:	f8 94       	cli
			eeprom_write_block(&non_volatile_data, &eeprom_data, sizeof(struct eeprom_struct));
     63e:	44 e2       	ldi	r20, 0x24	; 36
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	8a e4       	ldi	r24, 0x4A	; 74
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <eeprom_write_block>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     64e:	df bf       	out	0x3f, r29	; 63
		}
		if (eeprom_read() == EEPROM_OK){ //sprawdzamy czy zapis siê powiód³
     650:	0e 94 a7 02 	call	0x54e	; 0x54e <eeprom_read>
     654:	d8 2f       	mov	r29, r24
     656:	81 11       	cpse	r24, r1
     658:	05 c0       	rjmp	.+10     	; 0x664 <eeprom_write+0x7a>
			uart_puts_P("EEPROM write ok\n");
     65a:	85 ed       	ldi	r24, 0xD5	; 213
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <uart_puts_p>
			return EEPROM_OK;
     662:	0b c0       	rjmp	.+22     	; 0x67a <eeprom_write+0x90>
		}
		uart_puts_P("EEPROM write CRC missmatch - retring\n");
     664:	8f ea       	ldi	r24, 0xAF	; 175
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <uart_puts_p>
     66c:	c1 50       	subi	r28, 0x01	; 1
		crc = _crc16_update(crc, *ptr++ );
	}
	//wpisujemy crc na ostatni¹ pozycjê
	non_volatile_data.crc = crc;
	
	for(uint8_t i=0; i < EEPROM_WRITE_RETRIES ; i++){
     66e:	29 f7       	brne	.-54     	; 0x63a <eeprom_write+0x50>
			uart_puts_P("EEPROM write ok\n");
			return EEPROM_OK;
		}
		uart_puts_P("EEPROM write CRC missmatch - retring\n");
	}
	uart_puts_P("EEPROM write failed\n");
     670:	8a e9       	ldi	r24, 0x9A	; 154
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <uart_puts_p>
	return EEPROM_ERROR;
     678:	d1 e0       	ldi	r29, 0x01	; 1
	
}
     67a:	8d 2f       	mov	r24, r29
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <eeprom_restore_defaults>:

void eeprom_restore_defaults(void){
	
	non_volatile_data.adc_board_position_max = ADC_BOARD_POSITION_MAX;
     682:	ea e4       	ldi	r30, 0x4A	; 74
     684:	f2 e0       	ldi	r31, 0x02	; 2
     686:	85 ed       	ldi	r24, 0xD5	; 213
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	80 83       	st	Z, r24
	non_volatile_data.adc_board_position_min = ADC_BOARD_POSITION_MIN;
     68e:	87 e0       	ldi	r24, 0x07	; 7
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	93 83       	std	Z+3, r25	; 0x03
     694:	82 83       	std	Z+2, r24	; 0x02
	
	non_volatile_data.adc_current_offset = ADC_CURRENT_OFFSET;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	9e ef       	ldi	r25, 0xFE	; 254
     69a:	95 83       	std	Z+5, r25	; 0x05
     69c:	84 83       	std	Z+4, r24	; 0x04
	non_volatile_data.adc_current_scale = ADC_CURRENT_SCALE;
     69e:	80 e2       	ldi	r24, 0x20	; 32
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	97 83       	std	Z+7, r25	; 0x07
     6a4:	86 83       	std	Z+6, r24	; 0x06
	
	//0x2003
	non_volatile_data.adc_voltage_offset = ADC_VOLTAGE_OFFSET;
     6a6:	87 e8       	ldi	r24, 0x87	; 135
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	91 87       	std	Z+9, r25	; 0x09
     6ac:	80 87       	std	Z+8, r24	; 0x08
	non_volatile_data.adc_voltage_scale = ADC_VOLTAGE_SCALE;
     6ae:	8a ea       	ldi	r24, 0xAA	; 170
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	93 87       	std	Z+11, r25	; 0x0b
     6b4:	82 87       	std	Z+10, r24	; 0x0a
	//0x2004
	non_volatile_data.winch_overcurrent_value = OVERCURRENT_WINCH;
     6b6:	88 e6       	ldi	r24, 0x68	; 104
     6b8:	84 87       	std	Z+12, r24	; 0x0c
	non_volatile_data.board_overcurrent_value = OVERCURRENT_BOARD;
     6ba:	82 e3       	ldi	r24, 0x32	; 50
     6bc:	85 87       	std	Z+13, r24	; 0x0d
	//0x2005
	non_volatile_data.torque_init_val_winch_up = TORQUE_INIT_VAL_WINCH_UP;
     6be:	88 e5       	ldi	r24, 0x58	; 88
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	97 87       	std	Z+15, r25	; 0x0f
     6c4:	86 87       	std	Z+14, r24	; 0x0e
	non_volatile_data.torque_init_val_winch_down = TORQUE_INIT_VAL_WINCH_DOWN;
     6c6:	88 ec       	ldi	r24, 0xC8	; 200
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	91 8b       	std	Z+17, r25	; 0x11
     6cc:	80 8b       	std	Z+16, r24	; 0x10
	non_volatile_data.torque_init_val_board_up = TORQUE_INIT_VAL_BOARD_UP;
     6ce:	82 ec       	ldi	r24, 0xC2	; 194
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	93 8b       	std	Z+19, r25	; 0x13
     6d4:	82 8b       	std	Z+18, r24	; 0x12
	non_volatile_data.torque_init_val_board_down = TORQUE_INIT_VAL_BOARD_DOWN;
     6d6:	95 8b       	std	Z+21, r25	; 0x15
     6d8:	84 8b       	std	Z+20, r24	; 0x14
	//0x2006
	non_volatile_data.torque_rising_speed_period_winch_up = TORQUE_RISING_SPEED_PERIOD_WINCH_UP;
     6da:	89 e1       	ldi	r24, 0x19	; 25
     6dc:	86 8b       	std	Z+22, r24	; 0x16
	non_volatile_data.torque_rising_speed_period_winch_down = TORQUE_RISING_SPEED_PERIOD_WINCH_DOWN;
     6de:	87 8b       	std	Z+23, r24	; 0x17
	non_volatile_data.torque_rising_speed_period_board_up = TORQUE_RISING_SPEED_PERIOD_BOARD_UP;
     6e0:	80 8f       	std	Z+24, r24	; 0x18
	non_volatile_data.torque_rising_speed_period_board_down = TORQUE_RISING_SPEED_PERIOD_BOARD_DOWN;
     6e2:	81 8f       	std	Z+25, r24	; 0x19
	//0x2007
	non_volatile_data.torque_rising_speed_winch_up = TORQUE_RISING_SPEED_PERIOD_WINCH_UP;
     6e4:	89 e1       	ldi	r24, 0x19	; 25
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	93 8f       	std	Z+27, r25	; 0x1b
     6ea:	82 8f       	std	Z+26, r24	; 0x1a
	non_volatile_data.torque_rising_speed_winch_down = TORQUE_RISING_SPEED_PERIOD_WINCH_DOWN;
     6ec:	95 8f       	std	Z+29, r25	; 0x1d
     6ee:	84 8f       	std	Z+28, r24	; 0x1c
	non_volatile_data.torque_rising_speed_board_up = TORQUE_RISING_SPEED_PERIOD_BOARD_UP;
     6f0:	97 8f       	std	Z+31, r25	; 0x1f
     6f2:	86 8f       	std	Z+30, r24	; 0x1e
	non_volatile_data.torque_rising_speed_board_down = TORQUE_RISING_SPEED_PERIOD_BOARD_DOWN;
     6f4:	91 a3       	std	Z+33, r25	; 0x21
     6f6:	80 a3       	std	Z+32, r24	; 0x20
     6f8:	08 95       	ret

000006fa <main_loop>:
		}
};

void LEDs_OFF(void){
	LED_0_OFF;
	LED_1_OFF;
     6fa:	0e 94 1e 01 	call	0x23c	; 0x23c <ADC_task>
     6fe:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <PSC_Task>
     702:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <winch_status>
     706:	e0 e7       	ldi	r30, 0x70	; 112
     708:	f2 e0       	ldi	r31, 0x02	; 2
     70a:	83 83       	std	Z+3, r24	; 0x03
     70c:	83 b1       	in	r24, 0x03	; 3
     70e:	80 72       	andi	r24, 0x20	; 32
     710:	84 83       	std	Z+4, r24	; 0x04
     712:	ab ed       	ldi	r26, 0xDB	; 219
     714:	b1 e0       	ldi	r27, 0x01	; 1
     716:	16 96       	adiw	r26, 0x06	; 6
     718:	8c 91       	ld	r24, X
     71a:	16 97       	sbiw	r26, 0x06	; 6
     71c:	80 83       	st	Z, r24
     71e:	1a 96       	adiw	r26, 0x0a	; 10
     720:	8c 91       	ld	r24, X
     722:	1a 97       	sbiw	r26, 0x0a	; 10
     724:	81 83       	std	Z+1, r24	; 0x01
     726:	18 96       	adiw	r26, 0x08	; 8
     728:	8c 91       	ld	r24, X
     72a:	18 97       	sbiw	r26, 0x08	; 8
     72c:	82 83       	std	Z+2, r24	; 0x02
     72e:	14 96       	adiw	r26, 0x04	; 4
     730:	8d 91       	ld	r24, X+
     732:	9c 91       	ld	r25, X
     734:	15 97       	sbiw	r26, 0x05	; 5
     736:	97 83       	std	Z+7, r25	; 0x07
     738:	86 83       	std	Z+6, r24	; 0x06
     73a:	8d 91       	ld	r24, X+
     73c:	9c 91       	ld	r25, X
     73e:	91 87       	std	Z+9, r25	; 0x09
     740:	80 87       	std	Z+8, r24	; 0x08
     742:	0e 94 6d 08 	call	0x10da	; 0x10da <CAN_task>
     746:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     74a:	82 30       	cpi	r24, 0x02	; 2
     74c:	21 f0       	breq	.+8      	; 0x756 <main_loop+0x5c>
     74e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	31 f4       	brne	.+12     	; 0x762 <main_loop+0x68>
     756:	1d 99       	sbic	0x03, 5	; 3
     758:	02 c0       	rjmp	.+4      	; 0x75e <main_loop+0x64>
     75a:	2c 9a       	sbi	0x05, 4	; 5
     75c:	09 c0       	rjmp	.+18     	; 0x770 <main_loop+0x76>
     75e:	2c 98       	cbi	0x05, 4	; 5
     760:	07 c0       	rjmp	.+14     	; 0x770 <main_loop+0x76>
     762:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     766:	83 30       	cpi	r24, 0x03	; 3
     768:	11 f4       	brne	.+4      	; 0x76e <main_loop+0x74>
     76a:	2c 9a       	sbi	0x05, 4	; 5
     76c:	01 c0       	rjmp	.+2      	; 0x770 <main_loop+0x76>
     76e:	2c 98       	cbi	0x05, 4	; 5
     770:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	09 f4       	brne	.+2      	; 0x77a <main_loop+0x80>
     778:	25 c1       	rjmp	.+586    	; 0x9c4 <__stack+0xc5>
     77a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     77e:	88 23       	and	r24, r24
     780:	09 f4       	brne	.+2      	; 0x784 <main_loop+0x8a>
     782:	20 c1       	rjmp	.+576    	; 0x9c4 <__stack+0xc5>
     784:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     788:	82 30       	cpi	r24, 0x02	; 2
     78a:	29 f0       	breq	.+10     	; 0x796 <main_loop+0x9c>
     78c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	09 f0       	breq	.+2      	; 0x796 <main_loop+0x9c>
     794:	17 c1       	rjmp	.+558    	; 0x9c4 <__stack+0xc5>
     796:	1d 9b       	sbis	0x03, 5	; 3
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <main_loop+0xa8>
     79a:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <non_volatile_data+0xc>
     79e:	88 23       	and	r24, r24
     7a0:	31 f0       	breq	.+12     	; 0x7ae <main_loop+0xb4>
     7a2:	1d 99       	sbic	0x03, 5	; 3
     7a4:	12 c0       	rjmp	.+36     	; 0x7ca <main_loop+0xd0>
     7a6:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <non_volatile_data+0xd>
     7aa:	81 11       	cpse	r24, r1
     7ac:	0e c0       	rjmp	.+28     	; 0x7ca <main_loop+0xd0>
     7ae:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <winch_timer>
     7b2:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <winch_timer+0x1>
     7b6:	0e 94 ce 0c 	call	0x199c	; 0x199c <timer_time_elapsed>
     7ba:	8b 34       	cpi	r24, 0x4B	; 75
     7bc:	91 05       	cpc	r25, r1
     7be:	28 f0       	brcs	.+10     	; 0x7ca <main_loop+0xd0>
     7c0:	83 e0       	ldi	r24, 0x03	; 3
     7c2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <winch_state>
     7c6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <Disable_PSC>
     7ca:	0e 94 c9 0c 	call	0x1992	; 0x1992 <timer_get>
     7ce:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <life_timer+0x1>
     7d2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <life_timer>
     7d6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <winch_status>
     7da:	81 11       	cpse	r24, r1
     7dc:	10 c0       	rjmp	.+32     	; 0x7fe <main_loop+0x104>
     7de:	0e 94 c9 0c 	call	0x1992	; 0x1992 <timer_get>
     7e2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     7e6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
     7ea:	0e 94 c9 0c 	call	0x1992	; 0x1992 <timer_get>
     7ee:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <winch_timer+0x1>
     7f2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <winch_timer>
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <winch_status>
     7fc:	08 95       	ret
     7fe:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <winch_status>
     802:	81 30       	cpi	r24, 0x01	; 1
     804:	09 f0       	breq	.+2      	; 0x808 <main_loop+0x10e>
     806:	55 c0       	rjmp	.+170    	; 0x8b2 <main_loop+0x1b8>
     808:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     80c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
     810:	0e 94 ce 0c 	call	0x199c	; 0x199c <timer_time_elapsed>
     814:	0f 97       	sbiw	r24, 0x0f	; 15
     816:	08 f4       	brcc	.+2      	; 0x81a <main_loop+0x120>
     818:	d5 c0       	rjmp	.+426    	; 0x9c4 <__stack+0xc5>
     81a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	61 f4       	brne	.+24     	; 0x83a <main_loop+0x140>
     822:	1d 9b       	sbis	0x03, 5	; 3
     824:	05 c0       	rjmp	.+10     	; 0x830 <main_loop+0x136>
     826:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <non_volatile_data+0xe>
     82a:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <non_volatile_data+0xf>
     82e:	10 c0       	rjmp	.+32     	; 0x850 <main_loop+0x156>
     830:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <non_volatile_data+0x12>
     834:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <non_volatile_data+0x13>
     838:	0b c0       	rjmp	.+22     	; 0x850 <main_loop+0x156>
     83a:	1d 9b       	sbis	0x03, 5	; 3
     83c:	05 c0       	rjmp	.+10     	; 0x848 <main_loop+0x14e>
     83e:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <non_volatile_data+0x10>
     842:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <non_volatile_data+0x11>
     846:	04 c0       	rjmp	.+8      	; 0x850 <main_loop+0x156>
     848:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <non_volatile_data+0x14>
     84c:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <non_volatile_data+0x15>
     850:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PSC+0x1>
     854:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PSC>
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <winch_status>
     85e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <timer_get>
     862:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     866:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
     86a:	0e 94 c9 0c 	call	0x1992	; 0x1992 <timer_get>
     86e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <winch_timer+0x1>
     872:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <winch_timer>
     876:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     87a:	82 30       	cpi	r24, 0x02	; 2
     87c:	61 f4       	brne	.+24     	; 0x896 <main_loop+0x19c>
     87e:	1d 9b       	sbis	0x03, 5	; 3
     880:	05 c0       	rjmp	.+10     	; 0x88c <main_loop+0x192>
     882:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <non_volatile_data+0xe>
     886:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <non_volatile_data+0xf>
     88a:	10 c0       	rjmp	.+32     	; 0x8ac <main_loop+0x1b2>
     88c:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <non_volatile_data+0x12>
     890:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <non_volatile_data+0x13>
     894:	0b c0       	rjmp	.+22     	; 0x8ac <main_loop+0x1b2>
     896:	1d 9b       	sbis	0x03, 5	; 3
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <main_loop+0x1aa>
     89a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <non_volatile_data+0x10>
     89e:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <non_volatile_data+0x11>
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <main_loop+0x1b2>
     8a4:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <non_volatile_data+0x14>
     8a8:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <non_volatile_data+0x15>
     8ac:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <Enable_PSC>
     8b0:	08 95       	ret
     8b2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <winch_status>
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	09 f0       	breq	.+2      	; 0x8bc <main_loop+0x1c2>
     8ba:	82 c0       	rjmp	.+260    	; 0x9c0 <__stack+0xc1>
     8bc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     8c0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
     8c4:	0e 94 ce 0c 	call	0x199c	; 0x199c <timer_time_elapsed>
     8c8:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <winch_state>
     8cc:	22 30       	cpi	r18, 0x02	; 2
     8ce:	41 f4       	brne	.+16     	; 0x8e0 <main_loop+0x1e6>
     8d0:	1d 9b       	sbis	0x03, 5	; 3
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <main_loop+0x1e0>
     8d4:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <non_volatile_data+0x16>
     8d8:	0a c0       	rjmp	.+20     	; 0x8ee <main_loop+0x1f4>
     8da:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <non_volatile_data+0x18>
     8de:	07 c0       	rjmp	.+14     	; 0x8ee <main_loop+0x1f4>
     8e0:	1d 9b       	sbis	0x03, 5	; 3
     8e2:	03 c0       	rjmp	.+6      	; 0x8ea <main_loop+0x1f0>
     8e4:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <non_volatile_data+0x17>
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <main_loop+0x1f4>
     8ea:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <non_volatile_data+0x19>
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	82 17       	cp	r24, r18
     8f2:	93 07       	cpc	r25, r19
     8f4:	08 f4       	brcc	.+2      	; 0x8f8 <main_loop+0x1fe>
     8f6:	66 c0       	rjmp	.+204    	; 0x9c4 <__stack+0xc5>
     8f8:	0e 94 c9 0c 	call	0x1992	; 0x1992 <timer_get>
     8fc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     900:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
     904:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <PSC>
     908:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <PSC+0x1>
     90c:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <winch_state>
     910:	22 30       	cpi	r18, 0x02	; 2
     912:	a1 f4       	brne	.+40     	; 0x93c <__stack+0x3d>
     914:	1d 9b       	sbis	0x03, 5	; 3
     916:	09 c0       	rjmp	.+18     	; 0x92a <__stack+0x2b>
     918:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <non_volatile_data+0x1a>
     91c:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <non_volatile_data+0x1b>
     920:	28 ee       	ldi	r18, 0xE8	; 232
     922:	33 e0       	ldi	r19, 0x03	; 3
     924:	24 1b       	sub	r18, r20
     926:	35 0b       	sbc	r19, r21
     928:	1c c0       	rjmp	.+56     	; 0x962 <__stack+0x63>
     92a:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <non_volatile_data+0x1e>
     92e:	50 91 69 02 	lds	r21, 0x0269	; 0x800269 <non_volatile_data+0x1f>
     932:	28 ee       	ldi	r18, 0xE8	; 232
     934:	33 e0       	ldi	r19, 0x03	; 3
     936:	24 1b       	sub	r18, r20
     938:	35 0b       	sbc	r19, r21
     93a:	13 c0       	rjmp	.+38     	; 0x962 <__stack+0x63>
     93c:	1d 9b       	sbis	0x03, 5	; 3
     93e:	09 c0       	rjmp	.+18     	; 0x952 <__stack+0x53>
     940:	40 91 66 02 	lds	r20, 0x0266	; 0x800266 <non_volatile_data+0x1c>
     944:	50 91 67 02 	lds	r21, 0x0267	; 0x800267 <non_volatile_data+0x1d>
     948:	28 ee       	ldi	r18, 0xE8	; 232
     94a:	33 e0       	ldi	r19, 0x03	; 3
     94c:	24 1b       	sub	r18, r20
     94e:	35 0b       	sbc	r19, r21
     950:	08 c0       	rjmp	.+16     	; 0x962 <__stack+0x63>
     952:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <non_volatile_data+0x20>
     956:	50 91 6b 02 	lds	r21, 0x026B	; 0x80026b <non_volatile_data+0x21>
     95a:	28 ee       	ldi	r18, 0xE8	; 232
     95c:	33 e0       	ldi	r19, 0x03	; 3
     95e:	24 1b       	sub	r18, r20
     960:	35 0b       	sbc	r19, r21
     962:	28 17       	cp	r18, r24
     964:	39 07       	cpc	r19, r25
     966:	10 f1       	brcs	.+68     	; 0x9ac <__stack+0xad>
     968:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <winch_state>
     96c:	22 30       	cpi	r18, 0x02	; 2
     96e:	61 f4       	brne	.+24     	; 0x988 <__stack+0x89>
     970:	1d 9b       	sbis	0x03, 5	; 3
     972:	05 c0       	rjmp	.+10     	; 0x97e <__stack+0x7f>
     974:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <non_volatile_data+0x1a>
     978:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <non_volatile_data+0x1b>
     97c:	10 c0       	rjmp	.+32     	; 0x99e <__stack+0x9f>
     97e:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <non_volatile_data+0x1e>
     982:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <non_volatile_data+0x1f>
     986:	0b c0       	rjmp	.+22     	; 0x99e <__stack+0x9f>
     988:	1d 9b       	sbis	0x03, 5	; 3
     98a:	05 c0       	rjmp	.+10     	; 0x996 <__stack+0x97>
     98c:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <non_volatile_data+0x1c>
     990:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <non_volatile_data+0x1d>
     994:	04 c0       	rjmp	.+8      	; 0x99e <__stack+0x9f>
     996:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <non_volatile_data+0x20>
     99a:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <non_volatile_data+0x21>
     99e:	82 0f       	add	r24, r18
     9a0:	93 1f       	adc	r25, r19
     9a2:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PSC+0x1>
     9a6:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PSC>
     9aa:	08 95       	ret
     9ac:	88 ee       	ldi	r24, 0xE8	; 232
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PSC+0x1>
     9b4:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PSC>
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <winch_status>
     9be:	08 95       	ret
     9c0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <winch_status>
     9c4:	08 95       	ret

000009c6 <HAL_init>:
};

void HAL_init(void){
	
	//w³¹czenie PLL na 64MHz
	PLLCSR |= (1<PLLF) | (1<<PLLE);
     9c6:	89 b5       	in	r24, 0x29	; 41
     9c8:	83 60       	ori	r24, 0x03	; 3
     9ca:	89 bd       	out	0x29, r24	; 41
	
	//ustawienie porty na wyjœciowe dla LED-ow
	DDR(LED_0_PORT) |= (1<<LED_0);
     9cc:	52 9a       	sbi	0x0a, 2	; 10
	DDR(LED_1_PORT) |= (1<<LED_1);
     9ce:	24 9a       	sbi	0x04, 4	; 4

	LED_0_ON;
     9d0:	5a 9a       	sbi	0x0b, 2	; 11
	LED_1_ON;
     9d2:	2c 9a       	sbi	0x05, 4	; 5
	
	//ustawienei podtrzymanie zasilania na wyjœcie
	DDR(PWR_PORT) |= (1<<PWR);
     9d4:	23 9a       	sbi	0x04, 3	; 4
	
	//Inicjalizacja DIP Switchy
	DDR(SW_1_PORT) &= ~(1<<SW_1);
     9d6:	57 98       	cbi	0x0a, 7	; 10
	DDR(SW_2_PORT) &= ~(1<<SW_2);
     9d8:	56 98       	cbi	0x0a, 6	; 10
	DDR(SW_3_PORT) &= ~(1<<SW_3);
     9da:	55 98       	cbi	0x0a, 5	; 10
	DDR(SW_4_PORT) &= ~(1<<SW_4);
     9dc:	21 98       	cbi	0x04, 1	; 4
	DDR(SW_5_PORT) &= ~(1<<SW_5);
     9de:	20 98       	cbi	0x04, 0	; 4
	DDR(SW_6_PORT) &= ~(1<<SW_6);
     9e0:	39 98       	cbi	0x07, 1	; 7
	DDR(SW_7_PORT) &= ~(1<<SW_7);
     9e2:	51 98       	cbi	0x0a, 1	; 10
	DDR(SW_8_PORT) &= ~(1<<SW_8);
     9e4:	38 98       	cbi	0x07, 0	; 7
	
	//w³aczenie pull-up-ów
	PORT(SW_1_PORT) |= 1<<SW_1;
     9e6:	5f 9a       	sbi	0x0b, 7	; 11
	PORT(SW_2_PORT) |= 1<<SW_2;
     9e8:	5e 9a       	sbi	0x0b, 6	; 11
	PORT(SW_3_PORT) |= 1<<SW_3;
     9ea:	5d 9a       	sbi	0x0b, 5	; 11
	PORT(SW_4_PORT) |= 1<<SW_4;
     9ec:	29 9a       	sbi	0x05, 1	; 5
	PORT(SW_5_PORT) |= 1<<SW_5;
     9ee:	28 9a       	sbi	0x05, 0	; 5
	PORT(SW_6_PORT) |= 1<<SW_6;
     9f0:	41 9a       	sbi	0x08, 1	; 8
	PORT(SW_7_PORT) |= 1<<SW_7;
     9f2:	59 9a       	sbi	0x0b, 1	; 11
	PORT(SW_8_PORT) |= 1<<SW_8;
     9f4:	40 9a       	sbi	0x08, 0	; 8
	
	//Inicjalizacja wejœæ UP i DOWN
	DDR(WINCH_UP_PORT) &= ~(1<<WINCH_UP);
     9f6:	22 98       	cbi	0x04, 2	; 4
	DDR(WINCH_DOWN_PORT) &= ~(1<<WINCH_DOWN);
     9f8:	3c 98       	cbi	0x07, 4	; 7
	DDR(WINCH_SET_PIN_PORT) &= ~(1<<WINCH_SET_PIN);
     9fa:	25 98       	cbi	0x04, 5	; 4
	
	//Inicjalizacja wyjœæ
	DDR(BUZZER_PORT) |= (1<<BUZZER);
     9fc:	3f 9a       	sbi	0x07, 7	; 7
	
	//aktywacja przerwañ
	PCICR |= (1<<PCIE0) | (1<<PCIE1);
     9fe:	e8 e6       	ldi	r30, 0x68	; 104
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	83 60       	ori	r24, 0x03	; 3
     a06:	80 83       	st	Z, r24
	
	PCMSK0 |= (1<<PCINT2);
     a08:	ea e6       	ldi	r30, 0x6A	; 106
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	84 60       	ori	r24, 0x04	; 4
     a10:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12);
     a12:	eb e6       	ldi	r30, 0x6B	; 107
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	80 61       	ori	r24, 0x10	; 16
     a1a:	80 83       	st	Z, r24
     a1c:	08 95       	ret

00000a1e <Get_DIP_sw_word>:
	
};

uint8_t Get_DIP_sw_word(void){
	uint8_t result=0;
	if(SW_1_SET)
     a1e:	89 b1       	in	r24, 0x09	; 9
     a20:	88 1f       	adc	r24, r24
     a22:	88 27       	eor	r24, r24
     a24:	88 1f       	adc	r24, r24
		result |= 1<<0;
	if(SW_2_SET)
     a26:	4e 99       	sbic	0x09, 6	; 9
		result |= 1<<1;
     a28:	82 60       	ori	r24, 0x02	; 2
	if(SW_3_SET)
     a2a:	4d 99       	sbic	0x09, 5	; 9
		result |= 1<<2;
     a2c:	84 60       	ori	r24, 0x04	; 4
	if(SW_4_SET)
     a2e:	19 99       	sbic	0x03, 1	; 3
		result |= 1<<3;
     a30:	88 60       	ori	r24, 0x08	; 8
	if(SW_5_SET)
     a32:	18 99       	sbic	0x03, 0	; 3
		result |= 1<<4;
     a34:	80 61       	ori	r24, 0x10	; 16
	if(SW_6_SET)
     a36:	31 99       	sbic	0x06, 1	; 6
		result |= 1<<5;
     a38:	80 62       	ori	r24, 0x20	; 32
	if(SW_7_SET)
     a3a:	49 99       	sbic	0x09, 1	; 9
		result |= 1<<6;
     a3c:	80 64       	ori	r24, 0x40	; 64
	if(SW_8_SET)
     a3e:	30 99       	sbic	0x06, 0	; 6
		result |= 1<<7;
     a40:	80 68       	ori	r24, 0x80	; 128
	return result; 
	
};
     a42:	08 95       	ret

00000a44 <main>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getc_s, _FDEV_SETUP_READ);


int main(void) {
	
	HAL_init();
     a44:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <HAL_init>
	timer_init();
     a48:	0e 94 b6 0c 	call	0x196c	; 0x196c <timer_init>
	ADC_init();
     a4c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <ADC_init>
	PSC_init();
     a50:	0e 94 2d 0c 	call	0x185a	; 0x185a <PSC_init>
	uart_init(BAUD);
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	91 ee       	ldi	r25, 0xE1	; 225
     a58:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <uart_init>
	CAN_init(GET_DIP_SW_CAN_ADDR);
     a5c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <Get_DIP_sw_word>
     a60:	87 70       	andi	r24, 0x07	; 7
     a62:	0e 94 1e 06 	call	0xc3c	; 0xc3c <CAN_init>

	stdout = &uart_output;
     a66:	ec ea       	ldi	r30, 0xAC	; 172
     a68:	f2 e0       	ldi	r31, 0x02	; 2
     a6a:	8e e0       	ldi	r24, 0x0E	; 14
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	93 83       	std	Z+3, r25	; 0x03
     a70:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &uart_input;
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	80 83       	st	Z, r24
	
	sei();
     a7a:	78 94       	sei

	uart_puts_P("Winch Controller\nCompilation date ");
     a7c:	84 e5       	ldi	r24, 0x54	; 84
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <uart_puts_p>
	uart_puts_P(__DATE__);
     a84:	88 e4       	ldi	r24, 0x48	; 72
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <uart_puts_p>
	uart_puts_P("\n");
     a8c:	86 e4       	ldi	r24, 0x46	; 70
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <uart_puts_p>
	
	//próba odczytu konfiguracji z EEPROMU, jeœli odczyt siê nie powiód³ przypisujemy wartoœci domyœlne
	if(eeprom_read() == EEPROM_ERROR){
     a94:	0e 94 a7 02 	call	0x54e	; 0x54e <eeprom_read>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	31 f4       	brne	.+12     	; 0xaa8 <main+0x64>
		eeprom_restore_defaults();
     a9c:	0e 94 41 03 	call	0x682	; 0x682 <eeprom_restore_defaults>
		uart_puts_P("Loading default values");
     aa0:	8f e2       	ldi	r24, 0x2F	; 47
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <uart_puts_p>
	}
	
	
	if( WINCH_UP_SET && WINCH_DOWN_SET ){
     aa8:	1a 9b       	sbis	0x03, 2	; 3
     aaa:	06 c0       	rjmp	.+12     	; 0xab8 <main+0x74>
     aac:	34 9b       	sbis	0x06, 4	; 6
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <main+0x74>
		power_up_source = SWITCH_ON;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <power_up_source>
     ab6:	15 c0       	rjmp	.+42     	; 0xae2 <main+0x9e>
	}
	else if(WINCH_UP_SET){
     ab8:	1a 9b       	sbis	0x03, 2	; 3
     aba:	07 c0       	rjmp	.+14     	; 0xaca <main+0x86>
		PWR_ON;
     abc:	2b 9a       	sbi	0x05, 3	; 5
		power_up_source = WINCH_ON;
     abe:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <power_up_source>
		winch_state = UP;
     ac2:	82 e0       	ldi	r24, 0x02	; 2
     ac4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <winch_state>
     ac8:	0c c0       	rjmp	.+24     	; 0xae2 <main+0x9e>
	}
	else if(WINCH_DOWN_SET){
     aca:	34 9b       	sbis	0x06, 4	; 6
     acc:	07 c0       	rjmp	.+14     	; 0xadc <main+0x98>
		PWR_ON;
     ace:	2b 9a       	sbi	0x05, 3	; 5
		power_up_source = WINCH_ON;
     ad0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <power_up_source>
		winch_state = DOWN;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <winch_state>
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <main+0x9e>
	}
	else{
		power_up_source = SWITCH_ON;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <power_up_source>
	}
	
	//PWR_ON;
	LED_0_ON;
     ae2:	5a 9a       	sbi	0x0b, 2	; 11
	LED_1_OFF;
     ae4:	2c 98       	cbi	0x05, 4	; 5
	
	ADC_start_conversion();
     ae6:	0e 94 18 01 	call	0x230	; 0x230 <ADC_start_conversion>
	
	time_stamp=timer_get();
     aea:	0e 94 c9 0c 	call	0x1992	; 0x1992 <timer_get>
     aee:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     af2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	life_timer=timer_get();
     af6:	0e 94 c9 0c 	call	0x1992	; 0x1992 <timer_get>
     afa:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <life_timer+0x1>
     afe:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <life_timer>
	
    while(1) {
		if( timer_new_tick() ){
     b02:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <timer_new_tick>
     b06:	88 23       	and	r24, r24
     b08:	e1 f3       	breq	.-8      	; 0xb02 <main+0xbe>
			main_loop();
     b0a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <main_loop>
     b0e:	f9 cf       	rjmp	.-14     	; 0xb02 <main+0xbe>

00000b10 <__vector_22>:
		result |= 1<<7;
	return result; 
	
};

SIGNAL (PCINT0_vect){ //przerwanie od WINCH_UP
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	2f 93       	push	r18
     b1c:	3f 93       	push	r19
     b1e:	4f 93       	push	r20
     b20:	5f 93       	push	r21
     b22:	6f 93       	push	r22
     b24:	7f 93       	push	r23
     b26:	8f 93       	push	r24
     b28:	9f 93       	push	r25
     b2a:	af 93       	push	r26
     b2c:	bf 93       	push	r27
     b2e:	ef 93       	push	r30
     b30:	ff 93       	push	r31
	if(WINCH_UP_SET && winch_state == OFF){
     b32:	1a 9b       	sbis	0x03, 2	; 3
     b34:	1b c0       	rjmp	.+54     	; 0xb6c <__vector_22+0x5c>
     b36:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     b3a:	81 11       	cpse	r24, r1
     b3c:	17 c0       	rjmp	.+46     	; 0xb6c <__vector_22+0x5c>
		winch_state = UP;
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <winch_state>
		PSC.torque = TORQUE_INIT_VAL;
     b44:	84 e6       	ldi	r24, 0x64	; 100
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PSC+0x1>
     b4c:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PSC>
		winch_timer=timer_get();
     b50:	0e 94 c9 0c 	call	0x1992	; 0x1992 <timer_get>
     b54:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <winch_timer+0x1>
     b58:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <winch_timer>
		//Enable_PSC();
		if(power_up_source == SWITCH_ON){
     b5c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <power_up_source>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	81 f4       	brne	.+32     	; 0xb84 <__vector_22+0x74>
			power_up_source = WINCH_ON;
     b64:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <power_up_source>
			PWR_ON;
     b68:	2b 9a       	sbi	0x05, 3	; 5
     b6a:	0c c0       	rjmp	.+24     	; 0xb84 <__vector_22+0x74>
		}
	}
	else if(WINCH_UP_CLEAR && winch_state != OFF){
     b6c:	1a 99       	sbic	0x03, 2	; 3
     b6e:	0a c0       	rjmp	.+20     	; 0xb84 <__vector_22+0x74>
     b70:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     b74:	88 23       	and	r24, r24
     b76:	31 f0       	breq	.+12     	; 0xb84 <__vector_22+0x74>
		winch_state = OFF;
     b78:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <winch_state>
		Disable_PSC();
     b7c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <Disable_PSC>
		winch_status = INIT;
     b80:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <winch_status>
	}
};
     b84:	ff 91       	pop	r31
     b86:	ef 91       	pop	r30
     b88:	bf 91       	pop	r27
     b8a:	af 91       	pop	r26
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	7f 91       	pop	r23
     b92:	6f 91       	pop	r22
     b94:	5f 91       	pop	r21
     b96:	4f 91       	pop	r20
     b98:	3f 91       	pop	r19
     b9a:	2f 91       	pop	r18
     b9c:	0f 90       	pop	r0
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	0f 90       	pop	r0
     ba2:	1f 90       	pop	r1
     ba4:	18 95       	reti

00000ba6 <__vector_23>:

SIGNAL (PCINT1_vect){ //przerwanie od WINCH_DOWN
     ba6:	1f 92       	push	r1
     ba8:	0f 92       	push	r0
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	0f 92       	push	r0
     bae:	11 24       	eor	r1, r1
     bb0:	2f 93       	push	r18
     bb2:	3f 93       	push	r19
     bb4:	4f 93       	push	r20
     bb6:	5f 93       	push	r21
     bb8:	6f 93       	push	r22
     bba:	7f 93       	push	r23
     bbc:	8f 93       	push	r24
     bbe:	9f 93       	push	r25
     bc0:	af 93       	push	r26
     bc2:	bf 93       	push	r27
     bc4:	ef 93       	push	r30
     bc6:	ff 93       	push	r31
	if(WINCH_DOWN_SET && winch_state == OFF){
     bc8:	34 9b       	sbis	0x06, 4	; 6
     bca:	1b c0       	rjmp	.+54     	; 0xc02 <__vector_23+0x5c>
     bcc:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     bd0:	81 11       	cpse	r24, r1
     bd2:	17 c0       	rjmp	.+46     	; 0xc02 <__vector_23+0x5c>
		winch_state = DOWN;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <winch_state>
		PSC.torque = TORQUE_INIT_VAL;
     bda:	84 e6       	ldi	r24, 0x64	; 100
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PSC+0x1>
     be2:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PSC>
		winch_timer=timer_get();
     be6:	0e 94 c9 0c 	call	0x1992	; 0x1992 <timer_get>
     bea:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <winch_timer+0x1>
     bee:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <winch_timer>
		//Enable_PSC();
		if(power_up_source == SWITCH_ON){
     bf2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <power_up_source>
     bf6:	81 30       	cpi	r24, 0x01	; 1
     bf8:	81 f4       	brne	.+32     	; 0xc1a <__vector_23+0x74>
			power_up_source = WINCH_ON;
     bfa:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <power_up_source>
			PWR_ON;
     bfe:	2b 9a       	sbi	0x05, 3	; 5
     c00:	0c c0       	rjmp	.+24     	; 0xc1a <__vector_23+0x74>
		}
	}
	else if(WINCH_DOWN_CLEAR && winch_state != OFF){
     c02:	34 99       	sbic	0x06, 4	; 6
     c04:	0a c0       	rjmp	.+20     	; 0xc1a <__vector_23+0x74>
     c06:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <winch_state>
     c0a:	88 23       	and	r24, r24
     c0c:	31 f0       	breq	.+12     	; 0xc1a <__vector_23+0x74>
		winch_state = OFF;
     c0e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <winch_state>
		Disable_PSC();
     c12:	0e 94 66 0c 	call	0x18cc	; 0x18cc <Disable_PSC>
		winch_status = INIT;
     c16:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <winch_status>
	}
};
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <CAN_init>:

volatile uint16_t int_counter=0;


//Inicjalizacja CAN
void CAN_init(uint8_t dip_sw){
     c3c:	2f 92       	push	r2
     c3e:	3f 92       	push	r3
     c40:	4f 92       	push	r4
     c42:	5f 92       	push	r5
     c44:	6f 92       	push	r6
     c46:	7f 92       	push	r7
     c48:	8f 92       	push	r8
     c4a:	9f 92       	push	r9
     c4c:	af 92       	push	r10
     c4e:	bf 92       	push	r11
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	00 d0       	rcall	.+0      	; 0xc62 <CAN_init+0x26>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <CAN_init+0x28>
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
	uint16_t mob_3_id = 0x280 + BASE_ID; //TPDO 2
	uint16_t mob_4_id = 0x580 + BASE_ID; //SDO TX
	uint16_t mob_5_id = 0x600 + BASE_ID; //SDO RX
	
	//dodwania do adresu ustawienia z DIP switchy
	mob_1_id += dip_sw;
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	6c 01       	movw	r12, r24
     c6c:	20 ef       	ldi	r18, 0xF0	; 240
     c6e:	c2 1a       	sub	r12, r18
     c70:	2d ef       	ldi	r18, 0xFD	; 253
     c72:	d2 0a       	sbc	r13, r18
	mob_2_id += dip_sw;
     c74:	2c 01       	movw	r4, r24
     c76:	30 e7       	ldi	r19, 0x70	; 112
     c78:	43 1a       	sub	r4, r19
     c7a:	3e ef       	ldi	r19, 0xFE	; 254
     c7c:	53 0a       	sbc	r5, r19
	mob_3_id += dip_sw;
     c7e:	dc 01       	movw	r26, r24
     c80:	a0 57       	subi	r26, 0x70	; 112
     c82:	bd 4f       	sbci	r27, 0xFD	; 253
     c84:	ba 83       	std	Y+2, r27	; 0x02
     c86:	a9 83       	std	Y+1, r26	; 0x01
	mob_4_id += dip_sw;
     c88:	fc 01       	movw	r30, r24
     c8a:	e0 57       	subi	r30, 0x70	; 112
     c8c:	fa 4f       	sbci	r31, 0xFA	; 250
     c8e:	fc 83       	std	Y+4, r31	; 0x04
     c90:	eb 83       	std	Y+3, r30	; 0x03
	mob_5_id += dip_sw;
     c92:	1c 01       	movw	r2, r24
     c94:	f0 ef       	ldi	r31, 0xF0	; 240
     c96:	2f 1a       	sub	r2, r31
     c98:	f9 ef       	ldi	r31, 0xF9	; 249
     c9a:	3f 0a       	sbc	r3, r31
	
	CANGCON = ( 1 << SWRES );   // Software reset
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	CANTCON = 0x00;             // CAN timing prescaler set to 0
     ca2:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
     ca6:	e2 ee       	ldi	r30, 0xE2	; 226
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8e 60       	ori	r24, 0x0E	; 14
     cae:	80 83       	st	Z, r24
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
     cb0:	e3 ee       	ldi	r30, 0xE3	; 227
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	8c 60       	ori	r24, 0x0C	; 12
     cb8:	80 83       	st	Z, r24
	CANBT3	|= 0x37; //CAN Baud set 125kbit
     cba:	e4 ee       	ldi	r30, 0xE4	; 228
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	87 63       	ori	r24, 0x37	; 55
     cc2:	80 83       	st	Z, r24
	
	for ( int8_t mob=0; mob<6; mob++ ) {
     cc4:	80 e0       	ldi	r24, 0x00	; 0
		CANPAGE = ( mob << 4 );   // Selects Message Object 0-5
     cc6:	2d ee       	ldi	r18, 0xED	; 237
     cc8:	30 e0       	ldi	r19, 0x00	; 0
		CANCDMOB = 0x00;          // Disable mob
     cca:	af ee       	ldi	r26, 0xEF	; 239
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
		CANSTMOB = 0x00;          // Clear mob status register;
     cce:	4e ee       	ldi	r20, 0xEE	; 238
     cd0:	50 e0       	ldi	r21, 0x00	; 0
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
	CANBT3	|= 0x37; //CAN Baud set 125kbit
	
	for ( int8_t mob=0; mob<6; mob++ ) {
		CANPAGE = ( mob << 4 );   // Selects Message Object 0-5
     cd2:	98 2f       	mov	r25, r24
     cd4:	92 95       	swap	r25
     cd6:	90 7f       	andi	r25, 0xF0	; 240
     cd8:	f9 01       	movw	r30, r18
     cda:	90 83       	st	Z, r25
		CANCDMOB = 0x00;          // Disable mob
     cdc:	1c 92       	st	X, r1
		CANSTMOB = 0x00;          // Clear mob status register;
     cde:	fa 01       	movw	r30, r20
     ce0:	10 82       	st	Z, r1
     ce2:	8f 5f       	subi	r24, 0xFF	; 255
	
	CANBT1	|= 0x0E; //CAN Baud set 125kbit
	CANBT2	|= 0x0C; //CAN Baud set 125kbit
	CANBT3	|= 0x37; //CAN Baud set 125kbit
	
	for ( int8_t mob=0; mob<6; mob++ ) {
     ce4:	86 30       	cpi	r24, 0x06	; 6
     ce6:	a9 f7       	brne	.-22     	; 0xcd2 <CAN_init+0x96>
		CANSTMOB = 0x00;          // Clear mob status register;
	}
			
	
	//MOb 0 configuration SYNC
	CANPAGE	 = (MOb_0<<4);
     ce8:	0f 2e       	mov	r0, r31
     cea:	fd ee       	ldi	r31, 0xED	; 237
     cec:	ef 2e       	mov	r14, r31
     cee:	f1 2c       	mov	r15, r1
     cf0:	f0 2d       	mov	r31, r0
     cf2:	d7 01       	movw	r26, r14
     cf4:	1c 92       	st	X, r1
	CANIDM4 = 0x00; //full mask setting
     cf6:	04 ef       	ldi	r16, 0xF4	; 244
     cf8:	10 e0       	ldi	r17, 0x00	; 0
     cfa:	f8 01       	movw	r30, r16
     cfc:	10 82       	st	Z, r1
	CANIDM3 = 0x00; //full mask setting
     cfe:	65 ef       	ldi	r22, 0xF5	; 245
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	db 01       	movw	r26, r22
     d04:	1c 92       	st	X, r1
	CANIDM2 = 0xFF; //full mask setting
     d06:	46 ef       	ldi	r20, 0xF6	; 246
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	99 24       	eor	r9, r9
     d0c:	9a 94       	dec	r9
     d0e:	fa 01       	movw	r30, r20
     d10:	90 82       	st	Z, r9
	CANIDM1 = 0xFF; //full mask setting
     d12:	27 ef       	ldi	r18, 0xF7	; 247
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	d9 01       	movw	r26, r18
     d18:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     d1a:	ef ee       	ldi	r30, 0xEF	; 239
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	10 82       	st	Z, r1
	CANCDMOB |= RECEPTION;
     d20:	80 81       	ld	r24, Z
     d22:	80 68       	ori	r24, 0x80	; 128
     d24:	80 83       	st	Z, r24
	CANIDT4 = 0x00;
     d26:	80 ef       	ldi	r24, 0xF0	; 240
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	dc 01       	movw	r26, r24
     d2c:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     d2e:	e1 ef       	ldi	r30, 0xF1	; 241
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	10 82       	st	Z, r1
	CANIDT2 = ((mob_0_id & 0x07) << 5);
     d34:	0f 2e       	mov	r0, r31
     d36:	f2 ef       	ldi	r31, 0xF2	; 242
     d38:	af 2e       	mov	r10, r31
     d3a:	b1 2c       	mov	r11, r1
     d3c:	f0 2d       	mov	r31, r0
     d3e:	d5 01       	movw	r26, r10
     d40:	1c 92       	st	X, r1
	CANIDT1 = (mob_0_id >> 3);
     d42:	0f 2e       	mov	r0, r31
     d44:	f3 ef       	ldi	r31, 0xF3	; 243
     d46:	6f 2e       	mov	r6, r31
     d48:	71 2c       	mov	r7, r1
     d4a:	f0 2d       	mov	r31, r0
     d4c:	68 94       	set
     d4e:	88 24       	eor	r8, r8
     d50:	84 f8       	bld	r8, 4
     d52:	f3 01       	movw	r30, r6
     d54:	80 82       	st	Z, r8
	CANIE2	|= (1<<IEMOB0); //Enable Interrupt MOb 0
     d56:	ee ed       	ldi	r30, 0xDE	; 222
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 80       	ld	r8, Z
     d5c:	a8 2d       	mov	r26, r8
     d5e:	a1 60       	ori	r26, 0x01	; 1
     d60:	a0 83       	st	Z, r26
	
	//MOb 1 configuration odbierana paczka RPDO 1 0x200+
	CANPAGE	 = (MOb_1<<4);
     d62:	68 94       	set
     d64:	88 24       	eor	r8, r8
     d66:	84 f8       	bld	r8, 4
     d68:	d7 01       	movw	r26, r14
     d6a:	8c 92       	st	X, r8
	CANIDM4 = 0x00; //full mask setting
     d6c:	d8 01       	movw	r26, r16
     d6e:	1c 92       	st	X, r1
	CANIDM3 = 0x00; //full mask setting
     d70:	db 01       	movw	r26, r22
     d72:	1c 92       	st	X, r1
	CANIDM2 = 0xFF; //full mask setting
     d74:	da 01       	movw	r26, r20
     d76:	9c 92       	st	X, r9
	CANIDM1 = 0xFF; //full mask setting
     d78:	d9 01       	movw	r26, r18
     d7a:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     d7c:	af ee       	ldi	r26, 0xEF	; 239
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	1c 92       	st	X, r1
	CANCDMOB |= RECEPTION | ( 8 << DLC0);
     d82:	8c 90       	ld	r8, X
     d84:	b8 2d       	mov	r27, r8
     d86:	b8 68       	ori	r27, 0x88	; 136
     d88:	8b 2e       	mov	r8, r27
     d8a:	af ee       	ldi	r26, 0xEF	; 239
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	8c 92       	st	X, r8
	CANIDT4 = 0x00;
     d90:	dc 01       	movw	r26, r24
     d92:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     d94:	a1 ef       	ldi	r26, 0xF1	; 241
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	1c 92       	st	X, r1
	CANIDT2 = ((mob_1_id & 0x07) << 5);
     d9a:	8c 2c       	mov	r8, r12
     d9c:	88 0c       	add	r8, r8
     d9e:	88 0c       	add	r8, r8
     da0:	88 0c       	add	r8, r8
     da2:	88 0c       	add	r8, r8
     da4:	88 0c       	add	r8, r8
     da6:	d5 01       	movw	r26, r10
     da8:	8c 92       	st	X, r8
	CANIDT1 = (mob_1_id >> 3);
     daa:	d6 94       	lsr	r13
     dac:	c7 94       	ror	r12
     dae:	d6 94       	lsr	r13
     db0:	c7 94       	ror	r12
     db2:	d6 94       	lsr	r13
     db4:	c7 94       	ror	r12
     db6:	d3 01       	movw	r26, r6
     db8:	cc 92       	st	X, r12
	CANIE2	|= (1<<IEMOB1); //Enable Interrupt MOb 1
     dba:	d0 80       	ld	r13, Z
     dbc:	bd 2d       	mov	r27, r13
     dbe:	b2 60       	ori	r27, 0x02	; 2
     dc0:	b0 83       	st	Z, r27
	
	//MOb 2 configuration nadawana paczka TPDO 1 0x180+
	CANPAGE	 = (MOb_2<<4);
     dc2:	68 94       	set
     dc4:	dd 24       	eor	r13, r13
     dc6:	d5 f8       	bld	r13, 5
     dc8:	d7 01       	movw	r26, r14
     dca:	dc 92       	st	X, r13
	CANIDM4 = 0x00; //full mask setting
     dcc:	d8 01       	movw	r26, r16
     dce:	1c 92       	st	X, r1
	CANIDM3 = 0x00; //full mask setting
     dd0:	db 01       	movw	r26, r22
     dd2:	1c 92       	st	X, r1
	CANIDM2 = (0x07 <<5); //full mask setting
     dd4:	0f 2e       	mov	r0, r31
     dd6:	f0 ee       	ldi	r31, 0xE0	; 224
     dd8:	8f 2e       	mov	r8, r31
     dda:	f0 2d       	mov	r31, r0
     ddc:	da 01       	movw	r26, r20
     dde:	8c 92       	st	X, r8
	CANIDM1 = 0xFF; //full mask setting
     de0:	d9 01       	movw	r26, r18
     de2:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     de4:	af ee       	ldi	r26, 0xEF	; 239
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	1c 92       	st	X, r1
	//CANCDMOB |= TRANSMISSION;
	CANIDT4 = 0x00;
     dea:	dc 01       	movw	r26, r24
     dec:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     dee:	a1 ef       	ldi	r26, 0xF1	; 241
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	1c 92       	st	X, r1
	CANIDT2 = ((mob_2_id & 0x07) << 5);
     df4:	d4 2c       	mov	r13, r4
     df6:	dd 0c       	add	r13, r13
     df8:	dd 0c       	add	r13, r13
     dfa:	dd 0c       	add	r13, r13
     dfc:	dd 0c       	add	r13, r13
     dfe:	dd 0c       	add	r13, r13
     e00:	d5 01       	movw	r26, r10
     e02:	dc 92       	st	X, r13
	CANIDT1 = (mob_2_id >> 3);
     e04:	62 01       	movw	r12, r4
     e06:	d6 94       	lsr	r13
     e08:	c7 94       	ror	r12
     e0a:	d6 94       	lsr	r13
     e0c:	c7 94       	ror	r12
     e0e:	d6 94       	lsr	r13
     e10:	c7 94       	ror	r12
     e12:	d3 01       	movw	r26, r6
     e14:	cc 92       	st	X, r12
	CANIE2	|= (1<<IEMOB2); //Enable Interrupt MOb 2
     e16:	d0 80       	ld	r13, Z
     e18:	bd 2d       	mov	r27, r13
     e1a:	b4 60       	ori	r27, 0x04	; 4
     e1c:	b0 83       	st	Z, r27
	
	
	//MOb 3 configuration nadawana paczka TPDO 2 0x280+
	CANPAGE	 = (MOb_3<<4);
     e1e:	0f 2e       	mov	r0, r31
     e20:	f0 e3       	ldi	r31, 0x30	; 48
     e22:	df 2e       	mov	r13, r31
     e24:	f0 2d       	mov	r31, r0
     e26:	d7 01       	movw	r26, r14
     e28:	dc 92       	st	X, r13
	CANIDM4 = 0x00; //full mask setting
     e2a:	d8 01       	movw	r26, r16
     e2c:	1c 92       	st	X, r1
	CANIDM3 = 0x00; //full mask setting
     e2e:	db 01       	movw	r26, r22
     e30:	1c 92       	st	X, r1
	CANIDM2 = (0x07 <<5); //full mask setting
     e32:	da 01       	movw	r26, r20
     e34:	8c 92       	st	X, r8
	CANIDM1 = 0xFF; //full mask setting
     e36:	d9 01       	movw	r26, r18
     e38:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     e3a:	af ee       	ldi	r26, 0xEF	; 239
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	1c 92       	st	X, r1
	//CANCDMOB |= TRANSMISSION;
	CANIDT4 = 0x00;
     e40:	dc 01       	movw	r26, r24
     e42:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     e44:	a1 ef       	ldi	r26, 0xF1	; 241
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	1c 92       	st	X, r1
	CANIDT2 = ((mob_3_id & 0x07) << 5);
     e4a:	d9 80       	ldd	r13, Y+1	; 0x01
     e4c:	dd 0c       	add	r13, r13
     e4e:	dd 0c       	add	r13, r13
     e50:	dd 0c       	add	r13, r13
     e52:	dd 0c       	add	r13, r13
     e54:	dd 0c       	add	r13, r13
     e56:	d5 01       	movw	r26, r10
     e58:	dc 92       	st	X, r13
	CANIDT1 = (mob_3_id >> 3);
     e5a:	c9 80       	ldd	r12, Y+1	; 0x01
     e5c:	da 80       	ldd	r13, Y+2	; 0x02
     e5e:	d6 94       	lsr	r13
     e60:	c7 94       	ror	r12
     e62:	d6 94       	lsr	r13
     e64:	c7 94       	ror	r12
     e66:	d6 94       	lsr	r13
     e68:	c7 94       	ror	r12
     e6a:	d3 01       	movw	r26, r6
     e6c:	cc 92       	st	X, r12
	CANIE2	|= (1<<IEMOB3); //Enable Interrupt MOb 3
     e6e:	d0 80       	ld	r13, Z
     e70:	bd 2d       	mov	r27, r13
     e72:	b8 60       	ori	r27, 0x08	; 8
     e74:	b0 83       	st	Z, r27
	
	//MOb 4 configuration nadawana paczka SDO TX
	CANPAGE	 = (MOb_4<<4);
     e76:	68 94       	set
     e78:	dd 24       	eor	r13, r13
     e7a:	d6 f8       	bld	r13, 6
     e7c:	d7 01       	movw	r26, r14
     e7e:	dc 92       	st	X, r13
	CANIDM4 = 0x00; //full mask setting
     e80:	d8 01       	movw	r26, r16
     e82:	1c 92       	st	X, r1
	CANIDM3 = 0x00; //full mask setting
     e84:	db 01       	movw	r26, r22
     e86:	1c 92       	st	X, r1
	CANIDM2 = (0x07 <<5); //full mask setting
     e88:	da 01       	movw	r26, r20
     e8a:	8c 92       	st	X, r8
	CANIDM1 = 0xFF; //full mask setting
     e8c:	d9 01       	movw	r26, r18
     e8e:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     e90:	af ee       	ldi	r26, 0xEF	; 239
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	1c 92       	st	X, r1
	//CANCDMOB |= TRANSMISSION;
	CANIDT4 = 0x00;
     e96:	dc 01       	movw	r26, r24
     e98:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     e9a:	a1 ef       	ldi	r26, 0xF1	; 241
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	1c 92       	st	X, r1
	CANIDT2 = ((mob_4_id & 0x07) << 5);
     ea0:	db 80       	ldd	r13, Y+3	; 0x03
     ea2:	dd 0c       	add	r13, r13
     ea4:	dd 0c       	add	r13, r13
     ea6:	dd 0c       	add	r13, r13
     ea8:	dd 0c       	add	r13, r13
     eaa:	dd 0c       	add	r13, r13
     eac:	d5 01       	movw	r26, r10
     eae:	dc 92       	st	X, r13
	CANIDT1 = (mob_4_id >> 3);
     eb0:	cb 80       	ldd	r12, Y+3	; 0x03
     eb2:	dc 80       	ldd	r13, Y+4	; 0x04
     eb4:	d6 94       	lsr	r13
     eb6:	c7 94       	ror	r12
     eb8:	d6 94       	lsr	r13
     eba:	c7 94       	ror	r12
     ebc:	d6 94       	lsr	r13
     ebe:	c7 94       	ror	r12
     ec0:	d3 01       	movw	r26, r6
     ec2:	cc 92       	st	X, r12
	CANIE2	|= (1<<IEMOB4); //Enable Interrupt MOb 4
     ec4:	d0 80       	ld	r13, Z
     ec6:	bd 2d       	mov	r27, r13
     ec8:	b0 61       	ori	r27, 0x10	; 16
     eca:	b0 83       	st	Z, r27
	
	//MOb 5 configuration odbierana paczka SDO RX
	CANPAGE	 = (MOb_5<<4);
     ecc:	0f 2e       	mov	r0, r31
     ece:	f0 e5       	ldi	r31, 0x50	; 80
     ed0:	df 2e       	mov	r13, r31
     ed2:	f0 2d       	mov	r31, r0
     ed4:	d7 01       	movw	r26, r14
     ed6:	dc 92       	st	X, r13
	CANIDM4 = 0x00; //full mask setting
     ed8:	d8 01       	movw	r26, r16
     eda:	1c 92       	st	X, r1
	CANIDM3 = 0x00; //full mask setting
     edc:	db 01       	movw	r26, r22
     ede:	1c 92       	st	X, r1
	CANIDM2 = 0xFF; //full mask setting
     ee0:	da 01       	movw	r26, r20
     ee2:	9c 92       	st	X, r9
	CANIDM1 = 0xFF; //full mask setting
     ee4:	d9 01       	movw	r26, r18
     ee6:	9c 92       	st	X, r9
	CANCDMOB = 0x00;
     ee8:	af ee       	ldi	r26, 0xEF	; 239
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	1c 92       	st	X, r1
	CANCDMOB |= RECEPTION | ( 8 << DLC0);
     eee:	2c 91       	ld	r18, X
     ef0:	28 68       	ori	r18, 0x88	; 136
     ef2:	2c 93       	st	X, r18
	CANIDT4 = 0x00;
     ef4:	dc 01       	movw	r26, r24
     ef6:	1c 92       	st	X, r1
	CANIDT3 = 0x00;
     ef8:	a1 ef       	ldi	r26, 0xF1	; 241
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	1c 92       	st	X, r1
	CANIDT2 = ((mob_5_id & 0x07) << 5);
     efe:	82 2d       	mov	r24, r2
     f00:	82 95       	swap	r24
     f02:	88 0f       	add	r24, r24
     f04:	80 7e       	andi	r24, 0xE0	; 224
     f06:	d5 01       	movw	r26, r10
     f08:	8c 93       	st	X, r24
	CANIDT1 = (mob_5_id >> 3);
     f0a:	c1 01       	movw	r24, r2
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	96 95       	lsr	r25
     f12:	87 95       	ror	r24
     f14:	96 95       	lsr	r25
     f16:	87 95       	ror	r24
     f18:	d3 01       	movw	r26, r6
     f1a:	8c 93       	st	X, r24
	CANIE2	|= (1<<IEMOB5); //Enable Interrupt MOb 5
     f1c:	80 81       	ld	r24, Z
     f1e:	80 62       	ori	r24, 0x20	; 32
     f20:	80 83       	st	Z, r24
	
	
	CLEAR_FLAG(can_state.flags, CAN_FLAG_INTERRUPT);
     f22:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
     f26:	8e 7f       	andi	r24, 0xFE	; 254
     f28:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
	
	CANGCON |= (1<<ENASTB); //Enable controller
     f2c:	e8 ed       	ldi	r30, 0xD8	; 216
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	82 60       	ori	r24, 0x02	; 2
     f34:	80 83       	st	Z, r24
	
	CANGIE	|= ( 1 << ENIT ) | (1<<ENRX); //Enable Receive Interrupt
     f36:	eb ed       	ldi	r30, 0xDB	; 219
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 6a       	ori	r24, 0xA0	; 160
     f3e:	80 83       	st	Z, r24
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	bf 90       	pop	r11
     f5a:	af 90       	pop	r10
     f5c:	9f 90       	pop	r9
     f5e:	8f 90       	pop	r8
     f60:	7f 90       	pop	r7
     f62:	6f 90       	pop	r6
     f64:	5f 90       	pop	r5
     f66:	4f 90       	pop	r4
     f68:	3f 90       	pop	r3
     f6a:	2f 90       	pop	r2
     f6c:	08 95       	ret

00000f6e <__vector_18>:

//Obs³uga przerwania
SIGNAL ( CAN_INT_vect ){              // use interrupts
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	2f 93       	push	r18
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	af 93       	push	r26
     f80:	bf 93       	push	r27
     f82:	ef 93       	push	r30
     f84:	ff 93       	push	r31
	
	//SET_FLAG(can_state.flags, CAN_FLAG_INTERRUPT);
	int_counter++;
     f86:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <int_counter>
     f8a:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <int_counter+0x1>
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <int_counter+0x1>
     f94:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <int_counter>
	
	CANPAGE = CANHPMOB & 0xF0;      // Selects MOB with highest priority interrupt 
     f98:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     f9c:	80 7f       	andi	r24, 0xF0	; 240
     f9e:	ed ee       	ldi	r30, 0xED	; 237
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 83       	st	Z, r24
				
		if((CANPAGE>>4) == MOb_0){ //SYNC - odbiera
     fa4:	80 81       	ld	r24, Z
     fa6:	82 95       	swap	r24
     fa8:	8f 70       	andi	r24, 0x0F	; 15
     faa:	91 f4       	brne	.+36     	; 0xfd0 <__vector_18+0x62>
			if(CANSTMOB & ( 1 << RXOK)){	//obiór SYNC-a
     fac:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     fb0:	85 ff       	sbrs	r24, 5
     fb2:	05 c0       	rjmp	.+10     	; 0xfbe <__vector_18+0x50>
				SET_FLAG(can_state.flags, CAN_FLAG_SYNC_RECEIVED);				//ustaw flagê ob³sugi synca
     fb4:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
     fb8:	82 60       	ori	r24, 0x02	; 2
     fba:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
			}
			CANSTMOB=0x00;
     fbe:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x00;			//restart MOB-a
     fc2:	ef ee       	ldi	r30, 0xEF	; 239
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	10 82       	st	Z, r1
			CANCDMOB |= RECEPTION;		
     fc8:	80 81       	ld	r24, Z
     fca:	80 68       	ori	r24, 0x80	; 128
     fcc:	80 83       	st	Z, r24
     fce:	5f c0       	rjmp	.+190    	; 0x108e <__vector_18+0x120>
		}
		
		else if((CANPAGE>>4) == MOb_1){ //RPDO 1 - odbiera
     fd0:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     fd4:	82 95       	swap	r24
     fd6:	8f 70       	andi	r24, 0x0F	; 15
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	d1 f4       	brne	.+52     	; 0x1010 <__vector_18+0xa2>
			if(CANSTMOB & ( 1 << RXOK)){	//
     fdc:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     fe0:	85 ff       	sbrs	r24, 5
     fe2:	0d c0       	rjmp	.+26     	; 0xffe <__vector_18+0x90>
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
					MOb_data[MOb_1][byte_nr] = CANMSG;
     fe8:	aa ef       	ldi	r26, 0xFA	; 250
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	2c 91       	ld	r18, X
     fee:	fc 01       	movw	r30, r24
     ff0:	e6 58       	subi	r30, 0x86	; 134
     ff2:	fd 4f       	sbci	r31, 0xFD	; 253
     ff4:	20 87       	std	Z+8, r18	; 0x08
     ff6:	01 96       	adiw	r24, 0x01	; 1
			CANCDMOB |= RECEPTION;		
		}
		
		else if((CANPAGE>>4) == MOb_1){ //RPDO 1 - odbiera
			if(CANSTMOB & ( 1 << RXOK)){	//
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
     ff8:	88 30       	cpi	r24, 0x08	; 8
     ffa:	91 05       	cpc	r25, r1
     ffc:	b9 f7       	brne	.-18     	; 0xfec <__vector_18+0x7e>
					MOb_data[MOb_1][byte_nr] = CANMSG;
				}		
			}
			CANSTMOB=0x00;
     ffe:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x00;			//restart MOB-a
    1002:	ef ee       	ldi	r30, 0xEF	; 239
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	10 82       	st	Z, r1
			CANCDMOB |= RECEPTION;
    1008:	80 81       	ld	r24, Z
    100a:	80 68       	ori	r24, 0x80	; 128
    100c:	80 83       	st	Z, r24
    100e:	3f c0       	rjmp	.+126    	; 0x108e <__vector_18+0x120>
		}
		
		//czyszczenie flag przerwania dla paczek nadaj¹cych
		else if((CANPAGE>>4) == MOb_2){//TPDO 1
    1010:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1014:	82 95       	swap	r24
    1016:	8f 70       	andi	r24, 0x0F	; 15
    1018:	82 30       	cpi	r24, 0x02	; 2
    101a:	19 f4       	brne	.+6      	; 0x1022 <__vector_18+0xb4>
			CANSTMOB=0x00;
    101c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1020:	36 c0       	rjmp	.+108    	; 0x108e <__vector_18+0x120>
		}
		
		else if((CANPAGE>>4) == MOb_3){//TPDO 2
    1022:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1026:	82 95       	swap	r24
    1028:	8f 70       	andi	r24, 0x0F	; 15
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	19 f4       	brne	.+6      	; 0x1034 <__vector_18+0xc6>
			CANSTMOB=0x00;
    102e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1032:	2d c0       	rjmp	.+90     	; 0x108e <__vector_18+0x120>
		}
		
		else if((CANPAGE>>4) == MOb_4){//SDO TX
    1034:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1038:	82 95       	swap	r24
    103a:	8f 70       	andi	r24, 0x0F	; 15
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	19 f4       	brne	.+6      	; 0x1046 <__vector_18+0xd8>
			CANSTMOB=0x00;
    1040:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1044:	24 c0       	rjmp	.+72     	; 0x108e <__vector_18+0x120>
		}
		
		else if((CANPAGE>>4) == MOb_5){ //SDO RX - odbiera
    1046:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    104a:	82 95       	swap	r24
    104c:	8f 70       	andi	r24, 0x0F	; 15
    104e:	85 30       	cpi	r24, 0x05	; 5
    1050:	f1 f4       	brne	.+60     	; 0x108e <__vector_18+0x120>
			if(CANSTMOB & ( 1 << RXOK)){	
    1052:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1056:	85 ff       	sbrs	r24, 5
    1058:	0d c0       	rjmp	.+26     	; 0x1074 <__vector_18+0x106>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
					MOb_data[MOb_5][byte_nr] = CANMSG;
    105e:	aa ef       	ldi	r26, 0xFA	; 250
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	2c 91       	ld	r18, X
    1064:	fc 01       	movw	r30, r24
    1066:	e6 58       	subi	r30, 0x86	; 134
    1068:	fd 4f       	sbci	r31, 0xFD	; 253
    106a:	20 a7       	std	Z+40, r18	; 0x28
    106c:	01 96       	adiw	r24, 0x01	; 1
			CANSTMOB=0x00;
		}
		
		else if((CANPAGE>>4) == MOb_5){ //SDO RX - odbiera
			if(CANSTMOB & ( 1 << RXOK)){	
				for(uint8_t byte_nr=0; byte_nr<8; byte_nr++ ){//przepisanie danych z rejestru do tablicy
    106e:	88 30       	cpi	r24, 0x08	; 8
    1070:	91 05       	cpc	r25, r1
    1072:	b9 f7       	brne	.-18     	; 0x1062 <__vector_18+0xf4>
					MOb_data[MOb_5][byte_nr] = CANMSG;
				}
			}
			SET_FLAG(can_state.flags, CAN_FLAG_SDO_RECEIVED);
    1074:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    1078:	88 60       	ori	r24, 0x08	; 8
    107a:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
			CANSTMOB=0x00;
    107e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x00;			//restart MOB-a
    1082:	ef ee       	ldi	r30, 0xEF	; 239
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	10 82       	st	Z, r1
			CANCDMOB |= RECEPTION;
    1088:	80 81       	ld	r24, Z
    108a:	80 68       	ori	r24, 0x80	; 128
    108c:	80 83       	st	Z, r24
		}

} 
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	2f 91       	pop	r18
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <CAN_send_SDO>:
		else mob++;
	}
}

void CAN_send_SDO(){
		CANPAGE = ( MOb_SDO_TX << 4 );						// Selects Message Object 0-5
    10a6:	80 e4       	ldi	r24, 0x40	; 64
    10a8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if((CANEN2 & ( 1 << MOb_SDO_TX )) == 0){		//Jeœli MOb jest wolny
    10ac:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    10b0:	84 fd       	sbrc	r24, 4
    10b2:	0d c0       	rjmp	.+26     	; 0x10ce <CAN_send_SDO+0x28>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
				CANMSG = MOb_data[MOb_SDO_TX][byte_nr];
    10b8:	aa ef       	ldi	r26, 0xFA	; 250
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	fc 01       	movw	r30, r24
    10be:	e6 58       	subi	r30, 0x86	; 134
    10c0:	fd 4f       	sbci	r31, 0xFD	; 253
    10c2:	20 a1       	ldd	r18, Z+32	; 0x20
    10c4:	2c 93       	st	X, r18
    10c6:	01 96       	adiw	r24, 0x01	; 1
}

void CAN_send_SDO(){
		CANPAGE = ( MOb_SDO_TX << 4 );						// Selects Message Object 0-5
		if((CANEN2 & ( 1 << MOb_SDO_TX )) == 0){		//Jeœli MOb jest wolny
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
    10c8:	88 30       	cpi	r24, 0x08	; 8
    10ca:	91 05       	cpc	r25, r1
    10cc:	b9 f7       	brne	.-18     	; 0x10bc <CAN_send_SDO+0x16>
				CANMSG = MOb_data[MOb_SDO_TX][byte_nr];
			}
		}
		//czyszczenie rejestru statusu
		CANSTMOB = 0x00;
    10ce:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		//komenda nadania
		CANCDMOB = TRANSMISSION | ( 8 << DLC0);//zleæ transmisjê 8 bajtów
    10d2:	88 e4       	ldi	r24, 0x48	; 72
    10d4:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    10d8:	08 95       	ret

000010da <CAN_task>:
}*/

void CAN_task(){
	
	//obs³uga SDO
	if( HAS_FLAG(can_state.flags, CAN_FLAG_SDO_RECEIVED) ){
    10da:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    10de:	83 ff       	sbrs	r24, 3
    10e0:	22 c3       	rjmp	.+1604   	; 0x1726 <CAN_task+0x64c>
		
		if(MOb_data[MOb_SDO_RX][0] == SDO_READ_COMMAND){//gdy komenda odczytu
    10e2:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <MOb_data+0x28>
    10e6:	80 34       	cpi	r24, 0x40	; 64
    10e8:	09 f0       	breq	.+2      	; 0x10ec <CAN_task+0x12>
    10ea:	9a c1       	rjmp	.+820    	; 0x1420 <CAN_task+0x346>
			switch ((((uint16_t)MOb_data[MOb_SDO_RX][1])<<8) | MOb_data[MOb_SDO_RX][2]){//sprawdzanie po indexie
    10ec:	ea e7       	ldi	r30, 0x7A	; 122
    10ee:	f2 e0       	ldi	r31, 0x02	; 2
    10f0:	81 a5       	ldd	r24, Z+41	; 0x29
    10f2:	e2 a5       	ldd	r30, Z+42	; 0x2a
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	f8 2b       	or	r31, r24
    10f8:	f0 52       	subi	r31, 0x20	; 32
    10fa:	e8 30       	cpi	r30, 0x08	; 8
    10fc:	f1 05       	cpc	r31, r1
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <CAN_task+0x28>
    1100:	54 c1       	rjmp	.+680    	; 0x13aa <CAN_task+0x2d0>
    1102:	e2 5c       	subi	r30, 0xC2	; 194
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__tablejump2__>
				
				case 0x2000:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    110a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    110e:	80 62       	ori	r24, 0x20	; 32
    1110:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){ //sprawdzanie po subindexie
    1114:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	69 f0       	breq	.+26     	; 0x1136 <CAN_task+0x5c>
    111c:	18 f0       	brcs	.+6      	; 0x1124 <CAN_task+0x4a>
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	99 f0       	breq	.+38     	; 0x1148 <CAN_task+0x6e>
    1122:	1b c0       	rjmp	.+54     	; 0x115a <CAN_task+0x80>
						case 0x00:
							MOb_data[MOb_SDO_TX][4] = adc_results.raw_board_position;
    1124:	eb ed       	ldi	r30, 0xDB	; 219
    1126:	f1 e0       	ldi	r31, 0x01	; 1
    1128:	94 81       	ldd	r25, Z+4	; 0x04
    112a:	85 81       	ldd	r24, Z+5	; 0x05
    112c:	ea e7       	ldi	r30, 0x7A	; 122
    112e:	f2 e0       	ldi	r31, 0x02	; 2
    1130:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][5] = adc_results.raw_board_position >> 8;
    1132:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1134:	3f c1       	rjmp	.+638    	; 0x13b4 <CAN_task+0x2da>
						
						case 0x01:
							MOb_data[MOb_SDO_TX][4] = adc_results.raw_current;
    1136:	eb ed       	ldi	r30, 0xDB	; 219
    1138:	f1 e0       	ldi	r31, 0x01	; 1
    113a:	90 81       	ld	r25, Z
    113c:	81 81       	ldd	r24, Z+1	; 0x01
    113e:	ea e7       	ldi	r30, 0x7A	; 122
    1140:	f2 e0       	ldi	r31, 0x02	; 2
    1142:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][5] = adc_results.raw_current >> 8;
    1144:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1146:	36 c1       	rjmp	.+620    	; 0x13b4 <CAN_task+0x2da>
						
						case 0x02:
							MOb_data[MOb_SDO_TX][4] = adc_results.raw_voltage;
    1148:	eb ed       	ldi	r30, 0xDB	; 219
    114a:	f1 e0       	ldi	r31, 0x01	; 1
    114c:	92 81       	ldd	r25, Z+2	; 0x02
    114e:	83 81       	ldd	r24, Z+3	; 0x03
    1150:	ea e7       	ldi	r30, 0x7A	; 122
    1152:	f2 e0       	ldi	r31, 0x02	; 2
    1154:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][5] = adc_results.raw_voltage >> 8;
    1156:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1158:	2d c1       	rjmp	.+602    	; 0x13b4 <CAN_task+0x2da>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    115a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    115e:	80 61       	ori	r24, 0x10	; 16
    1160:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    1164:	27 c1       	rjmp	.+590    	; 0x13b4 <CAN_task+0x2da>
					}
				break;
				
				case 0x2001:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    1166:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    116a:	80 62       	ori	r24, 0x20	; 32
    116c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){
    1170:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    1174:	88 23       	and	r24, r24
    1176:	19 f0       	breq	.+6      	; 0x117e <CAN_task+0xa4>
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	51 f0       	breq	.+20     	; 0x1190 <CAN_task+0xb6>
    117c:	12 c0       	rjmp	.+36     	; 0x11a2 <CAN_task+0xc8>
						case 0x00:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.adc_board_position_max;
    117e:	ea e4       	ldi	r30, 0x4A	; 74
    1180:	f2 e0       	ldi	r31, 0x02	; 2
    1182:	90 81       	ld	r25, Z
    1184:	81 81       	ldd	r24, Z+1	; 0x01
    1186:	ea e7       	ldi	r30, 0x7A	; 122
    1188:	f2 e0       	ldi	r31, 0x02	; 2
    118a:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][5] = non_volatile_data.adc_board_position_max >> 8;
    118c:	85 a3       	std	Z+37, r24	; 0x25
						break;
    118e:	12 c1       	rjmp	.+548    	; 0x13b4 <CAN_task+0x2da>
						
						case 0x01:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.adc_board_position_min;
    1190:	ea e4       	ldi	r30, 0x4A	; 74
    1192:	f2 e0       	ldi	r31, 0x02	; 2
    1194:	92 81       	ldd	r25, Z+2	; 0x02
    1196:	83 81       	ldd	r24, Z+3	; 0x03
    1198:	ea e7       	ldi	r30, 0x7A	; 122
    119a:	f2 e0       	ldi	r31, 0x02	; 2
    119c:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][5] = non_volatile_data.adc_board_position_min >> 8;
    119e:	85 a3       	std	Z+37, r24	; 0x25
						break;
    11a0:	09 c1       	rjmp	.+530    	; 0x13b4 <CAN_task+0x2da>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    11a2:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    11a6:	80 61       	ori	r24, 0x10	; 16
    11a8:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    11ac:	03 c1       	rjmp	.+518    	; 0x13b4 <CAN_task+0x2da>
					}
				break;
				
				case 0x2002:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    11ae:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    11b2:	80 62       	ori	r24, 0x20	; 32
    11b4:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){
    11b8:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    11bc:	88 23       	and	r24, r24
    11be:	19 f0       	breq	.+6      	; 0x11c6 <CAN_task+0xec>
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	51 f0       	breq	.+20     	; 0x11d8 <CAN_task+0xfe>
    11c4:	12 c0       	rjmp	.+36     	; 0x11ea <CAN_task+0x110>
						case 0x00:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.adc_current_offset;
    11c6:	ea e4       	ldi	r30, 0x4A	; 74
    11c8:	f2 e0       	ldi	r31, 0x02	; 2
    11ca:	94 81       	ldd	r25, Z+4	; 0x04
    11cc:	85 81       	ldd	r24, Z+5	; 0x05
    11ce:	ea e7       	ldi	r30, 0x7A	; 122
    11d0:	f2 e0       	ldi	r31, 0x02	; 2
    11d2:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][5] = non_volatile_data.adc_current_offset >> 8;
    11d4:	85 a3       	std	Z+37, r24	; 0x25
						break;
    11d6:	ee c0       	rjmp	.+476    	; 0x13b4 <CAN_task+0x2da>
					
						case 0x01:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.adc_current_scale;
    11d8:	ea e4       	ldi	r30, 0x4A	; 74
    11da:	f2 e0       	ldi	r31, 0x02	; 2
    11dc:	96 81       	ldd	r25, Z+6	; 0x06
    11de:	87 81       	ldd	r24, Z+7	; 0x07
    11e0:	ea e7       	ldi	r30, 0x7A	; 122
    11e2:	f2 e0       	ldi	r31, 0x02	; 2
    11e4:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][5] = non_volatile_data.adc_current_scale >> 8;
    11e6:	85 a3       	std	Z+37, r24	; 0x25
						break;
    11e8:	e5 c0       	rjmp	.+458    	; 0x13b4 <CAN_task+0x2da>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    11ea:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    11ee:	80 61       	ori	r24, 0x10	; 16
    11f0:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    11f4:	df c0       	rjmp	.+446    	; 0x13b4 <CAN_task+0x2da>
					}
				break;
				
				case 0x2003:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    11f6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    11fa:	80 62       	ori	r24, 0x20	; 32
    11fc:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){
    1200:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    1204:	88 23       	and	r24, r24
    1206:	19 f0       	breq	.+6      	; 0x120e <CAN_task+0x134>
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	51 f0       	breq	.+20     	; 0x1220 <CAN_task+0x146>
    120c:	12 c0       	rjmp	.+36     	; 0x1232 <CAN_task+0x158>
						case 0x00:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.adc_voltage_offset;
    120e:	ea e4       	ldi	r30, 0x4A	; 74
    1210:	f2 e0       	ldi	r31, 0x02	; 2
    1212:	90 85       	ldd	r25, Z+8	; 0x08
    1214:	81 85       	ldd	r24, Z+9	; 0x09
    1216:	ea e7       	ldi	r30, 0x7A	; 122
    1218:	f2 e0       	ldi	r31, 0x02	; 2
    121a:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][5] = non_volatile_data.adc_voltage_offset >> 8;
    121c:	85 a3       	std	Z+37, r24	; 0x25
						break;
    121e:	ca c0       	rjmp	.+404    	; 0x13b4 <CAN_task+0x2da>
					
						case 0x01:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.adc_voltage_scale;
    1220:	ea e4       	ldi	r30, 0x4A	; 74
    1222:	f2 e0       	ldi	r31, 0x02	; 2
    1224:	92 85       	ldd	r25, Z+10	; 0x0a
    1226:	83 85       	ldd	r24, Z+11	; 0x0b
    1228:	ea e7       	ldi	r30, 0x7A	; 122
    122a:	f2 e0       	ldi	r31, 0x02	; 2
    122c:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][5] = non_volatile_data.adc_voltage_scale >> 8;
    122e:	85 a3       	std	Z+37, r24	; 0x25
						break;
    1230:	c1 c0       	rjmp	.+386    	; 0x13b4 <CAN_task+0x2da>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    1232:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    1236:	80 61       	ori	r24, 0x10	; 16
    1238:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    123c:	bb c0       	rjmp	.+374    	; 0x13b4 <CAN_task+0x2da>
					}
				break;
				
				case 0x2004:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_8);
    123e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    1242:	80 61       	ori	r24, 0x10	; 16
    1244:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){
    1248:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    124c:	88 23       	and	r24, r24
    124e:	19 f0       	breq	.+6      	; 0x1256 <CAN_task+0x17c>
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	31 f0       	breq	.+12     	; 0x1260 <CAN_task+0x186>
    1254:	0a c0       	rjmp	.+20     	; 0x126a <CAN_task+0x190>
						case 0x00:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.winch_overcurrent_value;
    1256:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <non_volatile_data+0xc>
    125a:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <MOb_data+0x24>
						break;
    125e:	aa c0       	rjmp	.+340    	; 0x13b4 <CAN_task+0x2da>
					
						case 0x01:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.board_overcurrent_value;
    1260:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <non_volatile_data+0xd>
    1264:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <MOb_data+0x24>
						break;
    1268:	a5 c0       	rjmp	.+330    	; 0x13b4 <CAN_task+0x2da>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    126a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    126e:	80 61       	ori	r24, 0x10	; 16
    1270:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    1274:	9f c0       	rjmp	.+318    	; 0x13b4 <CAN_task+0x2da>
					}
				break;
				
				case 0x2005:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    1276:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    127a:	80 62       	ori	r24, 0x20	; 32
    127c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){
    1280:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	79 f0       	breq	.+30     	; 0x12a6 <CAN_task+0x1cc>
    1288:	28 f0       	brcs	.+10     	; 0x1294 <CAN_task+0x1ba>
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	a9 f0       	breq	.+42     	; 0x12b8 <CAN_task+0x1de>
    128e:	83 30       	cpi	r24, 0x03	; 3
    1290:	e1 f0       	breq	.+56     	; 0x12ca <CAN_task+0x1f0>
    1292:	24 c0       	rjmp	.+72     	; 0x12dc <CAN_task+0x202>
						case 0x00:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_init_val_winch_up;
    1294:	ea e4       	ldi	r30, 0x4A	; 74
    1296:	f2 e0       	ldi	r31, 0x02	; 2
    1298:	96 85       	ldd	r25, Z+14	; 0x0e
    129a:	87 85       	ldd	r24, Z+15	; 0x0f
    129c:	ea e7       	ldi	r30, 0x7A	; 122
    129e:	f2 e0       	ldi	r31, 0x02	; 2
    12a0:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_init_val_winch_up >> 8;
    12a2:	84 a3       	std	Z+36, r24	; 0x24
						break;
    12a4:	87 c0       	rjmp	.+270    	; 0x13b4 <CAN_task+0x2da>
					
						case 0x01:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_init_val_winch_down;
    12a6:	ea e4       	ldi	r30, 0x4A	; 74
    12a8:	f2 e0       	ldi	r31, 0x02	; 2
    12aa:	90 89       	ldd	r25, Z+16	; 0x10
    12ac:	81 89       	ldd	r24, Z+17	; 0x11
    12ae:	ea e7       	ldi	r30, 0x7A	; 122
    12b0:	f2 e0       	ldi	r31, 0x02	; 2
    12b2:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_init_val_winch_down >> 8;
    12b4:	84 a3       	std	Z+36, r24	; 0x24
						break;
    12b6:	7e c0       	rjmp	.+252    	; 0x13b4 <CAN_task+0x2da>
						
						case 0x02:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_init_val_board_up;
    12b8:	ea e4       	ldi	r30, 0x4A	; 74
    12ba:	f2 e0       	ldi	r31, 0x02	; 2
    12bc:	92 89       	ldd	r25, Z+18	; 0x12
    12be:	83 89       	ldd	r24, Z+19	; 0x13
    12c0:	ea e7       	ldi	r30, 0x7A	; 122
    12c2:	f2 e0       	ldi	r31, 0x02	; 2
    12c4:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_init_val_board_up >> 8;
    12c6:	84 a3       	std	Z+36, r24	; 0x24
						break;
    12c8:	75 c0       	rjmp	.+234    	; 0x13b4 <CAN_task+0x2da>
					
						case 0x03:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_init_val_board_down;
    12ca:	ea e4       	ldi	r30, 0x4A	; 74
    12cc:	f2 e0       	ldi	r31, 0x02	; 2
    12ce:	94 89       	ldd	r25, Z+20	; 0x14
    12d0:	85 89       	ldd	r24, Z+21	; 0x15
    12d2:	ea e7       	ldi	r30, 0x7A	; 122
    12d4:	f2 e0       	ldi	r31, 0x02	; 2
    12d6:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_init_val_board_down >> 8;
    12d8:	84 a3       	std	Z+36, r24	; 0x24
						break;
    12da:	6c c0       	rjmp	.+216    	; 0x13b4 <CAN_task+0x2da>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    12dc:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    12e0:	80 61       	ori	r24, 0x10	; 16
    12e2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    12e6:	66 c0       	rjmp	.+204    	; 0x13b4 <CAN_task+0x2da>
					}
				break;
				
				case 0x2006:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_8);
    12e8:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    12ec:	80 61       	ori	r24, 0x10	; 16
    12ee:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){
    12f2:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	59 f0       	breq	.+22     	; 0x1310 <CAN_task+0x236>
    12fa:	28 f0       	brcs	.+10     	; 0x1306 <CAN_task+0x22c>
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	69 f0       	breq	.+26     	; 0x131a <CAN_task+0x240>
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	81 f0       	breq	.+32     	; 0x1324 <CAN_task+0x24a>
    1304:	14 c0       	rjmp	.+40     	; 0x132e <CAN_task+0x254>
						case 0x00:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_period_winch_up;
    1306:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <non_volatile_data+0x16>
    130a:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <MOb_data+0x24>
						break;
    130e:	52 c0       	rjmp	.+164    	; 0x13b4 <CAN_task+0x2da>
					
						case 0x01:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_period_winch_down;
    1310:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <non_volatile_data+0x17>
    1314:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <MOb_data+0x24>
						break;
    1318:	4d c0       	rjmp	.+154    	; 0x13b4 <CAN_task+0x2da>
					
						case 0x02:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_period_board_up;
    131a:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <non_volatile_data+0x18>
    131e:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <MOb_data+0x24>
						break;
    1322:	48 c0       	rjmp	.+144    	; 0x13b4 <CAN_task+0x2da>
					
						case 0x03:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_period_board_down;
    1324:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <non_volatile_data+0x19>
    1328:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <MOb_data+0x24>
						break;
    132c:	43 c0       	rjmp	.+134    	; 0x13b4 <CAN_task+0x2da>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    132e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    1332:	80 61       	ori	r24, 0x10	; 16
    1334:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    1338:	3d c0       	rjmp	.+122    	; 0x13b4 <CAN_task+0x2da>
					}
				break;
				
				case 0x2007:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    133a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    133e:	80 62       	ori	r24, 0x20	; 32
    1340:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){
    1344:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	79 f0       	breq	.+30     	; 0x136a <CAN_task+0x290>
    134c:	28 f0       	brcs	.+10     	; 0x1358 <CAN_task+0x27e>
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	a9 f0       	breq	.+42     	; 0x137c <CAN_task+0x2a2>
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	e1 f0       	breq	.+56     	; 0x138e <CAN_task+0x2b4>
    1356:	24 c0       	rjmp	.+72     	; 0x13a0 <CAN_task+0x2c6>
						case 0x00:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_winch_up;
    1358:	ea e4       	ldi	r30, 0x4A	; 74
    135a:	f2 e0       	ldi	r31, 0x02	; 2
    135c:	92 8d       	ldd	r25, Z+26	; 0x1a
    135e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1360:	ea e7       	ldi	r30, 0x7A	; 122
    1362:	f2 e0       	ldi	r31, 0x02	; 2
    1364:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_winch_up >> 8;
    1366:	84 a3       	std	Z+36, r24	; 0x24
						break;
    1368:	20 c0       	rjmp	.+64     	; 0x13aa <CAN_task+0x2d0>
					
						case 0x01:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_winch_down;
    136a:	ea e4       	ldi	r30, 0x4A	; 74
    136c:	f2 e0       	ldi	r31, 0x02	; 2
    136e:	94 8d       	ldd	r25, Z+28	; 0x1c
    1370:	85 8d       	ldd	r24, Z+29	; 0x1d
    1372:	ea e7       	ldi	r30, 0x7A	; 122
    1374:	f2 e0       	ldi	r31, 0x02	; 2
    1376:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_winch_down >> 8;
    1378:	84 a3       	std	Z+36, r24	; 0x24
						break;
    137a:	17 c0       	rjmp	.+46     	; 0x13aa <CAN_task+0x2d0>
						
						case 0x02:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_board_up;
    137c:	ea e4       	ldi	r30, 0x4A	; 74
    137e:	f2 e0       	ldi	r31, 0x02	; 2
    1380:	96 8d       	ldd	r25, Z+30	; 0x1e
    1382:	87 8d       	ldd	r24, Z+31	; 0x1f
    1384:	ea e7       	ldi	r30, 0x7A	; 122
    1386:	f2 e0       	ldi	r31, 0x02	; 2
    1388:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_board_up >> 8;
    138a:	84 a3       	std	Z+36, r24	; 0x24
						break;
    138c:	0e c0       	rjmp	.+28     	; 0x13aa <CAN_task+0x2d0>
					
						case 0x03:
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_board_down;
    138e:	ea e4       	ldi	r30, 0x4A	; 74
    1390:	f2 e0       	ldi	r31, 0x02	; 2
    1392:	90 a1       	ldd	r25, Z+32	; 0x20
    1394:	81 a1       	ldd	r24, Z+33	; 0x21
    1396:	ea e7       	ldi	r30, 0x7A	; 122
    1398:	f2 e0       	ldi	r31, 0x02	; 2
    139a:	94 a3       	std	Z+36, r25	; 0x24
							MOb_data[MOb_SDO_TX][4] = non_volatile_data.torque_rising_speed_board_down >> 8;
    139c:	84 a3       	std	Z+36, r24	; 0x24
						break;
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <CAN_task+0x2d0>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    13a0:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    13a4:	80 61       	ori	r24, 0x10	; 16
    13a6:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					}
					
				default:
					SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    13aa:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    13ae:	80 61       	ori	r24, 0x10	; 16
    13b0:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
			}
			//uzupe³nianie pozosta³ych pól pakietu
			if(!(HAS_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED))){
    13b4:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    13b8:	84 fd       	sbrc	r24, 4
    13ba:	23 c0       	rjmp	.+70     	; 0x1402 <CAN_task+0x328>
				if(HAS_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16)){
    13bc:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    13c0:	85 ff       	sbrs	r24, 5
    13c2:	0d c0       	rjmp	.+26     	; 0x13de <CAN_task+0x304>
					SDO_READ_POSITIVE_RESPONSE_16;
    13c4:	ea e7       	ldi	r30, 0x7A	; 122
    13c6:	f2 e0       	ldi	r31, 0x02	; 2
    13c8:	8b e4       	ldi	r24, 0x4B	; 75
    13ca:	80 a3       	std	Z+32, r24	; 0x20
    13cc:	81 a5       	ldd	r24, Z+41	; 0x29
    13ce:	81 a3       	std	Z+33, r24	; 0x21
    13d0:	82 a5       	ldd	r24, Z+42	; 0x2a
    13d2:	82 a3       	std	Z+34, r24	; 0x22
    13d4:	83 a5       	ldd	r24, Z+43	; 0x2b
    13d6:	83 a3       	std	Z+35, r24	; 0x23
    13d8:	16 a2       	std	Z+38, r1	; 0x26
    13da:	17 a2       	std	Z+39, r1	; 0x27
    13dc:	9c c1       	rjmp	.+824    	; 0x1716 <CAN_task+0x63c>

				}
				else if(HAS_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_8)){
    13de:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    13e2:	84 ff       	sbrs	r24, 4
    13e4:	98 c1       	rjmp	.+816    	; 0x1716 <CAN_task+0x63c>
					SDO_READ_POSITIVE_RESPONSE_8;
    13e6:	ea e7       	ldi	r30, 0x7A	; 122
    13e8:	f2 e0       	ldi	r31, 0x02	; 2
    13ea:	8f e4       	ldi	r24, 0x4F	; 79
    13ec:	80 a3       	std	Z+32, r24	; 0x20
    13ee:	81 a5       	ldd	r24, Z+41	; 0x29
    13f0:	81 a3       	std	Z+33, r24	; 0x21
    13f2:	82 a5       	ldd	r24, Z+42	; 0x2a
    13f4:	82 a3       	std	Z+34, r24	; 0x22
    13f6:	83 a5       	ldd	r24, Z+43	; 0x2b
    13f8:	83 a3       	std	Z+35, r24	; 0x23
    13fa:	15 a2       	std	Z+37, r1	; 0x25
    13fc:	16 a2       	std	Z+38, r1	; 0x26
    13fe:	17 a2       	std	Z+39, r1	; 0x27
    1400:	8a c1       	rjmp	.+788    	; 0x1716 <CAN_task+0x63c>
				}
			}
			else{
				SDO_NEGATIVE_RESPONSE;
    1402:	ea e7       	ldi	r30, 0x7A	; 122
    1404:	f2 e0       	ldi	r31, 0x02	; 2
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	80 a3       	std	Z+32, r24	; 0x20
    140a:	81 a5       	ldd	r24, Z+41	; 0x29
    140c:	81 a3       	std	Z+33, r24	; 0x21
    140e:	82 a5       	ldd	r24, Z+42	; 0x2a
    1410:	82 a3       	std	Z+34, r24	; 0x22
    1412:	83 a5       	ldd	r24, Z+43	; 0x2b
    1414:	83 a3       	std	Z+35, r24	; 0x23
    1416:	14 a2       	std	Z+36, r1	; 0x24
    1418:	15 a2       	std	Z+37, r1	; 0x25
    141a:	16 a2       	std	Z+38, r1	; 0x26
    141c:	17 a2       	std	Z+39, r1	; 0x27
    141e:	7b c1       	rjmp	.+758    	; 0x1716 <CAN_task+0x63c>
			}
		}
		/*--ZAPIS--*/
		else if(MOb_data[MOb_SDO_RX][0] & SDO_WRITE_COMMAND){//gdy komenda zapisu
    1420:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <MOb_data+0x28>
    1424:	83 72       	andi	r24, 0x23	; 35
    1426:	09 f4       	brne	.+2      	; 0x142a <CAN_task+0x350>
    1428:	68 c1       	rjmp	.+720    	; 0x16fa <CAN_task+0x620>
			switch ((((uint16_t)MOb_data[MOb_SDO_RX][1])<<8) | MOb_data[MOb_SDO_RX][2]){
    142a:	ea e7       	ldi	r30, 0x7A	; 122
    142c:	f2 e0       	ldi	r31, 0x02	; 2
    142e:	81 a5       	ldd	r24, Z+41	; 0x29
    1430:	e2 a5       	ldd	r30, Z+42	; 0x2a
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	f8 2b       	or	r31, r24
    1436:	e1 50       	subi	r30, 0x01	; 1
    1438:	f0 42       	sbci	r31, 0x20	; 32
    143a:	e7 30       	cpi	r30, 0x07	; 7
    143c:	f1 05       	cpc	r31, r1
    143e:	08 f0       	brcs	.+2      	; 0x1442 <CAN_task+0x368>
    1440:	33 c1       	rjmp	.+614    	; 0x16a8 <CAN_task+0x5ce>
    1442:	ea 5b       	subi	r30, 0xBA	; 186
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__tablejump2__>
				
				case 0x2001:
					switch(MOb_data[MOb_SDO_RX][3]){
    144a:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    144e:	88 23       	and	r24, r24
    1450:	19 f0       	breq	.+6      	; 0x1458 <CAN_task+0x37e>
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	61 f0       	breq	.+24     	; 0x146e <CAN_task+0x394>
    1456:	16 c0       	rjmp	.+44     	; 0x1484 <CAN_task+0x3aa>
						case 0x00:
							non_volatile_data.adc_board_position_max = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    1458:	ea e7       	ldi	r30, 0x7A	; 122
    145a:	f2 e0       	ldi	r31, 0x02	; 2
    145c:	84 a5       	ldd	r24, Z+44	; 0x2c
    145e:	25 a5       	ldd	r18, Z+45	; 0x2d
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	92 2b       	or	r25, r18
    1464:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <non_volatile_data+0x1>
    1468:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <non_volatile_data>
						break;
    146c:	22 c1       	rjmp	.+580    	; 0x16b2 <CAN_task+0x5d8>
						
						case 0x01:
							non_volatile_data.adc_board_position_min = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    146e:	ea e7       	ldi	r30, 0x7A	; 122
    1470:	f2 e0       	ldi	r31, 0x02	; 2
    1472:	84 a5       	ldd	r24, Z+44	; 0x2c
    1474:	25 a5       	ldd	r18, Z+45	; 0x2d
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	92 2b       	or	r25, r18
    147a:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <non_volatile_data+0x3>
    147e:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <non_volatile_data+0x2>
						break;
    1482:	17 c1       	rjmp	.+558    	; 0x16b2 <CAN_task+0x5d8>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    1484:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    1488:	80 61       	ori	r24, 0x10	; 16
    148a:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    148e:	11 c1       	rjmp	.+546    	; 0x16b2 <CAN_task+0x5d8>
					}
				break;
				
				case 0x2002:
					switch(MOb_data[MOb_SDO_RX][3]){
    1490:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    1494:	88 23       	and	r24, r24
    1496:	19 f0       	breq	.+6      	; 0x149e <CAN_task+0x3c4>
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	61 f0       	breq	.+24     	; 0x14b4 <CAN_task+0x3da>
    149c:	16 c0       	rjmp	.+44     	; 0x14ca <CAN_task+0x3f0>
						case 0x00:
							non_volatile_data.adc_current_offset = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    149e:	ea e7       	ldi	r30, 0x7A	; 122
    14a0:	f2 e0       	ldi	r31, 0x02	; 2
    14a2:	84 a5       	ldd	r24, Z+44	; 0x2c
    14a4:	25 a5       	ldd	r18, Z+45	; 0x2d
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	92 2b       	or	r25, r18
    14aa:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <non_volatile_data+0x5>
    14ae:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <non_volatile_data+0x4>
						break;
    14b2:	ff c0       	rjmp	.+510    	; 0x16b2 <CAN_task+0x5d8>
					
						case 0x01:
							non_volatile_data.adc_current_scale = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    14b4:	ea e7       	ldi	r30, 0x7A	; 122
    14b6:	f2 e0       	ldi	r31, 0x02	; 2
    14b8:	84 a5       	ldd	r24, Z+44	; 0x2c
    14ba:	25 a5       	ldd	r18, Z+45	; 0x2d
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	92 2b       	or	r25, r18
    14c0:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <non_volatile_data+0x7>
    14c4:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <non_volatile_data+0x6>
						break;
    14c8:	f4 c0       	rjmp	.+488    	; 0x16b2 <CAN_task+0x5d8>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    14ca:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    14ce:	80 61       	ori	r24, 0x10	; 16
    14d0:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    14d4:	ee c0       	rjmp	.+476    	; 0x16b2 <CAN_task+0x5d8>
					}
				break;
				
				case 0x2003:
					switch(MOb_data[MOb_SDO_RX][3]){
    14d6:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    14da:	88 23       	and	r24, r24
    14dc:	19 f0       	breq	.+6      	; 0x14e4 <CAN_task+0x40a>
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	61 f0       	breq	.+24     	; 0x14fa <CAN_task+0x420>
    14e2:	16 c0       	rjmp	.+44     	; 0x1510 <CAN_task+0x436>
						case 0x00:
							non_volatile_data.adc_voltage_offset = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    14e4:	ea e7       	ldi	r30, 0x7A	; 122
    14e6:	f2 e0       	ldi	r31, 0x02	; 2
    14e8:	84 a5       	ldd	r24, Z+44	; 0x2c
    14ea:	25 a5       	ldd	r18, Z+45	; 0x2d
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	92 2b       	or	r25, r18
    14f0:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <non_volatile_data+0x9>
    14f4:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <non_volatile_data+0x8>
						break;
    14f8:	dc c0       	rjmp	.+440    	; 0x16b2 <CAN_task+0x5d8>
					
						case 0x01:
							non_volatile_data.adc_voltage_scale = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    14fa:	ea e7       	ldi	r30, 0x7A	; 122
    14fc:	f2 e0       	ldi	r31, 0x02	; 2
    14fe:	84 a5       	ldd	r24, Z+44	; 0x2c
    1500:	25 a5       	ldd	r18, Z+45	; 0x2d
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	92 2b       	or	r25, r18
    1506:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <non_volatile_data+0xb>
    150a:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <non_volatile_data+0xa>
						break;
    150e:	d1 c0       	rjmp	.+418    	; 0x16b2 <CAN_task+0x5d8>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    1510:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    1514:	80 61       	ori	r24, 0x10	; 16
    1516:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    151a:	cb c0       	rjmp	.+406    	; 0x16b2 <CAN_task+0x5d8>
					}
				break;
				
				case 0x2004:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_8);
    151c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    1520:	80 61       	ori	r24, 0x10	; 16
    1522:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){
    1526:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    152a:	88 23       	and	r24, r24
    152c:	19 f0       	breq	.+6      	; 0x1534 <CAN_task+0x45a>
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	31 f0       	breq	.+12     	; 0x153e <CAN_task+0x464>
    1532:	0a c0       	rjmp	.+20     	; 0x1548 <CAN_task+0x46e>
						case 0x00:
							non_volatile_data.winch_overcurrent_value = MOb_data[MOb_SDO_RX][4];
    1534:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <MOb_data+0x2c>
    1538:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <non_volatile_data+0xc>
						break;
    153c:	ba c0       	rjmp	.+372    	; 0x16b2 <CAN_task+0x5d8>
					
						case 0x01:
							non_volatile_data.board_overcurrent_value = MOb_data[MOb_SDO_RX][4];
    153e:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <MOb_data+0x2c>
    1542:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <non_volatile_data+0xd>
						break;
    1546:	b5 c0       	rjmp	.+362    	; 0x16b2 <CAN_task+0x5d8>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    1548:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    154c:	80 61       	ori	r24, 0x10	; 16
    154e:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    1552:	af c0       	rjmp	.+350    	; 0x16b2 <CAN_task+0x5d8>
					}
				break;
				
				case 0x2005:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    1554:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    1558:	80 62       	ori	r24, 0x20	; 32
    155a:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){
    155e:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	89 f0       	breq	.+34     	; 0x1588 <CAN_task+0x4ae>
    1566:	28 f0       	brcs	.+10     	; 0x1572 <CAN_task+0x498>
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	c9 f0       	breq	.+50     	; 0x159e <CAN_task+0x4c4>
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	11 f1       	breq	.+68     	; 0x15b4 <CAN_task+0x4da>
    1570:	2c c0       	rjmp	.+88     	; 0x15ca <CAN_task+0x4f0>
						case 0x00:
							non_volatile_data.torque_init_val_winch_up = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    1572:	ea e7       	ldi	r30, 0x7A	; 122
    1574:	f2 e0       	ldi	r31, 0x02	; 2
    1576:	84 a5       	ldd	r24, Z+44	; 0x2c
    1578:	25 a5       	ldd	r18, Z+45	; 0x2d
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	92 2b       	or	r25, r18
    157e:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <non_volatile_data+0xf>
    1582:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <non_volatile_data+0xe>
						break;
    1586:	95 c0       	rjmp	.+298    	; 0x16b2 <CAN_task+0x5d8>
					
						case 0x01:
							non_volatile_data.torque_init_val_winch_down = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    1588:	ea e7       	ldi	r30, 0x7A	; 122
    158a:	f2 e0       	ldi	r31, 0x02	; 2
    158c:	84 a5       	ldd	r24, Z+44	; 0x2c
    158e:	25 a5       	ldd	r18, Z+45	; 0x2d
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	92 2b       	or	r25, r18
    1594:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <non_volatile_data+0x11>
    1598:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <non_volatile_data+0x10>
						break;
    159c:	8a c0       	rjmp	.+276    	; 0x16b2 <CAN_task+0x5d8>
						
						case 0x02:
							non_volatile_data.torque_init_val_board_up = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    159e:	ea e7       	ldi	r30, 0x7A	; 122
    15a0:	f2 e0       	ldi	r31, 0x02	; 2
    15a2:	84 a5       	ldd	r24, Z+44	; 0x2c
    15a4:	25 a5       	ldd	r18, Z+45	; 0x2d
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	92 2b       	or	r25, r18
    15aa:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <non_volatile_data+0x13>
    15ae:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <non_volatile_data+0x12>
						break;
    15b2:	7f c0       	rjmp	.+254    	; 0x16b2 <CAN_task+0x5d8>
					
						case 0x03:
							non_volatile_data.torque_init_val_board_down = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    15b4:	ea e7       	ldi	r30, 0x7A	; 122
    15b6:	f2 e0       	ldi	r31, 0x02	; 2
    15b8:	84 a5       	ldd	r24, Z+44	; 0x2c
    15ba:	25 a5       	ldd	r18, Z+45	; 0x2d
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	92 2b       	or	r25, r18
    15c0:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <non_volatile_data+0x15>
    15c4:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <non_volatile_data+0x14>
						break;
    15c8:	74 c0       	rjmp	.+232    	; 0x16b2 <CAN_task+0x5d8>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    15ca:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    15ce:	80 61       	ori	r24, 0x10	; 16
    15d0:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    15d4:	6e c0       	rjmp	.+220    	; 0x16b2 <CAN_task+0x5d8>
					}
				break;
				
				case 0x2006:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_8);
    15d6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    15da:	80 61       	ori	r24, 0x10	; 16
    15dc:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){
    15e0:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	59 f0       	breq	.+22     	; 0x15fe <CAN_task+0x524>
    15e8:	28 f0       	brcs	.+10     	; 0x15f4 <CAN_task+0x51a>
    15ea:	82 30       	cpi	r24, 0x02	; 2
    15ec:	69 f0       	breq	.+26     	; 0x1608 <CAN_task+0x52e>
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	81 f0       	breq	.+32     	; 0x1612 <CAN_task+0x538>
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <CAN_task+0x542>
						case 0x00:
							non_volatile_data.torque_rising_speed_period_winch_up = MOb_data[MOb_SDO_RX][4];
    15f4:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <MOb_data+0x2c>
    15f8:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <non_volatile_data+0x16>
						break;
    15fc:	5a c0       	rjmp	.+180    	; 0x16b2 <CAN_task+0x5d8>
					
						case 0x01:
							non_volatile_data.torque_rising_speed_period_winch_down = MOb_data[MOb_SDO_RX][4];
    15fe:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <MOb_data+0x2c>
    1602:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <non_volatile_data+0x17>
						break;
    1606:	55 c0       	rjmp	.+170    	; 0x16b2 <CAN_task+0x5d8>
					
						case 0x02:
							non_volatile_data.torque_rising_speed_period_board_up = MOb_data[MOb_SDO_RX][4];
    1608:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <MOb_data+0x2c>
    160c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <non_volatile_data+0x18>
						break;
    1610:	50 c0       	rjmp	.+160    	; 0x16b2 <CAN_task+0x5d8>
					
						case 0x03:
							non_volatile_data.torque_rising_speed_period_board_down = MOb_data[MOb_SDO_RX][4];
    1612:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <MOb_data+0x2c>
    1616:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <non_volatile_data+0x19>
						break;
    161a:	4b c0       	rjmp	.+150    	; 0x16b2 <CAN_task+0x5d8>
					
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    161c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    1620:	80 61       	ori	r24, 0x10	; 16
    1622:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    1626:	45 c0       	rjmp	.+138    	; 0x16b2 <CAN_task+0x5d8>
					}
				break;
				
				case 0x2007:
					SET_FLAG(can_state.flags, CAN_FLAG_DATA_LENGTH_16);
    1628:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    162c:	80 62       	ori	r24, 0x20	; 32
    162e:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					switch(MOb_data[MOb_SDO_RX][3]){
    1632:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <MOb_data+0x2b>
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	89 f0       	breq	.+34     	; 0x165c <CAN_task+0x582>
    163a:	28 f0       	brcs	.+10     	; 0x1646 <CAN_task+0x56c>
    163c:	82 30       	cpi	r24, 0x02	; 2
    163e:	c9 f0       	breq	.+50     	; 0x1672 <CAN_task+0x598>
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	11 f1       	breq	.+68     	; 0x1688 <CAN_task+0x5ae>
    1644:	2c c0       	rjmp	.+88     	; 0x169e <CAN_task+0x5c4>
						case 0x00:
							non_volatile_data.torque_rising_speed_winch_up = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    1646:	ea e7       	ldi	r30, 0x7A	; 122
    1648:	f2 e0       	ldi	r31, 0x02	; 2
    164a:	84 a5       	ldd	r24, Z+44	; 0x2c
    164c:	25 a5       	ldd	r18, Z+45	; 0x2d
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	92 2b       	or	r25, r18
    1652:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <non_volatile_data+0x1b>
    1656:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <non_volatile_data+0x1a>
						break;
    165a:	26 c0       	rjmp	.+76     	; 0x16a8 <CAN_task+0x5ce>
					
						case 0x01:
							non_volatile_data.torque_rising_speed_winch_down = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    165c:	ea e7       	ldi	r30, 0x7A	; 122
    165e:	f2 e0       	ldi	r31, 0x02	; 2
    1660:	84 a5       	ldd	r24, Z+44	; 0x2c
    1662:	25 a5       	ldd	r18, Z+45	; 0x2d
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	92 2b       	or	r25, r18
    1668:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <non_volatile_data+0x1d>
    166c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <non_volatile_data+0x1c>
						break;
    1670:	1b c0       	rjmp	.+54     	; 0x16a8 <CAN_task+0x5ce>
						
						case 0x02:
							non_volatile_data.torque_rising_speed_board_up = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    1672:	ea e7       	ldi	r30, 0x7A	; 122
    1674:	f2 e0       	ldi	r31, 0x02	; 2
    1676:	84 a5       	ldd	r24, Z+44	; 0x2c
    1678:	25 a5       	ldd	r18, Z+45	; 0x2d
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	92 2b       	or	r25, r18
    167e:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <non_volatile_data+0x1f>
    1682:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <non_volatile_data+0x1e>
						break;
    1686:	10 c0       	rjmp	.+32     	; 0x16a8 <CAN_task+0x5ce>
					
						case 0x03:
							non_volatile_data.torque_rising_speed_board_down = MOb_data[MOb_SDO_RX][4] | (MOb_data[MOb_SDO_RX][5] << 8);
    1688:	ea e7       	ldi	r30, 0x7A	; 122
    168a:	f2 e0       	ldi	r31, 0x02	; 2
    168c:	84 a5       	ldd	r24, Z+44	; 0x2c
    168e:	25 a5       	ldd	r18, Z+45	; 0x2d
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	92 2b       	or	r25, r18
    1694:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <non_volatile_data+0x21>
    1698:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <non_volatile_data+0x20>
						break;
    169c:	05 c0       	rjmp	.+10     	; 0x16a8 <CAN_task+0x5ce>
						
						default:
							SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    169e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    16a2:	80 61       	ori	r24, 0x10	; 16
    16a4:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
					}
				
				default:
					SET_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED);
    16a8:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    16ac:	80 61       	ori	r24, 0x10	; 16
    16ae:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
			}
			
			if(!(HAS_FLAG(can_state.flags, CAN_FLAG_COMMAND_FAILED))){
    16b2:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    16b6:	84 fd       	sbrc	r24, 4
    16b8:	11 c0       	rjmp	.+34     	; 0x16dc <CAN_task+0x602>
				SDO_WRITE_POSITIVE_RESPONSE;
    16ba:	ea e7       	ldi	r30, 0x7A	; 122
    16bc:	f2 e0       	ldi	r31, 0x02	; 2
    16be:	80 e6       	ldi	r24, 0x60	; 96
    16c0:	80 a3       	std	Z+32, r24	; 0x20
    16c2:	81 a5       	ldd	r24, Z+41	; 0x29
    16c4:	81 a3       	std	Z+33, r24	; 0x21
    16c6:	82 a5       	ldd	r24, Z+42	; 0x2a
    16c8:	82 a3       	std	Z+34, r24	; 0x22
    16ca:	83 a5       	ldd	r24, Z+43	; 0x2b
    16cc:	83 a3       	std	Z+35, r24	; 0x23
    16ce:	14 a2       	std	Z+36, r1	; 0x24
    16d0:	15 a2       	std	Z+37, r1	; 0x25
    16d2:	16 a2       	std	Z+38, r1	; 0x26
    16d4:	17 a2       	std	Z+39, r1	; 0x27
				eeprom_write();
    16d6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <eeprom_write>
    16da:	1d c0       	rjmp	.+58     	; 0x1716 <CAN_task+0x63c>
			}
			else{
				SDO_NEGATIVE_RESPONSE;
    16dc:	ea e7       	ldi	r30, 0x7A	; 122
    16de:	f2 e0       	ldi	r31, 0x02	; 2
    16e0:	80 e8       	ldi	r24, 0x80	; 128
    16e2:	80 a3       	std	Z+32, r24	; 0x20
    16e4:	81 a5       	ldd	r24, Z+41	; 0x29
    16e6:	81 a3       	std	Z+33, r24	; 0x21
    16e8:	82 a5       	ldd	r24, Z+42	; 0x2a
    16ea:	82 a3       	std	Z+34, r24	; 0x22
    16ec:	83 a5       	ldd	r24, Z+43	; 0x2b
    16ee:	83 a3       	std	Z+35, r24	; 0x23
    16f0:	14 a2       	std	Z+36, r1	; 0x24
    16f2:	15 a2       	std	Z+37, r1	; 0x25
    16f4:	16 a2       	std	Z+38, r1	; 0x26
    16f6:	17 a2       	std	Z+39, r1	; 0x27
    16f8:	0e c0       	rjmp	.+28     	; 0x1716 <CAN_task+0x63c>
			}
			
		}
		//gdy nieprawid³owa komenda
		else{
			SDO_NEGATIVE_RESPONSE;
    16fa:	ea e7       	ldi	r30, 0x7A	; 122
    16fc:	f2 e0       	ldi	r31, 0x02	; 2
    16fe:	80 e8       	ldi	r24, 0x80	; 128
    1700:	80 a3       	std	Z+32, r24	; 0x20
    1702:	81 a5       	ldd	r24, Z+41	; 0x29
    1704:	81 a3       	std	Z+33, r24	; 0x21
    1706:	82 a5       	ldd	r24, Z+42	; 0x2a
    1708:	82 a3       	std	Z+34, r24	; 0x22
    170a:	83 a5       	ldd	r24, Z+43	; 0x2b
    170c:	83 a3       	std	Z+35, r24	; 0x23
    170e:	14 a2       	std	Z+36, r1	; 0x24
    1710:	15 a2       	std	Z+37, r1	; 0x25
    1712:	16 a2       	std	Z+38, r1	; 0x26
    1714:	17 a2       	std	Z+39, r1	; 0x27
		}
		
		//procedura wysy³ania odpowiedzi
		CAN_send_SDO();
    1716:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CAN_send_SDO>
		
		CLEAR_FLAG(can_state.flags, CAN_FLAG_SDO_RECEIVED);
    171a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    171e:	87 7f       	andi	r24, 0xF7	; 247
    1720:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    1724:	08 95       	ret
		 
	}
	//aktualizacja danych
	else if(HAS_FLAG(can_state.flags, CAN_FLAG_UPDATE_DATA)){//mechanizm przepisywania danych PDO - po ka¿dym sync przepisywane s¹ œwie¿e dane
    1726:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    172a:	82 ff       	sbrs	r24, 2
    172c:	51 c0       	rjmp	.+162    	; 0x17d0 <CAN_task+0x6f6>
		static uint8_t frame=MOb_1;
		if(frame == MOb_1 ){ //RPDO 1
    172e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <frame.2073>
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	21 f4       	brne	.+8      	; 0x173e <CAN_task+0x664>
			//CAN.status_word = MOb_data[frame][1]<<8 | MOb_data[frame][0];
			frame++;
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <frame.2073>
    173c:	08 95       	ret
		}
		else if(frame == MOb_2 ){ //TPDO 1 - nadaje
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	f9 f4       	brne	.+62     	; 0x1780 <CAN_task+0x6a6>
			MOb_data[frame][0] = CAN.state;
    1742:	a0 e7       	ldi	r26, 0x70	; 112
    1744:	b2 e0       	ldi	r27, 0x02	; 2
    1746:	13 96       	adiw	r26, 0x03	; 3
    1748:	8c 91       	ld	r24, X
    174a:	13 97       	sbiw	r26, 0x03	; 3
    174c:	ea e7       	ldi	r30, 0x7A	; 122
    174e:	f2 e0       	ldi	r31, 0x02	; 2
    1750:	80 8b       	std	Z+16, r24	; 0x10
			MOb_data[frame][1] = CAN.board_position;
    1752:	11 96       	adiw	r26, 0x01	; 1
    1754:	8c 91       	ld	r24, X
    1756:	11 97       	sbiw	r26, 0x01	; 1
    1758:	81 8b       	std	Z+17, r24	; 0x11
			MOb_data[frame][2] = CAN.supply_voltage;
    175a:	12 96       	adiw	r26, 0x02	; 2
    175c:	8c 91       	ld	r24, X
    175e:	12 97       	sbiw	r26, 0x02	; 2
    1760:	82 8b       	std	Z+18, r24	; 0x12
			MOb_data[frame][3] = CAN.current;
    1762:	8c 91       	ld	r24, X
    1764:	83 8b       	std	Z+19, r24	; 0x13
			MOb_data[frame][4] = CAN.diag_1;
    1766:	14 96       	adiw	r26, 0x04	; 4
    1768:	8c 91       	ld	r24, X
    176a:	14 97       	sbiw	r26, 0x04	; 4
    176c:	84 8b       	std	Z+20, r24	; 0x14
			MOb_data[frame][5] = CAN.diag_2;
    176e:	15 96       	adiw	r26, 0x05	; 5
    1770:	8c 91       	ld	r24, X
    1772:	85 8b       	std	Z+21, r24	; 0x15
			MOb_data[frame][6] = 0x00;
    1774:	16 8a       	std	Z+22, r1	; 0x16
			MOb_data[frame][7] = 0x00;
    1776:	17 8a       	std	Z+23, r1	; 0x17
			frame++;
    1778:	83 e0       	ldi	r24, 0x03	; 3
    177a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <frame.2073>
    177e:	08 95       	ret
		}
		else if(frame == MOb_3 ){ //TPDO 2 nadaje
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	09 f0       	breq	.+2      	; 0x1786 <CAN_task+0x6ac>
    1784:	69 c0       	rjmp	.+210    	; 0x1858 <CAN_task+0x77e>
			MOb_data[frame][0] = CAN.state;
    1786:	a0 e7       	ldi	r26, 0x70	; 112
    1788:	b2 e0       	ldi	r27, 0x02	; 2
    178a:	13 96       	adiw	r26, 0x03	; 3
    178c:	8c 91       	ld	r24, X
    178e:	13 97       	sbiw	r26, 0x03	; 3
    1790:	ea e7       	ldi	r30, 0x7A	; 122
    1792:	f2 e0       	ldi	r31, 0x02	; 2
    1794:	80 8f       	std	Z+24, r24	; 0x18
			MOb_data[frame][1] = CAN.board_position_raw;
    1796:	16 96       	adiw	r26, 0x06	; 6
    1798:	9c 91       	ld	r25, X
    179a:	16 97       	sbiw	r26, 0x06	; 6
    179c:	17 96       	adiw	r26, 0x07	; 7
    179e:	8c 91       	ld	r24, X
    17a0:	17 97       	sbiw	r26, 0x07	; 7
    17a2:	91 8f       	std	Z+25, r25	; 0x19
			MOb_data[frame][2] = CAN.board_position_raw >>8;
    17a4:	82 8f       	std	Z+26, r24	; 0x1a
			MOb_data[frame][3] = CAN.current_raw ;
    17a6:	18 96       	adiw	r26, 0x08	; 8
    17a8:	9c 91       	ld	r25, X
    17aa:	18 97       	sbiw	r26, 0x08	; 8
    17ac:	19 96       	adiw	r26, 0x09	; 9
    17ae:	8c 91       	ld	r24, X
    17b0:	19 97       	sbiw	r26, 0x09	; 9
    17b2:	93 8f       	std	Z+27, r25	; 0x1b
			MOb_data[frame][4] = CAN.current_raw >> 8;
    17b4:	84 8f       	std	Z+28, r24	; 0x1c
			MOb_data[frame][5] = CAN.current ;
    17b6:	8c 91       	ld	r24, X
    17b8:	85 8f       	std	Z+29, r24	; 0x1d
			MOb_data[frame][6] = CAN.current >> 8;
    17ba:	16 8e       	std	Z+30, r1	; 0x1e
			MOb_data[frame][7] = 0x00 | (uint8_t)(CAN.current > 256);
    17bc:	17 8e       	std	Z+31, r1	; 0x1f
			CLEAR_FLAG(can_state.flags, CAN_FLAG_UPDATE_DATA);
    17be:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    17c2:	8b 7f       	andi	r24, 0xFB	; 251
    17c4:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
			frame = MOb_1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <frame.2073>
    17ce:	08 95       	ret
		}						
	}
	//wysy³anie danych po syncu
	else if( HAS_FLAG(can_state.flags, CAN_FLAG_SYNC_RECEIVED) ){ //){ //Zleæ transmisjê po koleji transmisjê kolejnych paczek
    17d0:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    17d4:	81 ff       	sbrs	r24, 1
    17d6:	40 c0       	rjmp	.+128    	; 0x1858 <CAN_task+0x77e>
		static uint8_t mob=MOb_2; //pierwszy MOb odbieraj¹cy
		CANPAGE = ( mob << 4 );						// Selects Message Object 0-5
    17d8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <mob.2074>
    17dc:	82 95       	swap	r24
    17de:	80 7f       	andi	r24, 0xF0	; 240
    17e0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if((CANEN2 & ( 1 << mob )) == 0){		//Jeœli MOb jest wolny
    17e4:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	00 90 1d 01 	lds	r0, 0x011D	; 0x80011d <mob.2074>
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <CAN_task+0x71a>
    17f0:	95 95       	asr	r25
    17f2:	87 95       	ror	r24
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <CAN_task+0x716>
    17f8:	80 fd       	sbrc	r24, 0
    17fa:	19 c0       	rjmp	.+50     	; 0x182e <CAN_task+0x754>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
				CANMSG = MOb_data[mob][byte_nr];
    1800:	aa ef       	ldi	r26, 0xFA	; 250
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <mob.2074>
    1808:	fc 01       	movw	r30, r24
    180a:	38 e0       	ldi	r19, 0x08	; 8
    180c:	23 9f       	mul	r18, r19
    180e:	e0 0d       	add	r30, r0
    1810:	f1 1d       	adc	r31, r1
    1812:	11 24       	eor	r1, r1
    1814:	e6 58       	subi	r30, 0x86	; 134
    1816:	fd 4f       	sbci	r31, 0xFD	; 253
    1818:	20 81       	ld	r18, Z
    181a:	2c 93       	st	X, r18
    181c:	01 96       	adiw	r24, 0x01	; 1
	//wysy³anie danych po syncu
	else if( HAS_FLAG(can_state.flags, CAN_FLAG_SYNC_RECEIVED) ){ //){ //Zleæ transmisjê po koleji transmisjê kolejnych paczek
		static uint8_t mob=MOb_2; //pierwszy MOb odbieraj¹cy
		CANPAGE = ( mob << 4 );						// Selects Message Object 0-5
		if((CANEN2 & ( 1 << mob )) == 0){		//Jeœli MOb jest wolny
			for(uint8_t byte_nr=0; byte_nr<8; byte_nr++  ){
    181e:	88 30       	cpi	r24, 0x08	; 8
    1820:	91 05       	cpc	r25, r1
    1822:	81 f7       	brne	.-32     	; 0x1804 <CAN_task+0x72a>
				CANMSG = MOb_data[mob][byte_nr];
			}
			//czyszczenie rejestru statusu
			CANSTMOB = 0x00;
    1824:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			//komenda nadania
			CANCDMOB = TRANSMISSION | ( 8 << DLC0);//zleæ transmisjê 8 bajtów
    1828:	88 e4       	ldi	r24, 0x48	; 72
    182a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		}
		if(mob >= MOb_3 ){
    182e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <mob.2074>
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	70 f0       	brcs	.+28     	; 0x1852 <CAN_task+0x778>
			 mob=MOb_2;
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <mob.2074>
			 CLEAR_FLAG(can_state.flags, CAN_FLAG_SYNC_RECEIVED);
    183c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    1840:	8d 7f       	andi	r24, 0xFD	; 253
    1842:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
			 SET_FLAG(can_state.flags, CAN_FLAG_UPDATE_DATA);
    1846:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <can_state>
    184a:	84 60       	ori	r24, 0x04	; 4
    184c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <can_state>
    1850:	08 95       	ret
		}		
		else mob++;
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <mob.2074>
    1858:	08 95       	ret

0000185a <PSC_init>:


void PSC_init(){
	
	//Inicjalizacja portów na wyjœciowe i ustawienie wyjœæ na 0
	DDR(PSC0A_PORT) |= (1<<PSC0A_PIN);
    185a:	50 9a       	sbi	0x0a, 0	; 10
	PORT(PSC0A_PORT) &= ~(_BV(PSC0A_PIN));
    185c:	58 98       	cbi	0x0b, 0	; 11
	PORT(PSC0A_PORT) |= (_BV(PSC0A_PIN));
    185e:	58 9a       	sbi	0x0b, 0	; 11
	
	//rejestr konfiguracjyny
	//PULOCK - jednoczena zmiana rejestrów gdy zwoniony na 0
	//PMODE - 0 One Ramp Mode
	//POPx - 1 aktywny stan wysoki
	PCNF |= (0<<PULOCK) | (0<<PMODE) | (1<<POPB) | (1<<POPA);
    1860:	e5 eb       	ldi	r30, 0xB5	; 181
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	8c 60       	ori	r24, 0x0C	; 12
    1868:	80 83       	st	Z, r24
	
	//PPRE - prescaler na wejœciu modu³o- brak preskalera
	//PCLKSEL - ¿ród³o zegara PLL
	//PRUN - start modu³u
	PCTL = (1<<PPRE1) | (0<<PPRE0) | (0<<PCLKSEL) | (0<<SWAP0) | (0<<SWAP1) | (0<<SWAP2);
    186a:	e7 eb       	ldi	r30, 0xB7	; 183
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 e8       	ldi	r24, 0x80	; 128
    1870:	80 83       	st	Z, r24
	//POVEN - zabezpieczenie przed overlapem
	//PELEV - stan wysoki powoduje b³¹d
	//PFLTE0 filtr cyforwy na wejsciu fault
	//PRFM - zatrzymaj modu³ w przypadku b³êdu
	//PMIC0 |= (0<<POVEN0) | (1<<PELEV0) | (1<<PFLTE0) | (1<<PRFM02) | (1<<PRFM01);
	PMIC0 |= (1<<POVEN0) | (0<<PELEV0) | (0<<PFLTE0) | (0<<PRFM02) | (0<<PRFM01);
    1872:	a8 eb       	ldi	r26, 0xB8	; 184
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	8c 91       	ld	r24, X
    1878:	80 68       	ori	r24, 0x80	; 128
    187a:	8c 93       	st	X, r24
	
	//Przewanie od Overcurrent
	//PIM |= (1<<PEVE0);
	
	//Ustawia TOP licznika
	POCR_RB = PSC_TOP;
    187c:	8f ef       	ldi	r24, 0xFF	; 255
    187e:	97 e0       	ldi	r25, 0x07	; 7
    1880:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1884:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	
	//W³¹cz kana³ 0A
	POC = (1<<POEN0A);
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	
	//ustawia wartoœæ pocz¹tkow¹ momentu
	PSC.torque = TORQUE_INIT_VAL;
    188e:	84 e6       	ldi	r24, 0x64	; 100
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PSC+0x1>
    1896:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PSC>
	POCR0RA = ((uint32_t)PSC_TOP*init_torque)/1000;
	PCTL |= (1<<PRUN);
}

inline void Disable_PSC(){
	PCTL &= ~(1<<PRUN);
    189a:	80 81       	ld	r24, Z
    189c:	8e 7f       	andi	r24, 0xFE	; 254
    189e:	80 83       	st	Z, r24
    18a0:	08 95       	ret

000018a2 <Enable_PSC>:
	Disable_PSC();
	
}

inline void Enable_PSC(uint16_t init_torque){
	POCR0RA = ((uint32_t)PSC_TOP*init_torque)/1000;
    18a2:	9c 01       	movw	r18, r24
    18a4:	af ef       	ldi	r26, 0xFF	; 255
    18a6:	b7 e0       	ldi	r27, 0x07	; 7
    18a8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__umulhisi3>
    18ac:	28 ee       	ldi	r18, 0xE8	; 232
    18ae:	33 e0       	ldi	r19, 0x03	; 3
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__udivmodsi4>
    18b8:	30 93 a3 00 	sts	0x00A3, r19	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
    18bc:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	PCTL |= (1<<PRUN);
    18c0:	e7 eb       	ldi	r30, 0xB7	; 183
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	80 83       	st	Z, r24
    18ca:	08 95       	ret

000018cc <Disable_PSC>:
}

inline void Disable_PSC(){
	PCTL &= ~(1<<PRUN);
    18cc:	e7 eb       	ldi	r30, 0xB7	; 183
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	8e 7f       	andi	r24, 0xFE	; 254
    18d4:	80 83       	st	Z, r24
    18d6:	08 95       	ret

000018d8 <PSC_Task>:

void PSC_Task(){
	static uint16_t torque_prev = 0;
	static uint16_t duty_cycle=0;
	
	if(PSC.torque != torque_prev){
    18d8:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <PSC>
    18dc:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <PSC+0x1>
    18e0:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <torque_prev.1540>
    18e4:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <torque_prev.1540+0x1>
    18e8:	82 17       	cp	r24, r18
    18ea:	93 07       	cpc	r25, r19
    18ec:	49 f1       	breq	.+82     	; 0x1940 <PSC_Task+0x68>
		
		duty_cycle = PSC.torque;
			
		if(duty_cycle>1000){
    18ee:	89 3e       	cpi	r24, 0xE9	; 233
    18f0:	23 e0       	ldi	r18, 0x03	; 3
    18f2:	92 07       	cpc	r25, r18
    18f4:	28 f4       	brcc	.+10     	; 0x1900 <PSC_Task+0x28>
	static uint16_t torque_prev = 0;
	static uint16_t duty_cycle=0;
	
	if(PSC.torque != torque_prev){
		
		duty_cycle = PSC.torque;
    18f6:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <duty_cycle.1541+0x1>
    18fa:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <duty_cycle.1541>
    18fe:	06 c0       	rjmp	.+12     	; 0x190c <PSC_Task+0x34>
			
		if(duty_cycle>1000){
			duty_cycle=1000;
    1900:	88 ee       	ldi	r24, 0xE8	; 232
    1902:	93 e0       	ldi	r25, 0x03	; 3
    1904:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <duty_cycle.1541+0x1>
    1908:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <duty_cycle.1541>
		}
		
		POCR0RA = ((uint32_t)PSC_TOP*duty_cycle)/1000;
    190c:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <duty_cycle.1541>
    1910:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <duty_cycle.1541+0x1>
    1914:	af ef       	ldi	r26, 0xFF	; 255
    1916:	b7 e0       	ldi	r27, 0x07	; 7
    1918:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__umulhisi3>
    191c:	28 ee       	ldi	r18, 0xE8	; 232
    191e:	33 e0       	ldi	r19, 0x03	; 3
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__udivmodsi4>
    1928:	30 93 a3 00 	sts	0x00A3, r19	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
    192c:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
		
		torque_prev = PSC.torque;
    1930:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <PSC>
    1934:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <PSC+0x1>
    1938:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <torque_prev.1540+0x1>
    193c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <torque_prev.1540>
    1940:	08 95       	ret

00001942 <__vector_5>:
	
		 
}

//przerwanie od overcurrent
SIGNAL (PSC_FAULT_vect){
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	0f 92       	push	r0
    194a:	11 24       	eor	r1, r1
    194c:	8f 93       	push	r24
    194e:	ef 93       	push	r30
    1950:	ff 93       	push	r31
	
	PSC_CLEAR_INTERRUPT
    1952:	ec eb       	ldi	r30, 0xBC	; 188
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	82 60       	ori	r24, 0x02	; 2
    195a:	80 83       	st	Z, r24
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	8f 91       	pop	r24
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	0f 90       	pop	r0
    1968:	1f 90       	pop	r1
    196a:	18 95       	reti

0000196c <timer_init>:
		return (time_2 - time_1);
	}
	else{
		return (time_2+(0xFFFF-time_1));
	}
};
    196c:	84 b5       	in	r24, 0x24	; 36
    196e:	82 60       	ori	r24, 0x02	; 2
    1970:	84 bd       	out	0x24, r24	; 36
    1972:	89 ef       	ldi	r24, 0xF9	; 249
    1974:	87 bd       	out	0x27, r24	; 39
    1976:	ee e6       	ldi	r30, 0x6E	; 110
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	82 60       	ori	r24, 0x02	; 2
    197e:	80 83       	st	Z, r24
    1980:	85 b5       	in	r24, 0x25	; 37
    1982:	83 60       	ori	r24, 0x03	; 3
    1984:	85 bd       	out	0x25, r24	; 37
    1986:	e1 e8       	ldi	r30, 0x81	; 129
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	83 60       	ori	r24, 0x03	; 3
    198e:	80 83       	st	Z, r24
    1990:	08 95       	ret

00001992 <timer_get>:
    1992:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <timer>
    1996:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <timer+0x1>
    199a:	08 95       	ret

0000199c <timer_time_elapsed>:
    199c:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <timer>
    19a0:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <timer+0x1>
    19a4:	28 17       	cp	r18, r24
    19a6:	39 07       	cpc	r19, r25
    19a8:	28 f0       	brcs	.+10     	; 0x19b4 <timer_time_elapsed+0x18>
    19aa:	a9 01       	movw	r20, r18
    19ac:	48 1b       	sub	r20, r24
    19ae:	59 0b       	sbc	r21, r25
    19b0:	ca 01       	movw	r24, r20
    19b2:	08 95       	ret
    19b4:	28 1b       	sub	r18, r24
    19b6:	39 0b       	sbc	r19, r25
    19b8:	c9 01       	movw	r24, r18
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	08 95       	ret

000019be <timer_time_elapsed_us>:
    19be:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    19c2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    19c6:	28 17       	cp	r18, r24
    19c8:	39 07       	cpc	r19, r25
    19ca:	28 f0       	brcs	.+10     	; 0x19d6 <timer_time_elapsed_us+0x18>
    19cc:	a9 01       	movw	r20, r18
    19ce:	48 1b       	sub	r20, r24
    19d0:	59 0b       	sbc	r21, r25
    19d2:	ca 01       	movw	r24, r20
    19d4:	08 95       	ret
    19d6:	28 1b       	sub	r18, r24
    19d8:	39 0b       	sbc	r19, r25
    19da:	c9 01       	movw	r24, r18
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	08 95       	ret

000019e0 <timer_new_tick>:
    19e0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <time_stamp.1525>
    19e4:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <time_stamp.1525+0x1>
    19e8:	0e 94 df 0c 	call	0x19be	; 0x19be <timer_time_elapsed_us>
    19ec:	49 97       	sbiw	r24, 0x19	; 25
    19ee:	50 f0       	brcs	.+20     	; 0x1a04 <timer_new_tick+0x24>
    19f0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    19f4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    19f8:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <time_stamp.1525+0x1>
    19fc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <time_stamp.1525>
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	08 95       	ret
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	08 95       	ret

00001a08 <__vector_15>:

//Przepe³nienie linika 0
SIGNAL(TIMER0_COMPA_vect) {
    1a08:	1f 92       	push	r1
    1a0a:	0f 92       	push	r0
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	0f 92       	push	r0
    1a10:	11 24       	eor	r1, r1
    1a12:	8f 93       	push	r24
    1a14:	9f 93       	push	r25
	//zwiêksz TIMER
	timer++;
    1a16:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <timer>
    1a1a:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <timer+0x1>
    1a1e:	01 96       	adiw	r24, 0x01	; 1
    1a20:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <timer+0x1>
    1a24:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <timer>
}
    1a28:	9f 91       	pop	r25
    1a2a:	8f 91       	pop	r24
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	0f 90       	pop	r0
    1a32:	1f 90       	pop	r1
    1a34:	18 95       	reti

00001a36 <__vector_14>:

//Przepe³nienie linika 1
SIGNAL(TIMER1_OVF_vect){
    1a36:	1f 92       	push	r1
    1a38:	0f 92       	push	r0
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	0f 92       	push	r0
    1a3e:	11 24       	eor	r1, r1

}
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <__vector_12>:
//Comapare A Timer1
SIGNAL(TIMER1_COMPA_vect){
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	0f 92       	push	r0
    1a52:	11 24       	eor	r1, r1
		
}
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	0f 90       	pop	r0
    1a5a:	1f 90       	pop	r1
    1a5c:	18 95       	reti

00001a5e <__vector_13>:
//Comapare B Timer1
SIGNAL(TIMER1_COMPB_vect ){
    1a5e:	1f 92       	push	r1
    1a60:	0f 92       	push	r0
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	0f 92       	push	r0
    1a66:	11 24       	eor	r1, r1
	
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	0f 90       	pop	r0
    1a6e:	1f 90       	pop	r1
    1a70:	18 95       	reti

00001a72 <__vector_20>:
{
	
    while (*s) 
      uart_putc(*s++);

}/* uart_puts */
    1a72:	1f 92       	push	r1
    1a74:	0f 92       	push	r0
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	0f 92       	push	r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	8f 93       	push	r24
    1a7e:	9f 93       	push	r25
    1a80:	ef 93       	push	r30
    1a82:	ff 93       	push	r31
    1a84:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1a88:	80 ff       	sbrs	r24, 0
    1a8a:	1a c0       	rjmp	.+52     	; 0x1ac0 <__vector_20+0x4e>
    1a8c:	e9 ec       	ldi	r30, 0xC9	; 201
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	81 60       	ori	r24, 0x01	; 1
    1a94:	80 83       	st	Z, r24
    1a96:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
    1a9a:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <UART_RxHead>
    1a9e:	ef 5f       	subi	r30, 0xFF	; 255
    1aa0:	ef 71       	andi	r30, 0x1F	; 31
    1aa2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <UART_RxTail>
    1aa6:	e8 17       	cp	r30, r24
    1aa8:	31 f0       	breq	.+12     	; 0x1ab6 <__vector_20+0x44>
    1aaa:	e0 93 35 01 	sts	0x0135, r30	; 0x800135 <UART_RxHead>
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	e8 5c       	subi	r30, 0xC8	; 200
    1ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab4:	90 83       	st	Z, r25
    1ab6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <UART_LastRxError>
    1aba:	82 60       	ori	r24, 0x02	; 2
    1abc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <UART_LastRxError>
    1ac0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1ac4:	81 ff       	sbrs	r24, 1
    1ac6:	1d c0       	rjmp	.+58     	; 0x1b02 <__vector_20+0x90>
    1ac8:	e9 ec       	ldi	r30, 0xC9	; 201
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	82 60       	ori	r24, 0x02	; 2
    1ad0:	80 83       	st	Z, r24
    1ad2:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <UART_TxHead>
    1ad6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <UART_TxTail>
    1ada:	98 17       	cp	r25, r24
    1adc:	69 f0       	breq	.+26     	; 0x1af8 <__vector_20+0x86>
    1ade:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <UART_TxTail>
    1ae2:	ef 5f       	subi	r30, 0xFF	; 255
    1ae4:	ef 77       	andi	r30, 0x7F	; 127
    1ae6:	e0 93 36 01 	sts	0x0136, r30	; 0x800136 <UART_TxTail>
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	e8 5a       	subi	r30, 0xA8	; 168
    1aee:	fe 4f       	sbci	r31, 0xFE	; 254
    1af0:	80 81       	ld	r24, Z
    1af2:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <__vector_20+0x90>
    1af8:	ea ec       	ldi	r30, 0xCA	; 202
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	8d 7f       	andi	r24, 0xFD	; 253
    1b00:	80 83       	st	Z, r24
    1b02:	ff 91       	pop	r31
    1b04:	ef 91       	pop	r30
    1b06:	9f 91       	pop	r25
    1b08:	8f 91       	pop	r24
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <uart_init>:
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <UART_TxHead>
    1b1c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <UART_TxTail>
    1b20:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <UART_RxHead>
    1b24:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <UART_RxTail>
    1b28:	c8 ec       	ldi	r28, 0xC8	; 200
    1b2a:	d0 e0       	ldi	r29, 0x00	; 0
    1b2c:	20 e8       	ldi	r18, 0x80	; 128
    1b2e:	28 83       	st	Y, r18
    1b30:	9c 01       	movw	r18, r24
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	50 e0       	ldi	r21, 0x00	; 0
    1b36:	60 e4       	ldi	r22, 0x40	; 64
    1b38:	72 e4       	ldi	r23, 0x42	; 66
    1b3a:	8f e0       	ldi	r24, 0x0F	; 15
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodsi4>
    1b42:	da 01       	movw	r26, r20
    1b44:	c9 01       	movw	r24, r18
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	a1 09       	sbc	r26, r1
    1b4a:	b1 09       	sbc	r27, r1
    1b4c:	89 2f       	mov	r24, r25
    1b4e:	9a 2f       	mov	r25, r26
    1b50:	ab 2f       	mov	r26, r27
    1b52:	bb 27       	eor	r27, r27
    1b54:	a7 fd       	sbrc	r26, 7
    1b56:	ba 95       	dec	r27
    1b58:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1b5c:	21 50       	subi	r18, 0x01	; 1
    1b5e:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1b62:	80 e9       	ldi	r24, 0x90	; 144
    1b64:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1b68:	ea ec       	ldi	r30, 0xCA	; 202
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	81 60       	ori	r24, 0x01	; 1
    1b70:	80 83       	st	Z, r24
    1b72:	88 81       	ld	r24, Y
    1b74:	8f 60       	ori	r24, 0x0F	; 15
    1b76:	88 83       	st	Y, r24
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	08 95       	ret

00001b7e <uart_getc_s>:
    1b7e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <UART_RxHead>
    1b82:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <UART_RxTail>
    1b86:	98 17       	cp	r25, r24
    1b88:	a9 f0       	breq	.+42     	; 0x1bb4 <uart_getc_s+0x36>
    1b8a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <UART_RxTail>
    1b8e:	9f 5f       	subi	r25, 0xFF	; 255
    1b90:	9f 71       	andi	r25, 0x1F	; 31
    1b92:	e9 2f       	mov	r30, r25
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	e8 5c       	subi	r30, 0xC8	; 200
    1b98:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9a:	20 81       	ld	r18, Z
    1b9c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <UART_LastRxError>
    1ba0:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <UART_RxTail>
    1ba4:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <UART_LastRxError>
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	98 2f       	mov	r25, r24
    1bac:	88 27       	eor	r24, r24
    1bae:	82 0f       	add	r24, r18
    1bb0:	91 1d       	adc	r25, r1
    1bb2:	08 95       	ret
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	08 95       	ret

00001bba <uart_putc>:
    1bba:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <UART_RxHead>
    1bbe:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <UART_RxTail>
    1bc2:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <UART_TxHead>
    1bc6:	2f 5f       	subi	r18, 0xFF	; 255
    1bc8:	2f 77       	andi	r18, 0x7F	; 127
    1bca:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <UART_TxTail>
    1bce:	29 17       	cp	r18, r25
    1bd0:	e1 f3       	breq	.-8      	; 0x1bca <uart_putc+0x10>
    1bd2:	42 2f       	mov	r20, r18
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	fa 01       	movw	r30, r20
    1bd8:	e8 5a       	subi	r30, 0xA8	; 168
    1bda:	fe 4f       	sbci	r31, 0xFE	; 254
    1bdc:	80 83       	st	Z, r24
    1bde:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <UART_TxHead>
    1be2:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1be6:	84 fd       	sbrc	r24, 4
    1be8:	0d c0       	rjmp	.+26     	; 0x1c04 <uart_putc+0x4a>
    1bea:	ea ec       	ldi	r30, 0xCA	; 202
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	82 60       	ori	r24, 0x02	; 2
    1bf2:	80 83       	st	Z, r24
    1bf4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <UART_TxTail>
    1bf8:	fa 01       	movw	r30, r20
    1bfa:	e8 5a       	subi	r30, 0xA8	; 168
    1bfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
    1c04:	08 95       	ret

00001c06 <uart_putc_s>:
    1c06:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <UART_RxHead>
    1c0a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <UART_RxTail>
    1c0e:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <UART_TxHead>
    1c12:	2f 5f       	subi	r18, 0xFF	; 255
    1c14:	2f 77       	andi	r18, 0x7F	; 127
    1c16:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <UART_TxTail>
    1c1a:	29 17       	cp	r18, r25
    1c1c:	e1 f3       	breq	.-8      	; 0x1c16 <uart_putc_s+0x10>
    1c1e:	42 2f       	mov	r20, r18
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	fa 01       	movw	r30, r20
    1c24:	e8 5a       	subi	r30, 0xA8	; 168
    1c26:	fe 4f       	sbci	r31, 0xFE	; 254
    1c28:	80 83       	st	Z, r24
    1c2a:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <UART_TxHead>
    1c2e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1c32:	84 fd       	sbrc	r24, 4
    1c34:	0d c0       	rjmp	.+26     	; 0x1c50 <uart_putc_s+0x4a>
    1c36:	ea ec       	ldi	r30, 0xCA	; 202
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	82 60       	ori	r24, 0x02	; 2
    1c3e:	80 83       	st	Z, r24
    1c40:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <UART_TxTail>
    1c44:	fa 01       	movw	r30, r20
    1c46:	e8 5a       	subi	r30, 0xA8	; 168
    1c48:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
    1c50:	08 95       	ret

00001c52 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    register char c;
    
	
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1c56:	ec 01       	movw	r28, r24
    1c58:	21 96       	adiw	r28, 0x01	; 1
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	84 91       	lpm	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	39 f0       	breq	.+14     	; 0x1c70 <uart_puts_p+0x1e>
      uart_putc(c);
    1c62:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <uart_putc>
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
	
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1c66:	fe 01       	movw	r30, r28
    1c68:	84 91       	lpm	r24, Z
    1c6a:	21 96       	adiw	r28, 0x01	; 1
    1c6c:	81 11       	cpse	r24, r1
    1c6e:	f9 cf       	rjmp	.-14     	; 0x1c62 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	08 95       	ret

00001c76 <__divmodhi4>:
    1c76:	97 fb       	bst	r25, 7
    1c78:	07 2e       	mov	r0, r23
    1c7a:	16 f4       	brtc	.+4      	; 0x1c80 <__divmodhi4+0xa>
    1c7c:	00 94       	com	r0
    1c7e:	07 d0       	rcall	.+14     	; 0x1c8e <__divmodhi4_neg1>
    1c80:	77 fd       	sbrc	r23, 7
    1c82:	09 d0       	rcall	.+18     	; 0x1c96 <__divmodhi4_neg2>
    1c84:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__udivmodhi4>
    1c88:	07 fc       	sbrc	r0, 7
    1c8a:	05 d0       	rcall	.+10     	; 0x1c96 <__divmodhi4_neg2>
    1c8c:	3e f4       	brtc	.+14     	; 0x1c9c <__divmodhi4_exit>

00001c8e <__divmodhi4_neg1>:
    1c8e:	90 95       	com	r25
    1c90:	81 95       	neg	r24
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	08 95       	ret

00001c96 <__divmodhi4_neg2>:
    1c96:	70 95       	com	r23
    1c98:	61 95       	neg	r22
    1c9a:	7f 4f       	sbci	r23, 0xFF	; 255

00001c9c <__divmodhi4_exit>:
    1c9c:	08 95       	ret

00001c9e <__udivmodsi4>:
    1c9e:	a1 e2       	ldi	r26, 0x21	; 33
    1ca0:	1a 2e       	mov	r1, r26
    1ca2:	aa 1b       	sub	r26, r26
    1ca4:	bb 1b       	sub	r27, r27
    1ca6:	fd 01       	movw	r30, r26
    1ca8:	0d c0       	rjmp	.+26     	; 0x1cc4 <__udivmodsi4_ep>

00001caa <__udivmodsi4_loop>:
    1caa:	aa 1f       	adc	r26, r26
    1cac:	bb 1f       	adc	r27, r27
    1cae:	ee 1f       	adc	r30, r30
    1cb0:	ff 1f       	adc	r31, r31
    1cb2:	a2 17       	cp	r26, r18
    1cb4:	b3 07       	cpc	r27, r19
    1cb6:	e4 07       	cpc	r30, r20
    1cb8:	f5 07       	cpc	r31, r21
    1cba:	20 f0       	brcs	.+8      	; 0x1cc4 <__udivmodsi4_ep>
    1cbc:	a2 1b       	sub	r26, r18
    1cbe:	b3 0b       	sbc	r27, r19
    1cc0:	e4 0b       	sbc	r30, r20
    1cc2:	f5 0b       	sbc	r31, r21

00001cc4 <__udivmodsi4_ep>:
    1cc4:	66 1f       	adc	r22, r22
    1cc6:	77 1f       	adc	r23, r23
    1cc8:	88 1f       	adc	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	1a 94       	dec	r1
    1cce:	69 f7       	brne	.-38     	; 0x1caa <__udivmodsi4_loop>
    1cd0:	60 95       	com	r22
    1cd2:	70 95       	com	r23
    1cd4:	80 95       	com	r24
    1cd6:	90 95       	com	r25
    1cd8:	9b 01       	movw	r18, r22
    1cda:	ac 01       	movw	r20, r24
    1cdc:	bd 01       	movw	r22, r26
    1cde:	cf 01       	movw	r24, r30
    1ce0:	08 95       	ret

00001ce2 <__divmodsi4>:
    1ce2:	05 2e       	mov	r0, r21
    1ce4:	97 fb       	bst	r25, 7
    1ce6:	1e f4       	brtc	.+6      	; 0x1cee <__divmodsi4+0xc>
    1ce8:	00 94       	com	r0
    1cea:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__negsi2>
    1cee:	57 fd       	sbrc	r21, 7
    1cf0:	07 d0       	rcall	.+14     	; 0x1d00 <__divmodsi4_neg2>
    1cf2:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__udivmodsi4>
    1cf6:	07 fc       	sbrc	r0, 7
    1cf8:	03 d0       	rcall	.+6      	; 0x1d00 <__divmodsi4_neg2>
    1cfa:	4e f4       	brtc	.+18     	; 0x1d0e <__divmodsi4_exit>
    1cfc:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__negsi2>

00001d00 <__divmodsi4_neg2>:
    1d00:	50 95       	com	r21
    1d02:	40 95       	com	r20
    1d04:	30 95       	com	r19
    1d06:	21 95       	neg	r18
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d0c:	5f 4f       	sbci	r21, 0xFF	; 255

00001d0e <__divmodsi4_exit>:
    1d0e:	08 95       	ret

00001d10 <__negsi2>:
    1d10:	90 95       	com	r25
    1d12:	80 95       	com	r24
    1d14:	70 95       	com	r23
    1d16:	61 95       	neg	r22
    1d18:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	08 95       	ret

00001d20 <__tablejump2__>:
    1d20:	ee 0f       	add	r30, r30
    1d22:	ff 1f       	adc	r31, r31
    1d24:	05 90       	lpm	r0, Z+
    1d26:	f4 91       	lpm	r31, Z
    1d28:	e0 2d       	mov	r30, r0
    1d2a:	09 94       	ijmp

00001d2c <__umulhisi3>:
    1d2c:	a2 9f       	mul	r26, r18
    1d2e:	b0 01       	movw	r22, r0
    1d30:	b3 9f       	mul	r27, r19
    1d32:	c0 01       	movw	r24, r0
    1d34:	a3 9f       	mul	r26, r19
    1d36:	70 0d       	add	r23, r0
    1d38:	81 1d       	adc	r24, r1
    1d3a:	11 24       	eor	r1, r1
    1d3c:	91 1d       	adc	r25, r1
    1d3e:	b2 9f       	mul	r27, r18
    1d40:	70 0d       	add	r23, r0
    1d42:	81 1d       	adc	r24, r1
    1d44:	11 24       	eor	r1, r1
    1d46:	91 1d       	adc	r25, r1
    1d48:	08 95       	ret

00001d4a <__muluhisi3>:
    1d4a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__umulhisi3>
    1d4e:	a5 9f       	mul	r26, r21
    1d50:	90 0d       	add	r25, r0
    1d52:	b4 9f       	mul	r27, r20
    1d54:	90 0d       	add	r25, r0
    1d56:	a4 9f       	mul	r26, r20
    1d58:	80 0d       	add	r24, r0
    1d5a:	91 1d       	adc	r25, r1
    1d5c:	11 24       	eor	r1, r1
    1d5e:	08 95       	ret

00001d60 <__udivmodhi4>:
    1d60:	aa 1b       	sub	r26, r26
    1d62:	bb 1b       	sub	r27, r27
    1d64:	51 e1       	ldi	r21, 0x11	; 17
    1d66:	07 c0       	rjmp	.+14     	; 0x1d76 <__udivmodhi4_ep>

00001d68 <__udivmodhi4_loop>:
    1d68:	aa 1f       	adc	r26, r26
    1d6a:	bb 1f       	adc	r27, r27
    1d6c:	a6 17       	cp	r26, r22
    1d6e:	b7 07       	cpc	r27, r23
    1d70:	10 f0       	brcs	.+4      	; 0x1d76 <__udivmodhi4_ep>
    1d72:	a6 1b       	sub	r26, r22
    1d74:	b7 0b       	sbc	r27, r23

00001d76 <__udivmodhi4_ep>:
    1d76:	88 1f       	adc	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	5a 95       	dec	r21
    1d7c:	a9 f7       	brne	.-22     	; 0x1d68 <__udivmodhi4_loop>
    1d7e:	80 95       	com	r24
    1d80:	90 95       	com	r25
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	08 95       	ret

00001d88 <eeprom_read_block>:
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22

00001d8c <eeprom_read_blraw>:
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	f9 99       	sbic	0x1f, 1	; 31
    1d90:	fe cf       	rjmp	.-4      	; 0x1d8e <eeprom_read_blraw+0x2>
    1d92:	06 c0       	rjmp	.+12     	; 0x1da0 <eeprom_read_blraw+0x14>
    1d94:	f2 bd       	out	0x22, r31	; 34
    1d96:	e1 bd       	out	0x21, r30	; 33
    1d98:	f8 9a       	sbi	0x1f, 0	; 31
    1d9a:	31 96       	adiw	r30, 0x01	; 1
    1d9c:	00 b4       	in	r0, 0x20	; 32
    1d9e:	0d 92       	st	X+, r0
    1da0:	41 50       	subi	r20, 0x01	; 1
    1da2:	50 40       	sbci	r21, 0x00	; 0
    1da4:	b8 f7       	brcc	.-18     	; 0x1d94 <eeprom_read_blraw+0x8>
    1da6:	08 95       	ret

00001da8 <eeprom_write_block>:
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	03 c0       	rjmp	.+6      	; 0x1db4 <eeprom_write_block+0xc>
    1dae:	2d 91       	ld	r18, X+
    1db0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <eeprom_write_r18>
    1db4:	41 50       	subi	r20, 0x01	; 1
    1db6:	50 40       	sbci	r21, 0x00	; 0
    1db8:	d0 f7       	brcc	.-12     	; 0x1dae <eeprom_write_block+0x6>
    1dba:	08 95       	ret

00001dbc <eeprom_write_byte>:
    1dbc:	26 2f       	mov	r18, r22

00001dbe <eeprom_write_r18>:
    1dbe:	f9 99       	sbic	0x1f, 1	; 31
    1dc0:	fe cf       	rjmp	.-4      	; 0x1dbe <eeprom_write_r18>
    1dc2:	1f ba       	out	0x1f, r1	; 31
    1dc4:	92 bd       	out	0x22, r25	; 34
    1dc6:	81 bd       	out	0x21, r24	; 33
    1dc8:	20 bd       	out	0x20, r18	; 32
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	fa 9a       	sbi	0x1f, 2	; 31
    1dd0:	f9 9a       	sbi	0x1f, 1	; 31
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	08 95       	ret

00001dd8 <_exit>:
    1dd8:	f8 94       	cli

00001dda <__stop_program>:
    1dda:	ff cf       	rjmp	.-2      	; 0x1dda <__stop_program>
